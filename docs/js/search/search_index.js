var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.257,1,2.387]],["body/entities/Address.html",[0,1.866,1,4.534,2,2.074,3,0.269,4,0.243,5,0.217,6,3.634,7,0.322,8,2.878,9,5.526,10,1.499,11,4.747,12,4.747,13,2.172,14,0.295,15,1.326,16,6.154,17,5.286,18,3.661,19,3.661,20,2.419,21,6.154,22,0.547,23,0.019,24,2.305,25,1.807,26,5.052,27,0.795,28,4.231,29,4.231,30,4.231,31,3.398,32,4.287,33,4.231,34,4.287,35,4.231,36,1.866,37,4.287,38,4.231,39,2.417,40,4.231,41,5.526,42,4.233,43,1.776,44,4.231,45,4.231,46,0.386,47,2.204,48,5.526,49,2.074,50,0.269,51,0.184,52,0.014,53,0.014]],["title/modules/AppModule.html",[54,1.542,55,2.593]],["body/modules/AppModule.html",[3,0.296,4,0.268,5,0.24,23,0.019,43,1.5,46,0.515,50,0.296,51,0.203,52,0.015,53,0.015,54,2.438,55,5.28,56,2.288,57,3.065,58,4.009,59,4.009,60,3.957,61,4.568,62,4.568,63,4.568,64,4.239,65,3.502,66,2.777,67,2.592,68,4.668,69,3.502,70,1.234,71,4.668,72,4.009,73,3.251,74,2.431,75,3.575,76,3.575,77,4.668,78,4.668,79,4.009,80,4.668,81,4.668,82,4.668,83,4.668,84,4.668]],["title/classes/AssignRolePermissionsQuery.html",[51,0.162,85,2.593]],["body/classes/AssignRolePermissionsQuery.html",[3,0.291,4,0.263,5,0.235,7,0.349,10,1.389,14,0.319,15,1.394,20,2.285,22,0.443,23,0.019,25,1.464,27,0.644,36,2.269,43,1.868,46,0.319,50,0.291,51,0.292,52,0.014,53,0.014,85,4.049,86,1.271,87,4.893,88,2.365,89,3.931,90,1.968,91,4.049,92,4.049,93,3.229,94,5.148,95,4.308,96,5.148,97,3.1,98,4.893,99,4.449,100,3.931,101,4.049,102,4.577,103,2.688,104,4.993,105,5.813,106,5.813,107,3.931,108,4.577,109,2.285,110,4.993,111,3.548,112,5.487,113,2.117]],["title/classes/AssignRoleUsersQuery.html",[51,0.162,114,2.593]],["body/classes/AssignRoleUsersQuery.html",[3,0.292,4,0.264,5,0.236,7,0.35,14,0.321,15,1.398,20,2.29,22,0.444,23,0.019,25,1.468,27,0.646,36,2.272,43,1.873,46,0.321,50,0.292,51,0.292,52,0.014,53,0.014,86,1.276,87,4.902,88,2.316,90,1.97,91,4.059,92,4.059,99,4.457,100,3.947,101,4.059,103,2.695,104,5.005,107,3.947,109,2.29,111,3.554,112,5.497,113,2.125,114,4.059,115,3.947,116,4.059,117,1.032,118,2.512,119,6.73,120,2.059,121,4.902,122,4.595,123,2.943,124,5.78,125,4.315,126,4.595,127,2.856]],["title/controllers/AuthController.html",[128,1.722,129,2.593]],["body/controllers/AuthController.html",[3,0.229,4,0.207,5,0.185,7,0.433,14,0.252,22,0.378,23,0.019,25,1.431,27,0.629,46,0.483,50,0.229,51,0.157,52,0.012,53,0.012,70,0.954,90,1.379,117,1.006,128,2.967,129,3.459,130,1.769,131,3.099,132,2.313,133,3.609,134,3.459,135,5.078,136,5.694,137,5.255,138,4.967,139,4.967,140,3.804,141,3.804,142,1.191,143,3.099,144,4.436,145,3.609,146,4.967,147,4.266,148,3.609,149,2.009,150,1.514,151,1.514,152,3.682,153,1.451,154,3.944,155,4.178,156,0.953,157,1.116,158,3.609,159,3.609,160,3.609,161,4.468,162,4.266,163,3.609,164,4.436,165,3.609,166,4.35,167,3.459,168,4.266,169,3.609,170,2.764,171,3.459,172,2.764,173,2.513,174,2.313,175,3.804,176,4.967,177,2.513,178,4.967,179,1.879,180,2.513,181,2.147,182,3.099,183,2.313,184,2.313,185,3.099,186,3.099,187,2.758,188,3.099,189,3.099,190,3.609,191,2.513,192,3.609,193,1.769,194,2.513,195,3.609,196,4.35,197,3.609,198,1.234,199,3.609,200,3.609,201,3.609,202,3.609,203,3.609,204,3.609,205,3.609,206,3.609]],["title/modules/AuthModule.html",[54,1.542,60,2.068]],["body/modules/AuthModule.html",[3,0.276,4,0.249,5,0.223,23,0.019,46,0.513,50,0.276,51,0.189,52,0.014,53,0.014,54,2.328,56,2.127,57,2.926,60,4.19,64,4.159,65,3.343,66,2.582,67,2.411,69,3.343,70,1.148,79,3.728,129,4.339,130,2.754,155,4.43,182,3.728,183,3.602,184,2.783,185,3.728,207,3.728,208,4.341,209,3.728,210,3.728,211,3.878,212,4.005,213,4.482,214,4.341,215,3.914,216,4.826,217,4.826,218,3.325,219,1.706,220,1.62,221,4.341,222,4.341,223,4.341,224,5.619,225,3.023,226,3.728,227,4.341]],["title/injectables/AuthService.html",[155,2.215,228,1.139]],["body/injectables/AuthService.html",[3,0.145,4,0.131,5,0.117,7,0.429,10,1.534,13,1.93,14,0.159,15,0.852,22,0.448,23,0.019,24,2.12,25,0.894,27,0.651,39,2.657,46,0.435,47,1.19,50,0.145,51,0.099,52,0.009,53,0.009,70,0.604,90,0.986,109,1.395,117,0.942,135,4.313,136,3.049,141,3.762,142,1.178,143,3.049,144,4.164,147,1.962,150,1.388,151,1.544,153,1.425,155,3.35,156,0.893,157,1.045,162,3.049,164,3.767,166,4.975,167,5.045,171,3.705,184,2.792,186,1.962,189,3.049,193,3.058,198,1.224,217,5.218,218,1.75,228,1.086,229,1.19,230,1.962,231,2.112,232,2.473,233,3.049,234,2.473,235,3.615,236,3.55,237,3.233,238,4.355,239,4.355,240,3.55,241,2.284,242,2.473,243,2.658,244,3.762,245,4.093,246,1.972,247,3.55,248,3.74,249,3.762,250,3.55,251,2.284,252,4.218,253,3.55,254,4.911,255,3.55,256,2.112,257,2.284,258,3.55,259,2.719,260,3.55,261,3.55,262,2.284,263,2.271,264,1.553,265,2.473,266,2.719,267,2.473,268,2.284,269,3.794,270,2.284,271,3.149,272,3.421,273,2.719,274,3.049,275,3.55,276,3.74,277,3.55,278,2.719,279,2.276,280,3.55,281,2.284,282,4.911,283,2.284,284,2.284,285,2.284,286,1.75,287,1.75,288,2.284,289,1.75,290,2.284,291,1.224,292,3.336,293,3.336,294,3.033,295,2.326,296,3.033,297,2.284,298,2.284,299,2.284,300,2.284,301,1.465,302,2.284,303,2.284,304,2.284,305,2.284,306,3.55,307,4.218,308,3.762,309,4.911,310,3.049,311,3.55,312,2.284,313,3.55,314,2.284,315,2.284,316,2.284,317,2.284,318,2.284,319,2.284,320,3.033,321,2.284,322,3.55,323,2.284,324,3.049,325,1.471,326,3.55,327,2.284,328,2.284,329,2.284,330,2.284]],["title/injectables/CaslAbilityFactory.html",[211,1.939,228,1.139]],["body/injectables/CaslAbilityFactory.html",[3,0.209,4,0.188,5,0.169,7,0.355,10,1.525,13,1.291,14,0.229,22,0.515,23,0.019,24,1.056,27,0.364,39,2.035,46,0.41,47,1.711,50,0.429,51,0.288,52,0.012,53,0.012,70,0.869,97,2.035,103,1.52,117,0.582,120,1.653,127,1.61,142,1.116,150,1.416,151,1.511,153,1.33,156,0.781,157,0.646,198,0.714,211,2.423,219,2.123,228,1.424,229,1.711,237,2.647,243,1.291,246,2.584,256,2.768,264,2.711,291,1.011,295,2.569,331,2.584,332,1.825,333,2.841,334,4.652,335,3.563,336,3.286,337,2.173,338,2.28,339,2.289,340,2.517,341,1.487,342,1.437,343,3.352,344,2.289,345,2.289,346,2.192,347,2.107,348,1.737,349,1.828,350,1.495,351,1.571,352,2.983,353,1.711,354,2.768,355,2.289,356,2.289,357,2.123,358,3.059,359,2.517,360,3.462,361,2.308,362,2.517,363,2.517,364,1.828,365,2.813,366,2.517,367,2.517,368,3.563,369,2.517,370,3.563,371,2.517,372,2.517,373,2.517,374,3.494,375,2.983,376,1.737,377,2.289,378,1.291,379,1.437,380,1.571,381,3.24,382,3.494,383,2.289,384,2.107,385,2.768,386,3.24,387,1.955,388,2.289,389,3.974,390,2.289,391,1.825,392,2.289]],["title/interfaces/CaslPermission.html",[358,1.939,360,2.387]],["body/interfaces/CaslPermission.html",[3,0.214,4,0.193,5,0.173,7,0.257,10,1.449,13,1.325,14,0.235,15,1.136,22,0.527,23,0.019,24,1.76,39,1.474,46,0.415,47,1.756,50,0.432,51,0.282,52,0.012,53,0.012,70,0.891,97,1.474,103,1.559,120,1.676,127,1.652,150,1.251,151,1.357,153,1.132,156,0.795,198,0.733,211,1.756,219,1.862,228,1.449,237,1.652,243,1.325,246,1.872,256,2.005,264,2.838,291,1.029,295,2.598,331,1.872,332,1.872,333,2.755,335,2.582,337,2.113,338,1.652,339,2.348,340,2.582,341,1.599,342,1.474,343,3.472,344,2.348,345,2.348,346,2.423,347,2.161,348,2.217,349,1.862,350,1.522,351,1.599,352,3.037,353,1.756,354,2.818,355,2.348,356,2.348,357,2.152,358,3.259,359,3.628,360,4.012,361,2.674,362,2.582,363,2.582,364,1.862,365,3.38,366,2.582,367,2.582,368,3.628,369,2.582,370,3.628,371,2.582,372,2.582,373,2.582,374,3.534,375,3.037,376,1.768,377,2.348,378,1.325,379,1.474,380,1.599,381,3.299,382,3.534,383,2.348,384,2.161,385,2.818,386,3.299,387,2.005,388,2.348,389,4.012,390,2.348,391,1.872,392,2.348,393,2.348]],["title/classes/CreatePermissionPolicyHandler.html",[51,0.162,394,2.068]],["body/classes/CreatePermissionPolicyHandler.html",[3,0.206,4,0.186,5,0.167,7,0.351,8,2.402,10,1.523,14,0.226,22,0.247,23,0.019,27,0.36,43,1.043,46,0.322,50,0.371,51,0.279,52,0.011,53,0.011,86,0.901,97,2.346,117,1.034,118,2.303,120,1.961,142,1.106,149,1.903,150,1.225,151,1.334,153,1.325,156,0.545,157,0.638,198,1.269,219,1.275,220,1.211,291,1.269,325,1.344,333,2.883,337,2.275,338,1.59,341,1.813,342,1.419,346,2.461,348,1.211,349,2.295,350,1.877,351,1.972,357,2.896,361,2.519,364,1.275,376,2.393,378,2.519,379,2.698,380,2.164,394,2.561,395,2.08,396,3.024,397,2.853,398,3.245,399,2.956,400,3.212,401,2.956,402,2.26,403,2.346,404,3.339,405,2.165,406,1.802,407,1.69,408,2.017,409,2.26,410,1.69,411,1.802,412,1.501,413,2.08,414,2.26,415,1.69,416,1.802,417,1.69]],["title/classes/CreateRolePolicyHandler.html",[51,0.162,418,2.068]],["body/classes/CreateRolePolicyHandler.html",[3,0.196,4,0.177,5,0.159,7,0.339,10,1.54,14,0.215,22,0.235,23,0.019,27,0.342,43,0.992,46,0.311,50,0.363,51,0.248,52,0.011,53,0.011,86,0.857,88,2.427,117,1.116,118,2.259,120,1.362,142,1.068,149,1.933,150,1.382,151,1.382,152,2.898,153,1.375,156,0.518,157,0.607,198,1.241,219,1.214,220,1.153,291,1.241,325,1.279,333,2.791,337,2.245,341,1.625,346,2.671,348,1.153,349,2.244,350,2.137,351,1.927,353,1.608,357,2.849,361,2.663,365,1.608,376,2.353,378,2.663,379,2.647,380,2.128,396,2.966,397,2.058,403,2.647,404,3.627,405,2.026,407,1.608,408,1.946,409,2.181,410,1.608,415,1.608,417,1.608,418,2.472,419,1.979,420,3.088,421,1.715,422,1.715,423,3.634,424,2.853,425,1.715,426,2.853,427,1.715]],["title/classes/CreateUserDto.html",[51,0.162,428,2.852]],["body/classes/CreateUserDto.html",[3,0.215,4,0.194,5,0.174,7,0.258,10,1.501,14,0.237,15,1.141,22,0.495,23,0.019,24,2.255,25,1.638,27,0.72,31,3.102,46,0.237,50,0.215,51,0.259,52,0.012,53,0.012,86,0.941,90,2.017,91,3.312,92,3.312,93,4.034,94,5.564,95,4.657,109,2.814,111,3.708,113,1.568,156,1,264,3.131,265,4.986,269,3.731,271,4.021,272,4.368,301,2.173,405,1.765,412,2.199,424,3.049,428,3.643,429,5.735,430,2.912,431,4.718,432,4.718,433,4.718,434,3.39,435,3.39,436,6.149,437,5.483,438,4.986,439,4.756,440,5.493,441,3.39,442,3.39,443,3.39,444,4.756,445,2.912,446,3.39,447,2.912,448,3.39,449,4.756,450,2.912,451,3.39,452,2.912,453,2.912,454,3.39]],["title/classes/DeletePermissionPolicyHandler.html",[51,0.162,416,2.068]],["body/classes/DeletePermissionPolicyHandler.html",[3,0.207,4,0.187,5,0.168,7,0.353,8,2.411,10,1.524,14,0.228,22,0.249,23,0.019,27,0.362,43,1.049,46,0.323,50,0.372,51,0.279,52,0.011,53,0.011,86,0.906,97,2.353,117,1.037,118,2.308,120,1.892,142,1.111,149,1.906,150,1.229,151,1.337,153,1.327,156,0.548,157,0.641,198,1.272,219,1.283,220,1.218,291,1.272,325,1.352,333,2.871,337,1.977,338,1.599,341,1.817,342,1.427,346,2.519,348,1.218,349,2.301,350,1.881,351,2.278,357,2.898,361,2.524,364,1.283,376,2.397,378,2.524,379,2.704,380,2.168,394,1.812,395,2.092,396,3.03,397,2.859,399,2.092,400,2.273,401,2.092,402,1.599,403,2.353,404,3.345,405,2.168,406,1.812,407,1.7,408,2.025,409,2.269,410,1.7,411,1.812,412,1.509,413,2.092,414,2.273,415,1.7,416,2.571,417,1.7,455,3.263]],["title/classes/DeleteRolePolicyHandler.html",[51,0.162,427,2.068]],["body/classes/DeleteRolePolicyHandler.html",[3,0.196,4,0.177,5,0.159,7,0.339,10,1.54,14,0.215,22,0.235,23,0.019,27,0.342,43,0.992,46,0.311,50,0.363,51,0.248,52,0.011,53,0.011,86,0.857,88,2.427,117,1.116,118,2.259,120,0.945,142,1.068,149,1.954,150,1.382,151,1.382,152,2.898,153,1.375,156,0.518,157,0.607,198,1.241,219,1.214,220,1.153,291,1.241,325,1.279,333,2.791,337,1.927,341,1.625,346,2.651,348,1.153,349,2.244,350,2.137,351,2.245,353,1.608,357,2.849,361,2.663,365,2.318,376,2.353,378,2.663,379,2.647,380,2.128,396,2.966,397,2.058,403,2.647,404,3.627,405,2.026,407,1.608,408,1.946,409,2.181,410,1.608,415,1.608,417,1.608,418,1.715,419,1.979,421,1.715,422,1.715,423,3.634,424,2.853,425,1.715,426,2.853,427,2.472,456,3.088]],["title/controllers/HealthController.html",[128,1.722,457,2.593]],["body/controllers/HealthController.html",[3,0.287,4,0.259,5,0.232,7,0.344,14,0.315,23,0.019,25,1.137,27,0.5,39,2.52,46,0.493,50,0.287,51,0.196,52,0.017,53,0.014,70,1.194,90,1.6,103,3.092,128,2.936,130,2.213,132,2.895,134,4.014,142,1.383,149,1.6,153,1.382,173,3.145,177,3.145,179,2.352,180,3.145,181,2.686,187,3.714,191,3.145,193,3.111,198,0.981,286,3.459,287,3.459,308,3.459,377,5.001,457,4.014,458,3.878,459,7.065,460,4.95,461,4.014,462,4.516,463,4.516,464,4.95,465,5.763,466,5.763,467,5.763,468,5.763,469,5.763,470,3.459,471,4.516,472,4.516,473,4.516,474,2.508,475,4.516,476,3.878,477,4.516,478,4.516,479,4.516]],["title/modules/HealthModule.html",[54,1.542,61,2.387]],["body/modules/HealthModule.html",[3,0.338,4,0.305,5,0.273,23,0.019,46,0.506,50,0.338,51,0.231,52,0.016,53,0.016,54,2.643,56,2.608,61,4.09,69,3.166,70,1.408,130,3.127,181,3.166,457,4.759,470,4.077,480,5.322,481,6.381,482,5.322,483,6.381,484,4.571,485,5.322,486,5.322,487,5.322,488,5.322,489,5.322,490,4.571]],["title/interfaces/IPolicyHandler.html",[358,1.939,376,1.39]],["body/interfaces/IPolicyHandler.html",[3,0.212,4,0.192,5,0.172,7,0.255,10,1.462,13,1.313,14,0.233,22,0.517,23,0.019,24,1.074,27,0.37,39,1.462,46,0.413,47,1.741,50,0.431,51,0.281,52,0.012,53,0.012,70,0.884,97,1.462,103,1.546,117,0.592,120,1.811,127,1.638,142,1.129,150,1.245,151,1.351,153,1.223,156,0.79,157,0.657,198,0.726,211,1.741,219,1.85,228,1.441,237,1.638,243,1.313,246,1.856,256,1.988,264,2.908,291,1.023,295,2.588,331,2.615,332,1.856,333,2.78,335,2.56,337,2.185,338,1.638,339,2.328,340,2.56,341,1.553,342,1.462,343,3.463,344,2.328,345,2.328,346,2.329,347,2.143,348,1.757,349,1.85,350,1.513,351,1.589,352,3.018,353,1.741,354,2.801,355,2.328,356,2.328,357,2.452,358,3.249,359,2.56,360,3.495,361,2.452,362,2.56,363,2.56,364,1.85,365,2.839,366,2.56,367,2.56,368,3.606,369,2.56,370,3.606,371,2.56,372,2.56,373,2.56,374,3.711,375,3.495,376,2.035,377,3.279,378,1.85,379,2.059,380,1.84,381,3.279,382,3.521,383,2.328,384,2.143,385,2.801,386,3.279,387,1.988,388,2.328,389,3.999,390,2.328,391,1.856,392,2.328,393,2.328,397,2.177,491,3.342]],["title/injectables/JwtAuthGuard.html",[183,2.387,228,1.139]],["body/injectables/JwtAuthGuard.html",[3,0.259,4,0.234,5,0.21,7,0.461,14,0.285,22,0.411,23,0.019,27,0.598,43,2.15,46,0.449,50,0.259,51,0.263,52,0.013,53,0.013,70,1.08,117,0.956,120,1.652,142,1.295,149,1.909,153,1.116,154,3.829,156,0.906,157,1.061,183,3.462,187,3.574,188,3.508,198,1.581,225,2.845,228,1.652,229,2.127,243,2.122,291,1.173,295,1.786,338,2.646,364,2.122,380,1.823,405,1.735,412,2.497,474,3.359,492,5.195,493,3.508,494,6.436,495,4.483,496,5.748,497,6.436,498,5.905,499,3.508,500,6.247,501,4.085,502,4.638,503,4.638,504,6.023,505,4.085,506,4.638,507,4.085,508,3.129,509,3.129,510,3.508,511,4.085,512,4.085,513,4.638,514,4.085,515,3.508,516,4.085,517,4.085]],["title/injectables/JwtStrategy.html",[213,2.387,228,1.139]],["body/injectables/JwtStrategy.html",[3,0.27,4,0.244,5,0.218,7,0.422,10,1.351,14,0.296,20,2.177,22,0.324,23,0.019,27,0.614,46,0.456,50,0.27,51,0.185,52,0.014,53,0.014,70,1.123,90,1.814,94,4.243,95,3.551,117,0.752,118,2.068,142,1.329,149,1.538,150,1.265,151,1.587,153,1.351,156,0.713,157,0.834,161,3.858,167,4.551,184,3.952,198,1.34,213,3.551,228,1.695,229,2.212,237,3.021,252,4.758,259,5.005,265,4.551,286,3.253,287,3.253,291,0.923,307,3.647,308,3.253,310,3.647,320,3.858,324,3.647,325,1.759,460,4.758,474,3.424,495,3.858,496,3.647,508,3.253,510,3.647,518,3.647,519,6.165,520,5.539,521,6.165,522,4.247,523,5.539,524,5.539,525,4.247,526,7.178,527,4.758,528,5.539,529,3.253,530,4.247,531,3.647,532,4.247,533,4.247,534,4.247,535,4.247,536,4.247]],["title/classes/LoginDto.html",[51,0.162,144,2.387]],["body/classes/LoginDto.html",[3,0.301,4,0.272,5,0.244,7,0.361,14,0.331,15,1.633,22,0.453,23,0.019,24,2.188,25,1.498,27,0.659,46,0.331,50,0.301,51,0.296,52,0.015,53,0.015,86,1.317,90,1.986,109,2.676,111,3.607,113,2.193,144,3.811,269,4.171,276,6.022,403,2.6,445,4.074,447,4.074,450,4.074,452,4.074,453,4.074,537,4.074,538,4.554,539,6.145,540,6.145,541,7.154,542,5.215,543,5.215,544,5.945,545,4.743,546,4.743]],["title/classes/PageDto.html",[51,0.162,547,2.387]],["body/classes/PageDto.html",[3,0.252,4,0.228,5,0.204,7,0.404,14,0.277,15,1.527,22,0.52,23,0.019,25,1.336,27,0.661,43,1.704,46,0.416,50,0.252,51,0.315,52,0.013,53,0.013,86,1.103,90,1.894,93,4.162,103,2.452,109,2.502,113,1.838,117,1.174,149,1.472,150,1.454,151,1.211,156,0.667,157,0.781,179,2.07,194,4.752,264,2.319,265,3.693,267,3.693,291,1.152,403,2.319,436,4.554,474,3.314,547,3.399,548,3.413,549,5.302,550,4.146,551,5.119,552,5.302,553,7.076,554,5.302,555,3.693,556,4.061,557,4.061,558,3.974,559,3.974,560,3.974,561,5.125,562,5.967,563,2.207,564,3.044,565,3.974,566,3.974]],["title/classes/PageMetaDto.html",[51,0.162,550,2.068]],["body/classes/PageMetaDto.html",[3,0.212,4,0.192,5,0.172,7,0.255,13,1.85,14,0.233,15,1.42,22,0.507,23,0.019,25,1.63,27,0.737,36,2.411,46,0.329,50,0.212,51,0.313,52,0.012,53,0.012,86,0.928,109,2.806,117,0.592,118,1.248,123,2.588,128,2.177,150,1.351,151,1.245,153,0.973,156,0.561,157,0.657,179,1.741,194,5.151,246,2.615,263,1.546,291,0.726,294,3.279,380,1.998,408,1.462,413,3.018,474,2.615,550,3.595,551,2.328,555,3.279,561,6.182,563,4.025,567,4.353,568,2.87,569,3.259,570,4.927,571,6.238,572,6.238,573,6.238,574,5.093,575,3.342,576,4.345,577,4.708,578,5.832,579,4.533,580,3.342,581,3.342,582,4.708,583,4.708,584,4.533,585,4.708,586,3.342,587,3.342,588,4.044,589,4.708,590,3.342,591,3.279,592,4.708,593,3.342,594,4.682,595,3.342,596,4.044,597,3.342,598,3.342,599,3.342,600,3.342,601,3.342,602,3.342]],["title/interfaces/PageMetaDtoParameters.html",[358,1.939,576,2.593]],["body/interfaces/PageMetaDtoParameters.html",[3,0.321,4,0.29,5,0.259,7,0.385,13,2.429,14,0.352,15,1.482,22,0.53,23,0.019,36,2.41,46,0.352,50,0.321,51,0.269,52,0.015,53,0.015,117,1.094,118,2.307,152,3.432,263,2.335,343,3.624,358,3.478,393,3.516,550,3.432,551,3.516,563,2.804,567,3.236,569,3.69,570,4.847,576,4.304,584,4.733,588,5.307,603,4.336,604,3.236]],["title/classes/PageOptionsDto.html",[51,0.162,569,1.825]],["body/classes/PageOptionsDto.html",[3,0.222,4,0.201,5,0.18,7,0.266,13,1.91,14,0.244,15,1.166,22,0.5,23,0.019,25,1.407,27,0.669,36,2.409,46,0.421,50,0.222,51,0.276,52,0.012,53,0.012,86,0.971,90,1.349,91,3.384,92,4.783,93,2.699,113,1.617,116,4.783,117,1.216,127,3.365,149,1.349,153,1.247,157,1.29,179,1.821,194,4.857,198,0.76,264,3.003,343,3.419,347,2.241,405,1.795,408,3.003,490,4.797,540,4.173,563,3.352,567,4.066,569,2.381,574,4.278,584,5.341,594,3.003,596,3.003,605,3.003,606,6.867,607,4.783,608,4.859,609,6.867,610,5.341,611,5.585,612,3.496,613,3.496,614,3.496,615,4.859,616,3.496,617,3.496,618,4.859,619,4.173,620,3.496,621,3.496,622,3.496,623,3.496,624,4.859,625,4.859,626,6.035,627,3.003,628,3.496,629,5.585,630,6.035,631,3.496,632,3.496,633,3.496,634,3.496,635,4.859,636,3.496]],["title/entities/Permission.html",[0,1.257,341,0.893]],["body/entities/Permission.html",[0,1.612,2,1.671,3,0.217,4,0.196,5,0.175,7,0.26,13,2.761,14,0.238,15,1.145,18,3.278,19,3.278,20,2.166,22,0.496,23,0.019,24,1.534,25,1.641,26,5.03,27,0.722,31,3.554,32,3.838,34,3.838,36,1.612,37,3.838,46,0.385,49,3.539,50,0.217,51,0.239,52,0.012,53,0.012,88,1.918,90,2.018,109,2.816,123,2.611,220,1.273,279,4.287,337,2.372,341,1.685,346,2.547,348,2.057,350,1.534,361,2.628,421,1.894,437,5.381,438,4.893,578,6.034,591,4.158,637,2.929,638,4.775,639,3.41,640,6.034,641,7.026,642,3.41,643,3.657,644,3.41,645,3.41,646,4.101,647,4.101,648,3.41,649,2.612,650,4.775,651,3.41,652,4.775,653,3.657,654,2.375,655,2.375,656,3.41]],["title/controllers/PermissionController.html",[128,1.722,657,2.593]],["body/controllers/PermissionController.html",[0,1.582,3,0.211,4,0.19,5,0.17,7,0.253,14,0.232,20,2.319,22,0.474,23,0.019,25,1.567,27,0.689,36,2.18,46,0.481,50,0.211,51,0.236,52,0.012,53,0.012,70,0.878,116,2.311,117,1.102,120,2.074,128,2.511,130,1.626,132,2.127,134,3.263,137,5.821,140,3.588,142,1.124,153,1.286,156,1.044,157,1.222,161,4.721,170,2.542,171,3.263,172,4.518,173,2.311,174,2.127,175,3.588,177,2.311,179,1.728,180,2.311,181,1.974,191,2.311,193,1.626,196,4.766,198,1.352,212,1.843,220,1.239,291,0.721,341,1.653,351,1.833,364,2.664,391,1.843,394,3.016,406,3.456,411,3.016,416,3.016,569,3.165,604,2.127,655,2.311,657,3.263,658,2.85,659,3.003,660,3.003,661,4.024,662,4.685,663,4.685,664,4.024,665,4.024,666,2.85,667,4.529,668,2.85,669,3.319,670,6.778,671,3.319,672,2.85,673,3.319,674,5.899,675,3.319,676,2.85,677,3.319,678,2.85,679,2.85,680,3.319,681,2.85,682,2.85,683,3.319,684,4.685,685,4.024,686,2.85,687,3.319,688,2.311,689,2.85,690,3.23,691,2.85,692,3.319,693,3.319,694,2.85,695,5.344,696,3.319,697,3.319,698,2.85,699,3.319,700,3.319,701,2.85,702,3.319,703,3.319,704,3.319,705,3.319,706,3.319,707,3.319]],["title/classes/PermissionDto.html",[51,0.162,667,2.387]],["body/classes/PermissionDto.html",[0,2.419,3,0.216,4,0.195,5,0.175,7,0.364,8,2.484,14,0.238,15,1.431,18,3.276,19,3.276,20,2.469,22,0.496,23,0.019,24,1.533,25,1.202,27,0.741,31,3.553,36,1.61,46,0.384,50,0.216,51,0.207,52,0.012,53,0.012,86,0.945,90,1.989,93,2.649,109,2.76,111,3.314,113,1.575,117,0.603,123,3.071,142,1.144,150,1.363,151,1.558,153,1.138,156,0.572,157,0.669,198,0.74,220,1.271,234,3.323,243,2.164,263,2.206,278,3.654,291,0.74,295,1.489,301,4.174,341,1.834,346,2.345,348,2.055,350,1.533,361,2.469,643,3.654,655,2.372,667,3.058,708,2.924,709,4.77,710,4.097,711,5.125,712,3.405,713,3.405,714,3.405,715,3.405,716,3.405,717,3.405,718,4.77,719,3.405,720,3.654,721,4.097,722,2.924,723,3.405,724,4.77,725,4.77,726,2.608,727,4.77,728,4.097,729,4.77,730,4.77,731,4.77,732,4.77,733,2.924,734,3.405,735,2.924,736,3.405]],["title/modules/PermissionModule.html",[54,1.542,62,2.387]],["body/modules/PermissionModule.html",[3,0.319,4,0.288,5,0.258,23,0.019,46,0.506,50,0.319,51,0.218,52,0.015,53,0.015,54,2.553,56,2.464,57,3.21,60,4.031,62,4.758,65,3.667,66,2.991,67,2.792,69,3.667,70,1.329,73,3.501,74,2.618,75,3.85,130,3.021,215,4.293,341,1.206,657,4.643,690,4.317,691,4.317,726,3.85,737,4.317,738,5.027,739,4.317,740,5.027,741,5.027,742,5.027]],["title/injectables/PermissionService.html",[228,1.139,690,2.215]],["body/injectables/PermissionService.html",[0,1.727,2,1.21,3,0.157,4,0.142,5,0.127,7,0.443,13,2.283,14,0.172,15,1.227,20,2.748,22,0.443,23,0.019,25,0.622,27,0.644,36,2.268,39,2.725,46,0.435,49,2.241,50,0.157,51,0.24,52,0.009,53,0.009,70,0.653,74,1.286,90,1.421,97,1.648,117,0.976,127,1.847,142,1.394,151,1.327,153,1.445,154,3.456,156,0.925,157,1.083,193,2.241,198,1.262,228,1.153,229,1.286,231,2.243,232,3.564,237,3.399,242,2.625,243,2.56,246,2.093,256,2.243,263,3.107,273,2.887,291,1.198,292,3.502,293,3.502,294,3.184,295,2.938,296,4.209,320,2.625,337,1.543,341,1.765,350,1.469,351,1.272,402,2.508,529,1.891,547,3.28,550,3.226,563,2.093,564,1.891,569,3.129,570,2.625,604,1.583,659,3.28,660,3.28,661,3.237,664,3.237,665,3.237,666,3.237,667,4.763,678,3.237,681,3.237,688,2.625,689,2.121,690,2.243,726,1.891,743,2.121,744,3.927,745,3.769,746,4.572,747,2.469,748,3.564,749,3.564,750,3.769,751,2.469,752,3.237,753,2.887,754,3.237,755,2.469,756,2.469,757,3.237,758,3.237,759,2.469,760,2.887,761,2.469,762,3.769,763,3.838,764,3.237,765,2.469,766,3.927,767,1.891,768,2.121,769,3.237,770,2.469,771,2.469,772,2.121,773,2.121,774,2.121,775,2.121,776,2.121,777,2.469,778,4.572,779,3.769,780,2.121,781,3.237,782,2.469,783,2.469,784,2.469,785,2.469,786,2.469,787,2.469]],["title/guards/PoliciesGuard.html",[212,2.068,788,2.852]],["body/guards/PoliciesGuard.html",[3,0.206,4,0.186,5,0.167,7,0.445,10,1.276,14,0.227,22,0.409,23,0.019,27,0.595,39,2.019,46,0.375,50,0.206,51,0.268,52,0.011,53,0.011,70,0.859,101,4.071,117,0.951,120,1.412,127,2.864,142,1.107,149,1.49,150,1.054,151,1.335,153,1.208,156,0.901,157,1.055,161,3.215,193,3.025,198,1.167,211,3.664,212,2.564,219,1.277,220,1.213,225,2.264,228,1.412,231,3.477,234,3.215,237,2.631,242,4.467,264,2.019,266,3.536,291,1.342,295,2.348,296,2.264,333,2.908,337,1.558,338,2.262,354,3.477,357,2.426,374,4.011,375,4.655,380,1.973,382,3.925,385,3.815,387,2.746,389,2.959,396,1.593,397,2.135,405,1.878,474,2.564,498,5.02,499,2.791,500,5.79,503,3.965,504,5.666,506,5.02,515,2.791,748,3.215,749,3.215,789,3.25,790,2.791,791,4.616,792,5.844,793,4.616,794,3.25,795,4.616,796,4.616,797,4.616,798,3.25,799,4.616,800,4.616,801,4.616,802,3.25,803,5.844,804,5.368,805,4.616,806,3.25,807,3.25,808,3.25,809,3.25,810,3.25,811,3.25,812,3.25,813,3.25,814,3.25]],["title/classes/ReadPermissionPolicyHandler.html",[51,0.162,406,2.068]],["body/classes/ReadPermissionPolicyHandler.html",[3,0.204,4,0.184,5,0.165,7,0.348,8,3.025,10,1.521,14,0.224,22,0.244,23,0.019,27,0.355,43,1.469,46,0.319,50,0.369,51,0.286,52,0.011,53,0.011,86,0.89,97,2.33,117,0.943,118,2.383,120,2.092,142,1.097,149,1.824,150,1.044,151,1.326,153,1.358,156,0.538,157,0.63,198,1.262,219,1.26,220,1.197,291,1.262,325,1.894,333,2.864,337,1.961,338,2.24,341,1.82,342,1.402,346,2.507,348,1.197,349,2.64,350,1.866,351,1.961,357,2.914,361,2.283,364,1.797,376,2.383,378,2.283,379,2.685,380,2.218,394,1.78,395,2.055,396,3.009,397,3.106,399,2.055,400,2.233,401,2.055,402,1.571,403,1.999,404,3.025,405,2.255,406,2.539,407,1.669,408,1.999,409,2.24,410,1.669,411,1.78,412,1.482,413,2.055,414,2.233,415,1.669,416,1.78,417,1.669,815,3.206]],["title/classes/ReadRolePolicyHandler.html",[51,0.162,422,2.068]],["body/classes/ReadRolePolicyHandler.html",[3,0.196,4,0.177,5,0.159,7,0.339,10,1.536,14,0.215,22,0.235,23,0.019,27,0.342,43,0.992,46,0.311,50,0.363,51,0.248,52,0.011,53,0.011,86,0.857,88,2.427,117,1.116,118,2.259,120,0.945,142,1.068,149,1.954,150,1.382,151,1.382,152,3.171,153,1.375,156,0.518,157,0.607,198,1.241,219,1.214,220,1.153,291,1.241,325,1.279,333,2.766,337,1.927,341,1.65,346,2.69,348,1.153,349,2.614,350,2.137,351,1.927,353,1.608,357,2.849,361,2.614,365,1.608,376,2.353,378,2.614,379,2.647,380,2.128,396,2.966,397,2.058,403,2.647,404,3.582,405,2.026,407,1.608,408,1.946,409,2.181,410,1.608,415,1.608,417,1.608,418,1.715,419,1.979,421,1.715,422,2.472,423,3.977,424,3.345,425,1.715,426,2.853,427,1.715,816,3.088]],["title/classes/RefreshTokenDto.html",[51,0.162,164,2.387]],["body/classes/RefreshTokenDto.html",[3,0.33,4,0.299,5,0.267,7,0.397,14,0.363,15,1.51,22,0.397,23,0.019,24,2.023,25,1.311,27,0.577,46,0.363,50,0.33,51,0.306,52,0.016,53,0.016,86,1.445,90,1.952,109,2.764,111,3.759,113,2.407,164,4.508,249,5.515,256,3.745,263,2.911,364,2.474,817,5.407,818,4.47,819,6.295,820,5.205]],["title/entities/Role.html",[0,1.257,88,1.196]],["body/entities/Role.html",[0,1.823,2,2.002,3,0.259,4,0.234,5,0.21,7,0.311,10,1.33,14,0.422,15,1.295,18,3.599,19,3.599,20,2.377,22,0.524,23,0.019,24,1.735,25,1.732,26,3.761,27,0.762,31,3.352,32,4.213,34,4.213,36,1.823,37,4.213,42,4.929,43,2.253,46,0.422,47,2.127,49,2.002,50,0.259,51,0.263,52,0.013,53,0.013,88,2.209,90,1.499,97,3.15,123,2.361,125,4.618,156,1.123,341,1.544,342,1.786,412,2.497,591,4.483,649,4.136,653,4.633,654,2.845,821,3.508,822,5.4,823,4.136,824,4.085,825,4.085,826,4.085,827,4.085,828,4.085,829,5.4,830,4.638,831,3.508,832,4.085,833,5.4,834,4.085,835,4.638]],["title/controllers/RoleController.html",[128,1.722,836,2.593]],["body/controllers/RoleController.html",[0,1.208,3,0.146,4,0.132,5,0.118,7,0.464,10,0.739,14,0.161,20,2.714,22,0.53,23,0.019,25,1.486,27,0.653,36,2.159,39,2.472,46,0.454,50,0.146,51,0.1,52,0.009,53,0.009,70,0.61,85,4.108,88,2.266,90,0.993,96,2.74,98,2.74,99,3.439,103,2.614,114,4.108,116,4.108,117,1.108,118,1.843,120,1.865,121,2.74,125,2.293,127,1.753,128,2.026,130,1.131,132,1.479,134,2.492,140,2.74,142,0.858,149,1.881,150,1.548,151,1.392,152,3.673,153,1.466,154,2.937,156,0.99,157,1.159,170,1.767,171,2.492,172,2.74,173,1.607,174,1.479,175,2.74,177,1.607,179,1.201,180,1.607,181,1.372,191,1.607,193,1.131,196,4.517,198,1.456,212,1.281,220,0.861,266,3.781,267,2.492,279,2.293,291,1.325,351,0.779,364,2.396,380,1.208,391,1.281,405,1.15,418,2.434,422,2.968,425,3.276,427,2.434,569,3.241,604,1.479,655,1.607,659,2.293,660,2.293,668,1.981,672,1.981,676,1.981,679,1.981,682,1.981,685,3.073,686,1.981,688,1.607,694,1.981,695,5.065,698,1.981,701,1.981,753,2.74,758,3.073,836,2.492,837,1.981,838,3.073,839,3.073,840,5.235,841,3.577,842,3.577,843,4.24,844,3.073,845,2.307,846,2.307,847,2.307,848,5.653,849,2.307,850,2.307,851,2.307,852,3.577,853,1.981,854,4.522,855,2.307,856,3.874,857,2.307,858,2.307,859,3.577,860,4.24,861,2.307,862,2.307,863,4.937,864,3.577,865,3.577,866,1.981,867,2.307,868,3.577,869,3.577,870,1.981,871,2.307,872,3.577,873,2.307,874,3.577,875,2.307,876,2.307,877,1.981,878,1.981,879,2.307,880,2.307,881,2.307,882,2.307,883,2.307,884,2.307,885,2.307,886,2.307,887,2.307,888,2.307,889,2.307,890,2.307,891,2.307,892,2.307,893,2.307,894,3.577,895,2.307,896,2.307,897,2.307,898,2.307,899,2.307]],["title/classes/RoleDto.html",[51,0.162,854,2.387]],["body/classes/RoleDto.html",[0,1.678,3,0.229,4,0.207,5,0.186,7,0.379,8,2.589,14,0.252,15,1.591,18,3.381,19,3.381,20,2.523,22,0.489,23,0.019,24,1.598,25,0.91,27,0.735,31,3.605,36,1.678,46,0.347,50,0.229,51,0.216,52,0.012,53,0.012,86,1.003,88,2.46,90,1.973,109,2.721,111,3.157,113,1.671,117,0.64,123,2.174,142,1.193,150,1.135,151,1.623,153,1.175,156,1.113,157,0.71,198,0.785,234,3.463,243,1.42,263,2.299,264,3.027,291,0.785,295,1.58,301,4.252,384,4.438,412,2.299,556,3.808,710,4.27,711,5.258,720,3.808,721,4.27,722,3.104,728,4.27,733,3.104,735,3.104,823,3.808,854,3.925,900,3.104,901,3.614,902,3.614,903,3.614,904,3.614,905,4.972,906,3.614,907,3.614,908,4.27,909,2.768,910,4.972,911,4.972,912,4.972,913,3.614,914,3.614]],["title/modules/RoleModule.html",[54,1.542,63,2.387]],["body/modules/RoleModule.html",[3,0.311,4,0.281,5,0.252,10,1.254,23,0.019,46,0.515,47,2.553,50,0.311,51,0.213,52,0.015,53,0.015,54,2.514,56,2.402,57,3.16,60,4.006,63,4.735,65,3.61,66,2.916,67,2.722,69,3.61,70,1.296,73,3.414,74,2.553,75,3.754,88,1.575,130,2.974,215,4.226,341,1.456,342,2.143,836,4.591,856,4.291,878,4.21,909,3.754,915,4.21,916,4.21,917,4.901,918,4.901,919,4.901,920,4.901]],["title/injectables/RoleService.html",[228,1.139,856,2.215]],["body/injectables/RoleService.html",[0,1.887,2,0.888,3,0.115,4,0.104,5,0.093,7,0.426,8,1.537,10,0.772,13,1.999,14,0.126,15,0.708,20,2.676,22,0.453,23,0.019,25,0.941,27,0.659,36,2.43,39,2.445,46,0.415,47,0.943,49,2.628,50,0.115,51,0.162,52,0.007,53,0.007,70,0.479,74,0.943,88,2.386,90,1.552,96,3.299,97,2.528,98,4.107,99,3.894,103,1.992,117,0.949,118,1.102,121,3.895,124,3.699,125,3.707,142,1.426,150,1.277,151,1.358,153,1.456,154,3.025,156,0.9,157,1.053,193,2.834,198,1.215,228,0.903,229,0.943,231,1.756,232,3.894,237,3.36,243,2.439,246,1.639,263,3.038,273,4.282,279,1.892,291,1.257,292,2.861,293,2.861,294,2.602,295,2.873,296,4.523,320,3,341,0.896,342,0.792,350,0.948,351,0.996,402,1.447,495,2.056,527,2.535,529,2.861,547,2.761,550,2.392,563,1.639,564,1.387,569,2.982,570,2.056,604,1.161,659,3.584,660,3.584,688,2.056,744,3.208,748,2.056,749,2.056,752,2.535,753,2.261,754,2.535,760,2.261,763,4.398,764,2.535,766,4.605,767,1.387,768,1.556,769,2.535,772,1.556,773,1.556,774,1.556,775,1.556,776,1.556,780,1.556,781,2.535,838,2.535,839,2.535,840,2.535,843,2.535,844,2.535,853,2.535,854,4.732,856,1.756,860,2.535,866,2.535,870,2.535,877,1.556,908,3.699,909,1.387,921,1.556,922,3.735,923,3.208,924,3.735,925,2.952,926,1.811,927,5.59,928,2.952,929,1.811,930,1.811,931,2.952,932,2.952,933,2.952,934,1.811,935,4.307,936,2.952,937,2.952,938,4.307,939,1.811,940,1.811,941,1.811,942,1.811,943,1.811,944,2.952,945,1.811,946,2.535,947,1.811,948,1.811,949,1.811,950,1.811,951,4.742,952,2.952,953,1.811,954,2.952,955,1.811,956,2.952,957,1.811,958,1.811,959,2.952,960,1.811,961,2.952,962,2.952,963,1.811,964,1.811,965,1.811]],["title/classes/TokenDto.html",[51,0.162,245,2.593]],["body/classes/TokenDto.html",[3,0.277,4,0.25,5,0.224,7,0.429,14,0.304,15,1.351,22,0.476,23,0.019,24,2.394,27,0.691,50,0.277,51,0.287,52,0.014,53,0.014,86,1.21,93,2.42,95,2.793,109,2.593,117,0.771,123,1.905,141,4.314,149,1.832,151,1.425,156,0.731,157,0.856,166,5.233,167,5.027,233,3.742,244,5.233,245,3.923,248,6.011,249,5.528,263,2.015,267,4.347,291,1.224,364,2.214,412,2.605,437,5.054,438,4.596,474,3.466,502,4.837,557,4.314,966,3.742,967,4.357,968,5.632,969,5.632,970,4.78,971,6.241,972,5.632,973,5.632,974,4.357,975,4.357,976,4.357]],["title/classes/UpdatePermissionPolicyHandler.html",[51,0.162,411,2.068]],["body/classes/UpdatePermissionPolicyHandler.html",[3,0.21,4,0.19,5,0.17,7,0.357,8,2.438,10,1.513,14,0.231,22,0.253,23,0.019,27,0.367,43,1.065,46,0.327,50,0.374,51,0.288,52,0.012,53,0.012,86,0.92,97,2.823,117,0.961,118,2.201,120,1.903,142,1.123,149,1.792,150,1.069,151,1.239,153,1.334,156,0.556,157,0.651,198,1.281,219,1.302,220,1.237,291,1.281,325,1.373,333,2.878,337,1.99,338,1.624,341,1.809,342,1.449,346,2.476,348,1.237,349,2.317,350,2.177,351,1.99,357,2.904,361,2.317,364,1.302,376,2.409,378,2.317,379,2.719,380,2.179,394,1.84,395,2.124,396,3.048,397,2.876,399,2.124,400,2.308,401,2.124,402,1.624,403,2.047,404,3.071,405,2.177,406,1.84,407,1.726,408,2.047,409,2.294,410,1.726,411,2.599,412,2.164,413,3.478,414,3.779,415,1.726,416,1.84,417,1.726,977,3.314]],["title/classes/UpdateRolePolicyHandler.html",[51,0.162,425,2.068]],["body/classes/UpdateRolePolicyHandler.html",[3,0.187,4,0.169,5,0.151,7,0.327,10,1.548,14,0.205,22,0.224,23,0.019,27,0.326,43,1.38,46,0.3,50,0.354,51,0.243,52,0.011,53,0.011,86,0.816,88,2.433,117,1.098,118,2.216,120,0.9,142,1.03,149,1.985,150,1.356,151,1.356,152,3.297,153,1.425,156,0.494,157,0.578,198,1.213,219,1.156,220,1.098,291,1.213,325,1.78,333,2.74,337,1.884,341,1.672,346,2.715,348,1.098,349,2.193,350,2.312,351,1.884,353,2.237,357,2.828,361,2.631,365,1.532,376,2.314,378,2.631,379,2.596,380,2.161,396,2.909,397,1.987,403,2.596,404,3.666,405,2.057,407,1.532,408,1.879,409,2.105,410,1.532,415,1.532,417,1.532,418,1.633,419,1.885,421,1.633,422,1.633,423,4.135,424,3.253,425,2.386,426,3.578,427,1.633,978,2.941]],["title/entities/User.html",[0,1.257,10,0.77]],["body/entities/User.html",[0,1.629,1,4.195,2,1.696,3,0.22,4,0.198,5,0.178,7,0.264,10,1.306,14,0.419,15,1.157,18,3.304,19,3.304,20,2.183,22,0.555,23,0.019,24,2.264,25,1.823,26,5.004,27,0.802,31,3.567,32,3.868,34,3.868,36,1.629,37,3.868,42,4.84,43,2.341,46,0.388,49,1.696,50,0.22,51,0.21,52,0.012,53,0.012,88,1.931,90,0.961,123,1.513,269,3.304,271,3.56,272,3.868,279,4.305,301,2.218,325,1.999,380,1.629,421,1.922,431,4.77,432,4.77,433,4.77,591,4.185,610,4.602,649,2.65,653,3.695,654,3.36,830,5.161,831,2.972,835,4.143,979,2.972,980,6.319,981,5.554,982,5.554,983,3.46,984,4.824,985,3.46,986,3.46,987,3.46,988,2.972,989,3.46,990,3.46,991,4.824,992,4.824,993,3.46,994,3.46,995,3.46,996,4.824,997,3.46,998,3.46,999,3.46,1000,3.46,1001,4.824,1002,3.46,1003,3.46,1004,2.972,1005,4.824]],["title/modules/UserModule.html",[54,1.542,64,2.215]],["body/modules/UserModule.html",[1,3.811,2,2.914,3,0.301,4,0.272,5,0.244,7,0.361,10,0.98,23,0.019,46,0.507,50,0.301,51,0.282,52,0.015,53,0.015,54,2.82,56,2.325,57,3.096,64,4.319,65,3.537,66,2.822,67,2.634,69,3.863,70,1.254,73,3.304,74,2.47,88,1.91,103,2.749,120,2.083,150,1.358,215,4.141,216,5.106,235,4.484,341,1.426,342,2.074,354,3.537,421,2.634,1004,4.074,1006,4.074,1007,4.074,1008,4.074,1009,4.743,1010,5.945,1011,4.074,1012,4.743,1013,4.743]],["title/injectables/UserService.html",[228,1.139,235,2.215]],["body/injectables/UserService.html",[0,1.842,3,0.263,4,0.238,5,0.213,7,0.416,10,1.507,14,0.29,15,1.309,22,0.416,23,0.019,24,2.219,25,1.045,27,0.604,39,3.02,46,0.452,49,2.988,50,0.263,51,0.265,52,0.014,53,0.014,70,1.097,74,2.161,90,1.515,117,0.735,123,2.386,125,3.498,142,1.309,151,1.246,153,1.338,154,3.246,156,0.697,157,0.815,193,2.988,198,0.902,228,1.669,229,2.161,231,3.246,235,3.246,237,2.988,271,3.908,272,4.246,291,0.902,295,1.815,352,3.498,378,2.144,402,2.674,461,3.8,464,4.686,659,3.498,660,3.498,748,3.8,749,3.8,760,4.669,763,4.685,767,3.178,923,5.236,946,4.686,988,5.562,1011,3.564,1014,3.564,1015,6.096,1016,4.149,1017,4.149,1018,6.727,1019,4.149,1020,4.686,1021,4.149]],["title/coverage.html",[1022,3.886]],["body/coverage.html",[0,2.005,1,2.161,5,0.173,6,2.895,10,0.697,22,0.257,23,0.019,51,0.324,52,0.012,53,0.012,76,2.582,85,2.348,87,3.628,88,1.76,89,2.895,114,2.348,115,2.895,128,2.747,129,2.348,131,2.895,144,2.161,149,1.52,155,2.005,164,2.161,183,2.161,187,1.872,211,1.756,212,1.872,213,2.161,228,2.04,230,2.895,235,2.005,243,1.325,245,2.348,263,1.559,289,2.582,331,3.476,332,3.476,341,1.136,358,2.852,360,2.161,376,1.258,387,2.005,391,1.872,394,1.872,395,3.808,406,1.872,411,1.872,416,1.872,418,1.872,419,3.808,422,1.872,425,1.872,427,1.872,428,2.582,429,2.895,430,2.895,457,2.348,458,2.895,492,2.895,493,2.895,509,2.582,518,2.895,537,2.895,547,2.161,548,2.895,550,1.872,551,2.348,567,3.511,568,2.895,569,1.652,576,2.348,603,2.895,605,2.895,619,6.647,637,4.068,640,2.895,657,2.348,658,2.895,667,2.161,690,2.005,708,2.895,743,2.895,788,2.582,790,2.895,817,2.895,818,2.895,821,2.895,836,2.348,837,2.895,854,2.161,856,2.005,900,2.895,921,2.895,966,2.895,979,2.895,1014,2.895,1022,2.582,1023,2.895,1024,3.371,1025,3.371,1026,7.152,1027,6.258,1028,5.94,1029,7.152,1030,6.805,1031,6.258,1032,4.068,1033,2.895,1034,2.895,1035,2.895,1036,3.371,1037,5.94,1038,3.371,1039,4.068,1040,2.895,1041,3.371]],["title/dependencies.html",[57,2.331,1042,2.673]],["body/dependencies.html",[23,0.019,49,2.353,51,0.26,52,0.015,53,0.015,57,2.501,70,1.27,72,4.124,74,2.501,113,2.22,179,2.501,181,2.856,184,3.078,218,3.677,225,3.344,339,3.344,385,2.856,470,3.677,484,4.124,508,3.677,531,5.145,627,4.124,1043,4.801,1044,4.801,1045,6.53,1046,4.801,1047,4.801,1048,4.801,1049,5.991,1050,5.991,1051,6.838,1052,4.801,1053,4.801,1054,4.801,1055,4.801,1056,4.801,1057,4.801,1058,4.801,1059,4.801,1060,4.124,1061,4.801,1062,4.801,1063,4.801,1064,4.801,1065,4.801,1066,4.801,1067,4.801,1068,4.124,1069,4.801,1070,5.145,1071,4.801,1072,4.801,1073,4.801,1074,4.801,1075,4.801,1076,4.801,1077,4.801,1078,4.801,1079,4.801,1080,4.801,1081,4.801,1082,4.801,1083,4.801,1084,4.801]],["title/miscellaneous/enumerations.html",[1085,1.525,1086,3.844]],["body/miscellaneous/enumerations.html",[14,0.369,23,0.019,52,0.016,53,0.016,331,2.936,332,3.529,337,2.145,343,2.753,344,3.682,345,3.682,346,1.973,347,3.389,348,2.372,349,2.497,350,2.042,351,2.145,352,4.074,364,2.078,403,2.312,405,2.386,556,4.049,567,3.389,607,4.746,1085,2.591,1086,4.541,1087,5.287,1088,6.355,1089,4.049,1090,4.541,1091,6.814,1092,6.814]],["title/miscellaneous/functions.html",[1085,1.525,1093,3.844]],["body/miscellaneous/functions.html",[5,0.249,7,0.459,14,0.338,22,0.459,23,0.017,24,2.343,52,0.015,53,0.015,117,1.066,123,2.866,132,3.103,149,1.672,150,1.375,156,1.011,157,1.183,242,3.372,243,1.902,269,2.88,274,4.158,289,4.612,405,2.106,461,4.194,555,3.372,557,3.708,579,3.708,1034,4.158,1035,5.629,1039,4.158,1040,5.172,1060,5.172,1068,4.158,1085,2.372,1093,4.158,1094,4.841,1095,6.021,1096,4.158,1097,4.841,1098,6.021,1099,4.841,1100,4.841,1101,4.841,1102,4.841,1103,4.841,1104,4.841,1105,4.158,1106,4.841,1107,4.841,1108,4.841,1109,7.054,1110,6.858,1111,5.89,1112,4.841,1113,4.841,1114,6.021,1115,6.021,1116,4.841,1117,4.841,1118,4.841,1119,4.841,1120,4.841]],["title/index.html",[14,0.217,1121,2.673,1122,2.673]],["body/index.html",[7,0.333,13,1.719,23,0.019,52,0.014,53,0.014,95,2.803,187,2.429,243,1.719,349,1.719,461,3.932,563,3.473,607,3.046,970,3.349,1022,3.349,1023,5.37,1070,3.756,1090,3.756,1096,3.756,1123,4.373,1124,4.373,1125,5.646,1126,4.373,1127,4.373,1128,4.373,1129,4.373,1130,4.373,1131,4.373,1132,4.373,1133,4.373,1134,4.373,1135,4.373,1136,4.373,1137,7.523,1138,4.373,1139,5.646,1140,3.756,1141,6.434,1142,4.373,1143,4.373,1144,5.646,1145,3.756,1146,3.756,1147,4.373,1148,6.252,1149,5.646,1150,4.373,1151,4.373,1152,4.373,1153,4.373,1154,5.646,1155,5.646,1156,4.373,1157,4.373,1158,4.373,1159,4.373,1160,4.373,1161,4.373,1162,4.373,1163,5.646,1164,4.373,1165,4.373,1166,4.373,1167,4.373,1168,4.373,1169,4.373,1170,4.373,1171,5.875,1172,4.373,1173,5.37,1174,4.373,1175,4.373,1176,4.373,1177,4.373,1178,4.373,1179,4.373,1180,4.373,1181,4.373,1182,4.373,1183,4.373,1184,4.373,1185,3.756,1186,3.756,1187,3.932,1188,3.756,1189,4.373,1190,4.373]],["title/license.html",[1121,2.673,1122,2.673,1187,2.168]],["body/license.html",[4,0.326,11,1.258,12,1.258,17,1.258,22,0.112,23,0.01,27,0.274,31,0.763,36,0.495,52,0.006,53,0.006,67,0.814,93,0.814,101,2.63,109,0.576,110,2.126,123,0.641,168,1.258,174,2.935,187,3.229,226,3.244,231,0.872,232,1.021,243,1.484,244,1.122,259,1.122,278,1.896,341,0.351,343,0.763,350,0.471,365,1.674,378,0.576,399,2.705,401,2.06,402,2.511,405,0.471,409,1.851,412,0.678,426,2.06,438,1.724,495,1.724,538,1.122,539,2.76,542,2.461,543,1.122,574,1.122,579,1.122,607,1.724,643,1.896,646,1.258,654,1.021,720,4.086,757,4.187,763,1.724,823,1.122,970,4.632,1085,0.718,1111,1.258,1140,1.258,1146,1.258,1185,4.994,1186,4.582,1187,3.395,1188,2.76,1191,7.476,1192,6.235,1193,5.123,1194,1.465,1195,1.465,1196,1.465,1197,7.476,1198,2.475,1199,4.22,1200,6.628,1201,5.815,1202,1.465,1203,1.465,1204,4.22,1205,5.335,1206,2.475,1207,4.22,1208,5.675,1209,1.465,1210,6.722,1211,2.475,1212,4.22,1213,1.465,1214,3.776,1215,1.465,1216,1.465,1217,2.475,1218,1.465,1219,1.465,1220,1.258,1221,5.675,1222,3.776,1223,2.475,1224,1.465,1225,3.244,1226,3.776,1227,5.517,1228,5.123,1229,6.389,1230,3.213,1231,3.776,1232,2.475,1233,4.875,1234,1.465,1235,2.475,1236,1.465,1237,1.465,1238,1.465,1239,5.335,1240,4.875,1241,2.475,1242,4.875,1243,1.465,1244,1.465,1245,3.213,1246,1.465,1247,1.465,1248,1.465,1249,2.475,1250,1.465,1251,1.258,1252,1.465,1253,1.465,1254,2.475,1255,1.465,1256,4.22,1257,4.22,1258,4.22,1259,4.22,1260,3.776,1261,1.465,1262,1.465,1263,1.465,1264,1.465,1265,3.213,1266,4.579,1267,4.875,1268,2.475,1269,1.465,1270,1.465,1271,1.465,1272,1.465,1273,3.213,1274,3.213,1275,1.465,1276,1.465,1277,1.465,1278,1.465,1279,1.465,1280,2.475,1281,1.465,1282,1.465,1283,2.475,1284,6.316,1285,4.875,1286,1.465,1287,2.475,1288,1.465,1289,2.475,1290,3.213,1291,3.213,1292,4.22,1293,1.465,1294,1.465,1295,1.465,1296,1.465,1297,1.465,1298,4.22,1299,3.213,1300,3.213,1301,1.465,1302,1.465,1303,3.213,1304,1.465,1305,1.465,1306,1.465,1307,3.213,1308,1.465,1309,2.475,1310,1.465,1311,1.465,1312,1.465,1313,1.465,1314,3.213,1315,1.465,1316,3.213,1317,1.465,1318,1.465,1319,3.213,1320,2.475,1321,1.465,1322,1.465,1323,1.465,1324,1.465,1325,1.465,1326,1.465,1327,2.475,1328,1.465,1329,1.465,1330,2.475,1331,1.465,1332,2.475,1333,4.579,1334,1.465,1335,2.475,1336,2.475,1337,2.475,1338,2.475,1339,2.475,1340,3.213,1341,2.475,1342,2.475,1343,1.465,1344,1.465,1345,1.465,1346,1.465,1347,1.465,1348,3.213,1349,1.465,1350,1.465,1351,1.465,1352,5.123,1353,4.579,1354,1.465,1355,1.465,1356,2.475,1357,3.776,1358,1.465,1359,1.465,1360,1.465,1361,2.475,1362,3.776,1363,1.465,1364,3.776,1365,2.475,1366,1.465,1367,3.776,1368,1.465,1369,1.465,1370,1.465,1371,1.465,1372,1.465,1373,1.465,1374,3.213,1375,2.475,1376,1.465,1377,1.465,1378,1.465,1379,1.465,1380,1.465,1381,3.776,1382,3.213,1383,1.465,1384,1.465,1385,1.465,1386,1.465,1387,4.579,1388,1.465,1389,1.465,1390,3.776,1391,4.22,1392,1.465,1393,1.465,1394,1.465,1395,1.465,1396,3.213,1397,1.465,1398,1.465,1399,1.465,1400,2.475,1401,1.465,1402,2.475,1403,2.475,1404,1.465,1405,1.465,1406,1.465,1407,1.465,1408,1.465,1409,1.465,1410,1.465,1411,2.475,1412,2.475,1413,2.475,1414,3.776,1415,2.475,1416,2.475,1417,3.776,1418,1.465,1419,1.465,1420,2.475,1421,1.465,1422,2.475,1423,1.465,1424,3.213,1425,1.465,1426,1.465,1427,1.465,1428,1.465,1429,1.465,1430,1.465,1431,1.465,1432,2.475,1433,1.465,1434,1.465,1435,1.465,1436,1.465,1437,5.123,1438,2.475,1439,1.465,1440,1.465,1441,1.465,1442,1.465,1443,1.465,1444,1.465,1445,1.465,1446,1.465,1447,1.465,1448,1.465,1449,1.465,1450,1.465,1451,1.465,1452,3.776,1453,1.465,1454,1.465,1455,1.465,1456,3.213,1457,1.465,1458,1.465,1459,2.475,1460,1.465,1461,2.475,1462,1.465,1463,1.465,1464,1.465,1465,3.213,1466,2.475,1467,1.465,1468,1.465,1469,1.465,1470,1.465,1471,1.465,1472,2.475,1473,1.465,1474,1.465,1475,1.465,1476,1.465,1477,1.465,1478,2.475,1479,1.465,1480,1.465,1481,1.465,1482,3.776,1483,1.465,1484,1.465,1485,1.465,1486,2.475,1487,1.465,1488,1.465,1489,2.475,1490,1.465,1491,1.465,1492,1.465,1493,1.465,1494,1.465,1495,1.465,1496,1.465,1497,1.465,1498,1.465,1499,2.475,1500,2.475,1501,1.465,1502,2.475,1503,2.475,1504,1.465,1505,1.465,1506,1.465,1507,1.465,1508,1.465,1509,1.465,1510,2.475,1511,1.465,1512,1.465,1513,1.465,1514,1.465,1515,1.465,1516,1.465,1517,1.465,1518,1.465,1519,1.465,1520,1.465,1521,1.465,1522,1.465,1523,1.465,1524,1.465,1525,1.465,1526,1.465,1527,1.465,1528,1.465,1529,2.475,1530,2.475,1531,1.258,1532,1.465,1533,1.465,1534,1.465,1535,1.465,1536,1.465,1537,3.213,1538,1.465,1539,1.465,1540,4.22,1541,4.22,1542,1.465,1543,1.465,1544,1.465,1545,1.465,1546,1.465,1547,1.465,1548,1.465,1549,1.465,1550,3.213,1551,1.465,1552,3.213,1553,4.579,1554,1.465,1555,1.465,1556,1.465,1557,1.465,1558,1.465,1559,1.465,1560,3.213,1561,2.475,1562,2.475,1563,2.475,1564,1.465,1565,1.465,1566,1.465,1567,1.465,1568,2.475,1569,1.465,1570,1.465,1571,1.465,1572,1.465,1573,1.465,1574,1.465,1575,1.465,1576,2.475,1577,1.465,1578,1.465,1579,2.475,1580,2.475,1581,2.475,1582,2.475,1583,2.475,1584,2.475,1585,1.465,1586,1.465,1587,1.465,1588,1.465,1589,3.213,1590,3.213,1591,1.465,1592,1.465,1593,1.465,1594,2.475,1595,1.465,1596,3.213,1597,3.213,1598,1.465,1599,1.465,1600,1.465,1601,1.465,1602,1.465,1603,1.465,1604,1.465,1605,1.465,1606,1.465,1607,1.465,1608,1.465,1609,1.465,1610,1.465,1611,1.465,1612,1.465,1613,1.465,1614,1.465,1615,2.475,1616,2.475,1617,2.475,1618,1.465,1619,1.465,1620,1.465,1621,1.465,1622,1.465,1623,1.465,1624,1.465]],["title/modules.html",[56,2.487]],["body/modules.html",[23,0.016,52,0.016,53,0.016,55,3.901,56,2.745,60,3.111,61,3.591,62,3.591,63,3.591,64,3.332,1225,4.811,1625,7.344,1626,7.344,1627,7.344,1628,7.441,1629,5.601]],["title/overview.html",[1630,4.358]],["body/overview.html",[2,2.188,23,0.019,52,0.014,53,0.014,55,5.207,56,2.188,57,2.98,58,3.834,59,3.834,60,4.216,61,4.048,62,4.591,63,4.591,64,4.261,65,3.404,66,2.656,67,2.479,86,1.239,130,2.188,155,4.261,207,3.834,209,3.834,210,3.834,211,3.73,212,3.698,213,4.048,229,2.325,235,4.261,393,3.109,408,1.952,542,3.419,543,3.419,690,3.756,737,3.834,739,3.834,788,3.419,856,3.756,915,3.834,916,3.834,1006,3.834,1007,3.834,1008,3.834,1630,3.834,1631,5.721,1632,4.464,1633,4.464]],["title/properties.html",[15,1.074,1042,2.673]],["body/properties.html",[7,0.447,15,1.407,23,0.019,52,0.017,53,0.017,174,3.761,1187,4.086,1634,5.866,1635,5.866,1636,5.866]],["title/miscellaneous/typealiases.html",[1085,1.525,1637,4.476]],["body/miscellaneous/typealiases.html",[14,0.377,22,0.543,23,0.017,51,0.28,52,0.016,53,0.016,149,1.501,264,2.365,331,3.004,332,4.041,333,2.704,337,1.826,343,3.583,353,2.817,354,3.832,355,4.487,356,3.767,357,2.532,374,3.217,375,3.467,376,2.019,381,4.792,382,3.832,1085,2.65,1089,5.455,1638,5.408]],["title/miscellaneous/variables.html",[1085,1.525,1639,3.844]],["body/miscellaneous/variables.html",[2,2.622,13,2.103,14,0.281,22,0.488,23,0.019,24,1.719,43,1.93,49,1.974,51,0.278,52,0.013,53,0.013,76,4.098,88,1.719,120,1.958,127,1.974,135,4.098,150,0.92,156,0.898,187,2.972,264,1.762,269,3.183,271,3.43,325,2.76,331,2.237,332,3.337,374,2.397,382,2.397,383,2.806,384,2.583,385,3.808,386,4.458,387,3.183,388,2.806,389,3.851,390,2.806,391,2.972,392,2.806,402,1.974,405,2.141,476,3.46,509,4.098,513,3.46,538,3.086,555,2.806,610,5.103,647,4.596,1020,3.46,1032,3.46,1033,3.46,1085,1.974,1089,4.098,1105,3.46,1141,3.46,1145,3.46,1171,5.497,1173,3.46,1220,3.46,1251,3.46,1531,3.46,1639,3.46,1640,5.351,1641,4.029,1642,4.029,1643,4.029,1644,4.029,1645,4.029,1646,4.029,1647,4.029,1648,4.029,1649,4.029,1650,4.029,1651,4.029,1652,4.029,1653,4.029,1654,4.029,1655,4.029,1656,4.029,1657,4.029,1658,6.008,1659,4.029,1660,4.029,1661,4.029,1662,4.029,1663,4.029,1664,4.029,1665,4.029,1666,4.029,1667,4.029,1668,4.029,1669,4.029,1670,4.029,1671,4.029,1672,4.029,1673,4.029,1674,4.029,1675,4.029,1676,4.029,1677,4.029,1678,4.029,1679,4.029,1680,4.029,1681,4.029,1682,4.029,1683,4.029,1684,4.029,1685,4.029,1686,4.029,1687,4.029,1688,4.029]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":959,"title":{},"body":{"injectables/RoleService.html":{}}}],["0.0.1",{"_index":1634,"title":{},"body":{"properties.html":{}}}],["0.0.8",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1077,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1063,"title":{},"body":{"dependencies.html":{}}}],["0.2.45",{"_index":1084,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1062,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1072,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":408,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"overview.html":{}}}],["1.0",{"_index":1600,"title":{},"body":{"license.html":{}}}],["1.0.34",{"_index":1059,"title":{},"body":{"dependencies.html":{}}}],["1.1",{"_index":1613,"title":{},"body":{"license.html":{}}}],["1.2",{"_index":1188,"title":{},"body":{"index.html":{},"license.html":{}}}],["1/1",{"_index":1026,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":490,"title":{},"body":{"modules/HealthModule.html":{},"classes/PageOptionsDto.html":{}}}],["100",{"_index":619,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["10})@type(undefined)@isint()@min(1)@max(100)@isoptional",{"_index":620,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["11/11",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1243,"title":{},"body":{"license.html":{}}}],["16.0.1",{"_index":1065,"title":{},"body":{"dependencies.html":{}}}],["1})@type(undefined)@isint()@min(1)@isoptional",{"_index":616,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["2",{"_index":409,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"license.html":{}}}],["2.0",{"_index":1602,"title":{},"body":{"license.html":{}}}],["2.0.1",{"_index":1055,"title":{},"body":{"dependencies.html":{}}}],["2.1",{"_index":1596,"title":{},"body":{"license.html":{}}}],["2.1.0",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1029,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1633,"title":{},"body":{"overview.html":{}}}],["2007",{"_index":1194,"title":{},"body":{"license.html":{}}}],["2016",{"_index":1195,"title":{},"body":{"license.html":{}}}],["272",{"_index":1572,"title":{},"body":{"license.html":{}}}],["3",{"_index":542,"title":{},"body":{"classes/LoginDto.html":{},"license.html":{},"overview.html":{}}}],["3.0",{"_index":1597,"title":{},"body":{"license.html":{}}}],["3.0.2",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1067,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1030,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1631,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1073,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1027,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1588,"title":{},"body":{"license.html":{}}}],["5.0.1",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":1071,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":1053,"title":{},"body":{"dependencies.html":{}}}],["5.4.4",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":543,"title":{},"body":{"classes/LoginDto.html":{},"license.html":{},"overview.html":{}}}],["6/6",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":488,"title":{},"body":{"modules/HealthModule.html":{}}}],["7",{"_index":1632,"title":{},"body":{"overview.html":{}}}],["7.1.0",{"_index":1069,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["8.0.4",{"_index":1056,"title":{},"body":{"dependencies.html":{}}}],["8.0.6",{"_index":1054,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["8.4.6",{"_index":1052,"title":{},"body":{"dependencies.html":{}}}],["8.7.3",{"_index":1075,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1028,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1538,"title":{},"body":{"license.html":{}}}],["__dirname",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ability",{"_index":333,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["ability.can",{"_index":423,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.can(permissionaction.create",{"_index":410,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.can(permissionaction.delete",{"_index":417,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.can(permissionaction.read",{"_index":407,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.can(permissionaction.update",{"_index":415,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.factory",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ability.factory.ts",{"_index":332,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ability.factory.ts:36",{"_index":336,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["ability.factory.ts:55",{"_index":491,"title":{},"body":{"interfaces/IPolicyHandler.html":{}}}],["above",{"_index":399,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"license.html":{}}}],["absence",{"_index":1444,"title":{},"body":{"license.html":{}}}],["acc",{"_index":368,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["accept",{"_index":1420,"title":{},"body":{"license.html":{}}}],["acceptance",{"_index":1500,"title":{},"body":{"license.html":{}}}],["accepted",{"_index":1499,"title":{},"body":{"license.html":{}}}],["accepting",{"_index":1485,"title":{},"body":{"license.html":{}}}],["access",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{},"license.html":{}}}],["access_token",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["accessible",{"_index":1339,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":608,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["accordance",{"_index":1511,"title":{},"body":{"license.html":{}}}],["according",{"_index":1587,"title":{},"body":{"license.html":{}}}],["accuracy",{"_index":1446,"title":{},"body":{"license.html":{}}}],["act",{"_index":1268,"title":{},"body":{"license.html":{}}}],["action",{"_index":361,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["actions",{"_index":344,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["addition",{"_index":1331,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1381,"title":{},"body":{"license.html":{}}}],["additions",{"_index":1623,"title":{},"body":{"license.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["address.user",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["address/address.entity",{"_index":1004,"title":{},"body":{"entities/User.html":{},"modules/UserModule.html":{}}}],["addresses",{"_index":980,"title":{},"body":{"entities/User.html":{}}}],["adds",{"_index":390,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/variables.html":{}}}],["advanced",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advantage",{"_index":1558,"title":{},"body":{"license.html":{}}}],["advised",{"_index":1474,"title":{},"body":{"license.html":{}}}],["affect",{"_index":1543,"title":{},"body":{"license.html":{}}}],["affero",{"_index":1592,"title":{},"body":{"license.html":{}}}],["affirming",{"_index":1507,"title":{},"body":{"license.html":{}}}],["against",{"_index":1497,"title":{},"body":{"license.html":{}}}],["agencies",{"_index":1567,"title":{},"body":{"license.html":{}}}],["agpl",{"_index":1593,"title":{},"body":{"license.html":{}}}],["agree",{"_index":1489,"title":{},"body":{"license.html":{}}}],["agreement",{"_index":1482,"title":{},"body":{"license.html":{}}}],["agreements",{"_index":1479,"title":{},"body":{"license.html":{}}}],["aliases",{"_index":1638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["allowed",{"_index":1323,"title":{},"body":{"license.html":{}}}],["allows",{"_index":796,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["along",{"_index":1334,"title":{},"body":{"license.html":{}}}],["alter",{"_index":1383,"title":{},"body":{"license.html":{}}}],["another",{"_index":1386,"title":{},"body":{"license.html":{}}}],["api",{"_index":557,"title":{},"body":{"classes/PageDto.html":{},"classes/TokenDto.html":{},"miscellaneous/functions.html":{}}}],["apibearerauth",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["apiforbiddenresponse",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiproperty",{"_index":561,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{}}}],["apiproperty({type",{"_index":560,"title":{},"body":{"classes/PageDto.html":{}}}],["apipropertyoptional",{"_index":626,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({enum",{"_index":612,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apipropertyoptional({minimum",{"_index":615,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["apitags",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["apitags('auth",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('health",{"_index":473,"title":{},"body":{"controllers/HealthController.html":{}}}],["apitags('permission",{"_index":693,"title":{},"body":{"controllers/PermissionController.html":{}}}],["apitags('role",{"_index":880,"title":{},"body":{"controllers/RoleController.html":{}}}],["apiunauthorizedresponse",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":1139,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["appability",{"_index":357,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["appendix",{"_index":1391,"title":{},"body":{"license.html":{}}}],["applicable",{"_index":1240,"title":{},"body":{"license.html":{}}}],["application",{"_index":461,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["applications",{"_index":1130,"title":{},"body":{"index.html":{}}}],["applies",{"_index":1196,"title":{},"body":{"license.html":{}}}],["apply",{"_index":1320,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":55,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriation",{"_index":1621,"title":{},"body":{"license.html":{}}}],["approved",{"_index":1556,"title":{},"body":{"license.html":{}}}],["argument",{"_index":354,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"modules/UserModule.html":{},"miscellaneous/typealiases.html":{}}}],["arising",{"_index":1465,"title":{},"body":{"license.html":{}}}],["array",{"_index":103,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageDto.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"modules/UserModule.html":{}}}],["article",{"_index":1242,"title":{},"body":{"license.html":{}}}],["asc",{"_index":1091,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["asign",{"_index":874,"title":{},"body":{"controllers/RoleController.html":{}}}],["asserted",{"_index":1496,"title":{},"body":{"license.html":{}}}],["assign",{"_index":124,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"injectables/RoleService.html":{}}}],["assigned",{"_index":106,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{}}}],["assignpermissions",{"_index":838,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["assignpermissions(@query",{"_index":892,"title":{},"body":{"controllers/RoleController.html":{}}}],["assignpermissions(queryparams",{"_index":845,"title":{},"body":{"controllers/RoleController.html":{}}}],["assignpermissions(roleid",{"_index":925,"title":{},"body":{"injectables/RoleService.html":{}}}],["assignrolepermissionsquery",{"_index":85,"title":{"classes/AssignRolePermissionsQuery.html":{}},"body":{"classes/AssignRolePermissionsQuery.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["assignroleusers",{"_index":119,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{}}}],["assignroleusersquery",{"_index":114,"title":{"classes/AssignRoleUsersQuery.html":{}},"body":{"classes/AssignRoleUsersQuery.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["assigns",{"_index":96,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["assignusers",{"_index":839,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["assignusers(@query",{"_index":897,"title":{},"body":{"controllers/RoleController.html":{}}}],["assignusers(queryparams",{"_index":849,"title":{},"body":{"controllers/RoleController.html":{}}}],["assignusers(roleid",{"_index":928,"title":{},"body":{"injectables/RoleService.html":{}}}],["async",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["attached",{"_index":1336,"title":{},"body":{"license.html":{}}}],["attribution",{"_index":1356,"title":{},"body":{"license.html":{}}}],["auth",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":493,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:25",{"_index":505,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:9",{"_index":501,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{}}}],["auth/casl",{"_index":655,"title":{},"body":{"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"controllers/RoleController.html":{}}}],["auth/policies.guard",{"_index":686,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["auth/policies/permission.policies",{"_index":687,"title":{},"body":{"controllers/PermissionController.html":{}}}],["auth/policies/role.policies",{"_index":873,"title":{},"body":{"controllers/RoleController.html":{}}}],["auth/public.factory",{"_index":471,"title":{},"body":{"controllers/HealthController.html":{}}}],["authcontroller",{"_index":129,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":507,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":511,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["authheader.replace('bearer",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":60,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1636,"title":{},"body":{"properties.html":{}}}],["authorised",{"_index":1202,"title":{},"body":{"license.html":{}}}],["authority",{"_index":1416,"title":{},"body":{"license.html":{}}}],["authorization",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["authorship",{"_index":1410,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":155,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":1531,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1225,"title":{},"body":{"license.html":{},"modules.html":{}}}],["await",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{}}}],["back",{"_index":931,"title":{},"body":{"injectables/RoleService.html":{}}}],["backend",{"_index":1131,"title":{},"body":{"index.html":{}}}],["based",{"_index":1230,"title":{},"body":{"license.html":{}}}],["basis",{"_index":1436,"title":{},"body":{"license.html":{}}}],["bcrypt",{"_index":1060,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["becoming",{"_index":1378,"title":{},"body":{"license.html":{}}}],["behalf",{"_index":1486,"title":{},"body":{"license.html":{}}}],["being",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{}}}],["belgian",{"_index":1585,"title":{},"body":{"license.html":{}}}],["below",{"_index":1198,"title":{},"body":{"license.html":{}}}],["benefits",{"_index":1346,"title":{},"body":{"license.html":{}}}],["between",{"_index":1540,"title":{},"body":{"license.html":{}}}],["birth",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["bodies",{"_index":1565,"title":{},"body":{"license.html":{}}}],["body",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["boolean",{"_index":380,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PageMetaDto.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":1035,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":538,"title":{},"body":{"classes/LoginDto.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["bottom",{"_index":1504,"title":{},"body":{"license.html":{}}}],["bound",{"_index":9,"title":{},"body":{"entities/Address.html":{}}}],["breach",{"_index":1532,"title":{},"body":{"license.html":{}}}],["brings",{"_index":1418,"title":{},"body":{"license.html":{}}}],["browse",{"_index":1628,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1625,"title":{},"body":{"modules.html":{}}}],["bugs",{"_index":1433,"title":{},"body":{"license.html":{}}}],["build",{"_index":1166,"title":{},"body":{"index.html":{}}}],["building",{"_index":1126,"title":{},"body":{"index.html":{}}}],["business",{"_index":1578,"title":{},"body":{"license.html":{}}}],["call",{"_index":803,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["called",{"_index":364,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PermissionController.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"controllers/RoleController.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["calls",{"_index":859,"title":{},"body":{"controllers/RoleController.html":{}}}],["canactivate",{"_index":498,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["canactivate(context",{"_index":503,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["carry",{"_index":1369,"title":{},"body":{"license.html":{}}}],["case",{"_index":426,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"license.html":{}}}],["cases",{"_index":1453,"title":{},"body":{"license.html":{}}}],["casl",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["casl/ability",{"_index":339,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"dependencies.html":{}}}],["caslability",{"_index":795,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["caslabilityfactory",{"_index":211,"title":{"injectables/CaslAbilityFactory.html":{}},"body":{"modules/AuthModule.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"coverage.html":{},"overview.html":{}}}],["caslpermission",{"_index":360,"title":{"interfaces/CaslPermission.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{}}}],["caslpermissions",{"_index":370,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["catch",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["cause",{"_index":1368,"title":{},"body":{"license.html":{}}}],["caused",{"_index":1458,"title":{},"body":{"license.html":{}}}],["cc",{"_index":1611,"title":{},"body":{"license.html":{}}}],["cecill",{"_index":1601,"title":{},"body":{"license.html":{}}}],["chain",{"_index":1409,"title":{},"body":{"license.html":{}}}],["change",{"_index":1178,"title":{},"body":{"index.html":{}}}],["changes",{"_index":1622,"title":{},"body":{"license.html":{}}}],["channel",{"_index":1523,"title":{},"body":{"license.html":{}}}],["check",{"_index":377,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{}}}],["check_policies_key",{"_index":387,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["check_policy",{"_index":388,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/variables.html":{}}}],["checked",{"_index":805,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["checkpolicies",{"_index":391,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkpolicies(new",{"_index":695,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["checks",{"_index":460,"title":{},"body":{"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["choice",{"_index":1559,"title":{},"body":{"license.html":{}}}],["choose",{"_index":1480,"title":{},"body":{"license.html":{}}}],["circumstance",{"_index":1296,"title":{},"body":{"license.html":{}}}],["city",{"_index":16,"title":{},"body":{"entities/Address.html":{}}}],["claims",{"_index":1495,"title":{},"body":{"license.html":{}}}],["class",{"_index":51,"title":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["class's",{"_index":497,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["classes",{"_index":86,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"overview.html":{}}}],["classify",{"_index":1237,"title":{},"body":{"license.html":{}}}],["clause",{"_index":1374,"title":{},"body":{"license.html":{}}}],["clear",{"_index":1513,"title":{},"body":{"license.html":{}}}],["cli",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["clicking",{"_index":1502,"title":{},"body":{"license.html":{}}}],["client",{"_index":932,"title":{},"body":{"injectables/RoleService.html":{}}}],["cluster_appmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_permissionmodule",{"_index":737,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_permissionmodule_imports",{"_index":738,"title":{},"body":{"modules/PermissionModule.html":{}}}],["cluster_permissionmodule_providers",{"_index":739,"title":{},"body":{"modules/PermissionModule.html":{},"overview.html":{}}}],["cluster_rolemodule",{"_index":915,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_rolemodule_imports",{"_index":917,"title":{},"body":{"modules/RoleModule.html":{}}}],["cluster_rolemodule_providers",{"_index":916,"title":{},"body":{"modules/RoleModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":1006,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":1007,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":1008,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":970,"title":{},"body":{"classes/TokenDto.html":{},"index.html":{},"license.html":{}}}],["column",{"_index":26,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["column({default",{"_index":996,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":987,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["combination",{"_index":638,"title":{},"body":{"entities/Permission.html":{}}}],["command",{"_index":1162,"title":{},"body":{"index.html":{}}}],["commercial",{"_index":1471,"title":{},"body":{"license.html":{}}}],["commission",{"_index":1550,"title":{},"body":{"license.html":{}}}],["commons",{"_index":1608,"title":{},"body":{"license.html":{}}}],["communicate",{"_index":1299,"title":{},"body":{"license.html":{}}}],["communicated",{"_index":1224,"title":{},"body":{"license.html":{}}}],["communicates",{"_index":1260,"title":{},"body":{"license.html":{}}}],["communicating",{"_index":1274,"title":{},"body":{"license.html":{}}}],["communication",{"_index":1267,"title":{},"body":{"license.html":{}}}],["compare",{"_index":1115,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comparepasswords",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["comparepasswords(password",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{}}}],["comparepasswords(rawpassword",{"_index":1108,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compares",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/functions.html":{}}}],["compatibility",{"_index":1385,"title":{},"body":{"license.html":{}}}],["compatible",{"_index":1387,"title":{},"body":{"license.html":{}}}],["competent",{"_index":1575,"title":{},"body":{"license.html":{}}}],["compiled",{"_index":1251,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["complete",{"_index":1539,"title":{},"body":{"license.html":{}}}],["compliance",{"_index":1536,"title":{},"body":{"license.html":{}}}],["compose",{"_index":1149,"title":{},"body":{"index.html":{}}}],["computer",{"_index":1254,"title":{},"body":{"license.html":{}}}],["concerning",{"_index":1439,"title":{},"body":{"license.html":{}}}],["conclude",{"_index":1481,"title":{},"body":{"license.html":{}}}],["concluded",{"_index":1527,"title":{},"body":{"license.html":{}}}],["condition",{"_index":1451,"title":{},"body":{"license.html":{}}}],["conditions",{"_index":1382,"title":{},"body":{"license.html":{}}}],["conducts",{"_index":1577,"title":{},"body":{"license.html":{}}}],["config/postgres.config",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflict",{"_index":1393,"title":{},"body":{"license.html":{}}}],["consent",{"_index":1508,"title":{},"body":{"license.html":{}}}],["consistent",{"_index":1484,"title":{},"body":{"license.html":{}}}],["console",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["constant",{"_index":383,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":474,"title":{},"body":{"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"guards/PoliciesGuard.html":{},"classes/TokenDto.html":{}}}],["constructor(access_token",{"_index":968,"title":{},"body":{"classes/TokenDto.html":{}}}],["constructor(data",{"_index":552,"title":{},"body":{"classes/PageDto.html":{}}}],["constructor(private",{"_index":512,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(reflector",{"_index":499,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["constructor(undefined",{"_index":575,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["construed",{"_index":1547,"title":{},"body":{"license.html":{}}}],["contain",{"_index":1431,"title":{},"body":{"license.html":{}}}],["contains",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/PermissionService.html":{},"classes/RefreshTokenDto.html":{}}}],["content",{"_index":1408,"title":{},"body":{"license.html":{}}}],["context",{"_index":506,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.getclass",{"_index":516,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":515,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":808,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["continues",{"_index":1341,"title":{},"body":{"license.html":{}}}],["continuously",{"_index":1426,"title":{},"body":{"license.html":{}}}],["contributes",{"_index":1263,"title":{},"body":{"license.html":{}}}],["contributions",{"_index":1423,"title":{},"body":{"license.html":{}}}],["contributor",{"_index":1417,"title":{},"body":{"license.html":{}}}],["contributor(s",{"_index":1261,"title":{},"body":{"license.html":{}}}],["contributors",{"_index":1422,"title":{},"body":{"license.html":{}}}],["controller",{"_index":128,"title":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"classes/PageMetaDto.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"coverage.html":{}}}],["controller's",{"_index":791,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["controller('auth",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('health",{"_index":472,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller('permission",{"_index":692,"title":{},"body":{"controllers/PermissionController.html":{}}}],["controller('role",{"_index":879,"title":{},"body":{"controllers/RoleController.html":{}}}],["controllers",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"overview.html":{}}}],["convenient",{"_index":1246,"title":{},"body":{"license.html":{}}}],["converting",{"_index":721,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["converts",{"_index":908,"title":{},"body":{"classes/RoleDto.html":{},"injectables/RoleService.html":{}}}],["copies",{"_index":720,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"license.html":{}}}],["copy",{"_index":1333,"title":{},"body":{"license.html":{}}}],["copyleft",{"_index":1373,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1208,"title":{},"body":{"license.html":{}}}],["cors",{"_index":1100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["count",{"_index":583,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["countries",{"_index":1318,"title":{},"body":{"license.html":{}}}],["country",{"_index":17,"title":{},"body":{"entities/Address.html":{},"license.html":{}}}],["court",{"_index":1568,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":1022,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["covered",{"_index":1206,"title":{},"body":{"license.html":{}}}],["create",{"_index":337,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["created",{"_index":412,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"license.html":{}}}],["createdatecolumn",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["createforuser",{"_index":334,"title":{},"body":{"injectables/CaslAbilityFactory.html":{}}}],["createforuser(user",{"_index":335,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["createpermission",{"_index":661,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["createpermission(@body",{"_index":704,"title":{},"body":{"controllers/PermissionController.html":{}}}],["createpermission(permissiondto",{"_index":666,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["createpermissionpolicyhandler",{"_index":394,"title":{"classes/CreatePermissionPolicyHandler.html":{}},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"controllers/PermissionController.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"coverage.html":{}}}],["createrole",{"_index":840,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["createrole(@body",{"_index":887,"title":{},"body":{"controllers/RoleController.html":{}}}],["createrole(roledto",{"_index":853,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["createrolepolicyhandler",{"_index":418,"title":{"classes/CreateRolePolicyHandler.html":{}},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{}}}],["creates",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/functions.html":{}}}],["createuserdto",{"_index":428,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["creating",{"_index":1090,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["creation",{"_index":643,"title":{},"body":{"entities/Permission.html":{},"classes/PermissionDto.html":{},"license.html":{}}}],["creative",{"_index":1607,"title":{},"body":{"license.html":{}}}],["credentials",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["crud",{"_index":659,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["csrf",{"_index":1066,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/PermissionDto.html":{},"guards/PoliciesGuard.html":{},"classes/RoleDto.html":{}}}],["customary",{"_index":1404,"title":{},"body":{"license.html":{}}}],["damage",{"_index":1472,"title":{},"body":{"license.html":{}}}],["damages",{"_index":1456,"title":{},"body":{"license.html":{}}}],["data",{"_index":93,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/CreateUserDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PermissionDto.html":{},"classes/TokenDto.html":{},"license.html":{}}}],["database",{"_index":13,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["databse",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":31,"title":{},"body":{"entities/Address.html":{},"classes/CreateUserDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"entities/User.html":{},"license.html":{}}}],["datecreated",{"_index":18,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"entities/User.html":{}}}],["dateofbirth",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["dates",{"_index":822,"title":{},"body":{"entities/Role.html":{}}}],["dateupdated",{"_index":19,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"entities/User.html":{}}}],["db",{"_index":476,"title":{},"body":{"controllers/HealthController.html":{},"miscellaneous/variables.html":{}}}],["dbpermissions",{"_index":366,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["dbpermissions.map((p",{"_index":371,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["decorated",{"_index":386,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/variables.html":{}}}],["decorator",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PageDto.html":{}}}],["decorators",{"_index":25,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["default",{"_index":610,"title":{},"body":{"classes/PageOptionsDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defects",{"_index":1432,"title":{},"body":{"license.html":{}}}],["defend",{"_index":1491,"title":{},"body":{"license.html":{}}}],["define",{"_index":1234,"title":{},"body":{"license.html":{}}}],["defined",{"_index":27,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"injectables/UserService.html":{},"license.html":{}}}],["defines",{"_index":91,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreateUserDto.html":{},"classes/PageOptionsDto.html":{}}}],["defining",{"_index":343,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["definitions",{"_index":1219,"title":{},"body":{"license.html":{}}}],["delete",{"_index":351,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["delete(':id",{"_index":701,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["delete(':id')@version('1')@checkpolicies(new",{"_index":672,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["deleted",{"_index":753,"title":{},"body":{"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["deletepermission",{"_index":662,"title":{},"body":{"controllers/PermissionController.html":{}}}],["deletepermission(@param('id",{"_index":702,"title":{},"body":{"controllers/PermissionController.html":{}}}],["deletepermission(id",{"_index":671,"title":{},"body":{"controllers/PermissionController.html":{}}}],["deletepermissionbyid",{"_index":745,"title":{},"body":{"injectables/PermissionService.html":{}}}],["deletepermissionbyid(id",{"_index":750,"title":{},"body":{"injectables/PermissionService.html":{}}}],["deletepermissionpolicyhandler",{"_index":416,"title":{"classes/DeletePermissionPolicyHandler.html":{}},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"controllers/PermissionController.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"coverage.html":{}}}],["deleterole",{"_index":841,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(@param('id",{"_index":885,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterole(id",{"_index":857,"title":{},"body":{"controllers/RoleController.html":{}}}],["deleterolebyid",{"_index":860,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["deleterolebyid(id",{"_index":933,"title":{},"body":{"injectables/RoleService.html":{}}}],["deleterolepolicyhandler",{"_index":427,"title":{"classes/DeleteRolePolicyHandler.html":{}},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{}}}],["deletes",{"_index":752,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["dependence",{"_index":1236,"title":{},"body":{"license.html":{}}}],["dependencies",{"_index":57,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["depending",{"_index":1176,"title":{},"body":{"index.html":{}}}],["deprive",{"_index":1345,"title":{},"body":{"license.html":{}}}],["derivative",{"_index":1227,"title":{},"body":{"license.html":{}}}],["desc",{"_index":1092,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["describing",{"_index":1405,"title":{},"body":{"license.html":{}}}],["description",{"_index":7,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":1190,"title":{},"body":{"index.html":{}}}],["determined",{"_index":1238,"title":{},"body":{"license.html":{}}}],["dev",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dev.yml",{"_index":1151,"title":{},"body":{"index.html":{}}}],["development",{"_index":1140,"title":{},"body":{"index.html":{},"license.html":{}}}],["direct",{"_index":1462,"title":{},"body":{"license.html":{}}}],["directly",{"_index":1457,"title":{},"body":{"license.html":{}}}],["disable",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["disclaimer",{"_index":1364,"title":{},"body":{"license.html":{}}}],["display",{"_index":1301,"title":{},"body":{"license.html":{}}}],["displaying",{"_index":1506,"title":{},"body":{"license.html":{}}}],["disposal",{"_index":1282,"title":{},"body":{"license.html":{}}}],["dist",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/src/**/*.entity.js",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/src/migrations/*.js",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/src/migrations/seed/*.js",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1303,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1223,"title":{},"body":{"license.html":{}}}],["distributes",{"_index":1259,"title":{},"body":{"license.html":{}}}],["distributing",{"_index":1273,"title":{},"body":{"license.html":{}}}],["distribution",{"_index":1266,"title":{},"body":{"license.html":{}}}],["docker",{"_index":1148,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1023,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation:buildor",{"_index":1167,"title":{},"body":{"index.html":{}}}],["documentation:serveafter",{"_index":1161,"title":{},"body":{"index.html":{}}}],["doesn't",{"_index":936,"title":{},"body":{"injectables/RoleService.html":{}}}],["done",{"_index":1375,"title":{},"body":{"license.html":{}}}],["dotenv",{"_index":1064,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":1571,"title":{},"body":{"license.html":{}}}],["download",{"_index":1520,"title":{},"body":{"license.html":{}}}],["dto",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["dto.frommodel(permission",{"_index":778,"title":{},"body":{"injectables/PermissionService.html":{}}}],["dto.frommodel(result",{"_index":780,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["dto.frommodel(role",{"_index":951,"title":{},"body":{"injectables/RoleService.html":{}}}],["duration",{"_index":1294,"title":{},"body":{"license.html":{}}}],["e2e",{"_index":1156,"title":{},"body":{"index.html":{}}}],["each",{"_index":101,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"guards/PoliciesGuard.html":{},"license.html":{}}}],["eager",{"_index":830,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["easily",{"_index":1337,"title":{},"body":{"license.html":{}}}],["eclipse",{"_index":1598,"title":{},"body":{"license.html":{}}}],["economic",{"_index":1325,"title":{},"body":{"license.html":{}}}],["effective",{"_index":1324,"title":{},"body":{"license.html":{}}}],["efficient",{"_index":1127,"title":{},"body":{"index.html":{}}}],["electronic",{"_index":1518,"title":{},"body":{"license.html":{}}}],["email",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["emailorusername",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["empty",{"_index":1172,"title":{},"body":{"index.html":{}}}],["enables",{"_index":1098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encode",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["encoded",{"_index":1120,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodepassword",{"_index":1040,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodepassword(rawpassword",{"_index":1116,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodes",{"_index":1117,"title":{},"body":{"miscellaneous/functions.html":{}}}],["endpoint",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{}}}],["enforceability",{"_index":1545,"title":{},"body":{"license.html":{}}}],["enforceable",{"_index":1549,"title":{},"body":{"license.html":{}}}],["entered",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"injectables/PermissionService.html":{},"entities/Role.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities.map((permission",{"_index":777,"title":{},"body":{"injectables/PermissionService.html":{}}}],["entities.map((role",{"_index":950,"title":{},"body":{"injectables/RoleService.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entity.ts",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enum",{"_index":347,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1086,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["enviroment",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["enviroment.access_token_expiration_time",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["enviroment.access_token_secret",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["enviroment.app_url",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{}}}],["enviroment.postgres_database",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enviroment.postgres_host",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enviroment.postgres_password",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enviroment.postgres_port",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enviroment.postgres_username",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enviroment.refresh_token_expiration_time",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["enviroment.refresh_token_secret",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["environment",{"_index":1107,"title":{},"body":{"miscellaneous/functions.html":{}}}],["epl",{"_index":1599,"title":{},"body":{"license.html":{}}}],["error",{"_index":527,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RoleService.html":{}}}],["errors",{"_index":1445,"title":{},"body":{"license.html":{}}}],["essential",{"_index":1280,"title":{},"body":{"license.html":{}}}],["eupl",{"_index":1193,"title":{},"body":{"license.html":{}}}],["euplor",{"_index":1215,"title":{},"body":{"license.html":{}}}],["european",{"_index":1185,"title":{},"body":{"index.html":{},"license.html":{}}}],["even",{"_index":1473,"title":{},"body":{"license.html":{}}}],["event",{"_index":1460,"title":{},"body":{"license.html":{}}}],["example",{"_index":401,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"license.html":{}}}],["except",{"_index":1402,"title":{},"body":{"license.html":{}}}],["exception",{"_index":1347,"title":{},"body":{"license.html":{}}}],["exchange",{"_index":971,"title":{},"body":{"classes/TokenDto.html":{}}}],["exclusive",{"_index":1292,"title":{},"body":{"license.html":{}}}],["execpolicyhandler",{"_index":793,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["execpolicyhandler(handler",{"_index":801,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["executable",{"_index":1226,"title":{},"body":{"license.html":{}}}],["execute",{"_index":804,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["executes",{"_index":792,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["executioncontext",{"_index":504,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["exercise",{"_index":1322,"title":{},"body":{"license.html":{}}}],["exercised",{"_index":1308,"title":{},"body":{"license.html":{}}}],["exercising",{"_index":1517,"title":{},"body":{"license.html":{}}}],["exhaustion",{"_index":1350,"title":{},"body":{"license.html":{}}}],["exist",{"_index":937,"title":{},"body":{"injectables/RoleService.html":{}}}],["existing",{"_index":585,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["exists",{"_index":935,"title":{},"body":{"injectables/RoleService.html":{}}}],["expiresin",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":50,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":1050,"title":{},"body":{"dependencies.html":{}}}],["expressed",{"_index":1216,"title":{},"body":{"license.html":{}}}],["expressly",{"_index":1377,"title":{},"body":{"license.html":{}}}],["extends",{"_index":510,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extent",{"_index":1204,"title":{},"body":{"license.html":{}}}],["extractjwt",{"_index":530,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":534,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["f",{"_index":1150,"title":{},"body":{"index.html":{}}}],["fact",{"_index":1498,"title":{},"body":{"license.html":{}}}],["factory",{"_index":797,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["failure",{"_index":1469,"title":{},"body":{"license.html":{}}}],["false",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["far",{"_index":1316,"title":{},"body":{"license.html":{}}}],["fast",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["fastify",{"_index":1051,"title":{},"body":{"dependencies.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["finally",{"_index":1103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["find",{"_index":760,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["findallpermissions",{"_index":663,"title":{},"body":{"controllers/PermissionController.html":{}}}],["findallpermissions(@query",{"_index":696,"title":{},"body":{"controllers/PermissionController.html":{}}}],["findallpermissions(pageoptionsdto",{"_index":675,"title":{},"body":{"controllers/PermissionController.html":{}}}],["findallpermissionspageable",{"_index":746,"title":{},"body":{"injectables/PermissionService.html":{}}}],["findallpermissionspageable(pageoptionsdto",{"_index":755,"title":{},"body":{"injectables/PermissionService.html":{}}}],["findallroles",{"_index":842,"title":{},"body":{"controllers/RoleController.html":{}}}],["findallroles(@query",{"_index":881,"title":{},"body":{"controllers/RoleController.html":{}}}],["findallroles(pageoptionsdto",{"_index":861,"title":{},"body":{"controllers/RoleController.html":{}}}],["findallrolespageable",{"_index":924,"title":{},"body":{"injectables/RoleService.html":{}}}],["findallrolespageable(pageoptionsdto",{"_index":939,"title":{},"body":{"injectables/RoleService.html":{}}}],["findbyusernameoremail",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyusernameoremail(emailorusername",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["findpermissionbyid",{"_index":664,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["findpermissionbyid(@param('id",{"_index":699,"title":{},"body":{"controllers/PermissionController.html":{}}}],["findpermissionbyid(id",{"_index":678,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["findrolebyid",{"_index":843,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["findrolebyid(@param('id",{"_index":883,"title":{},"body":{"controllers/RoleController.html":{}}}],["findrolebyid(id",{"_index":866,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["finds",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["finished",{"_index":1429,"title":{},"body":{"license.html":{}}}],["first",{"_index":424,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["firstname",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["fitness",{"_index":1441,"title":{},"body":{"license.html":{}}}],["folder",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["following",{"_index":757,"title":{},"body":{"injectables/PermissionService.html":{},"license.html":{}}}],["forbiddenexception",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('invalid",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["form",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"classes/PermissionDto.html":{},"license.html":{}}}],["formats",{"_index":1311,"title":{},"body":{"license.html":{}}}],["found",{"_index":781,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["framework",{"_index":1125,"title":{},"body":{"index.html":{}}}],["free",{"_index":1290,"title":{},"body":{"license.html":{}}}],["freely",{"_index":1338,"title":{},"body":{"license.html":{}}}],["frommodel",{"_index":710,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["frommodel(permission",{"_index":718,"title":{},"body":{"classes/PermissionDto.html":{}}}],["frommodel(role",{"_index":905,"title":{},"body":{"classes/RoleDto.html":{}}}],["full",{"_index":1535,"title":{},"body":{"license.html":{}}}],["function",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionalities",{"_index":1281,"title":{},"body":{"license.html":{}}}],["functioning",{"_index":1574,"title":{},"body":{"license.html":{}}}],["functions",{"_index":1093,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["general",{"_index":1590,"title":{},"body":{"license.html":{}}}],["generally",{"_index":1250,"title":{},"body":{"license.html":{}}}],["generatenewtoken",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["generatenewtoken(user",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["generates",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["generic",{"_index":549,"title":{},"body":{"classes/PageDto.html":{}}}],["get(':id",{"_index":698,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["get(':id')@version('1')@checkpolicies(new",{"_index":679,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["get('me",{"_index":203,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('me')@version('1')@apibearerauth()@useguards(jwtauthguard",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@healthcheck",{"_index":462,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@version('1')@checkpolicies(new",{"_index":676,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["getcurrentuser",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getcurrentuser(authheader",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["gets",{"_index":799,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["getskip",{"_index":622,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["getting",{"_index":1121,"title":{"index.html":{},"license.html":{}},"body":{}}],["given",{"_index":869,"title":{},"body":{"controllers/RoleController.html":{}}}],["giving",{"_index":1270,"title":{},"body":{"license.html":{}}}],["global",{"_index":1097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gnu",{"_index":1589,"title":{},"body":{"license.html":{}}}],["going",{"_index":749,"title":{},"body":{"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["good",{"_index":400,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["goodwill",{"_index":1467,"title":{},"body":{"license.html":{}}}],["governed",{"_index":1579,"title":{},"body":{"license.html":{}}}],["gpl",{"_index":1591,"title":{},"body":{"license.html":{}}}],["grant",{"_index":1353,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1285,"title":{},"body":{"license.html":{}}}],["grants",{"_index":1287,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1629,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":788,"title":{"guards/PoliciesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":789,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handle",{"_index":397,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["handle(ability",{"_index":379,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["handler",{"_index":375,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{}}}],["handler(ability",{"_index":813,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handler.handle(ability",{"_index":814,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["handlers",{"_index":389,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/variables.html":{}}}],["handles",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["harmless",{"_index":1493,"title":{},"body":{"license.html":{}}}],["hash",{"_index":1109,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hasnextpage",{"_index":571,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["haspreviouspage",{"_index":572,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["he/she",{"_index":1367,"title":{},"body":{"license.html":{}}}],["header",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["health",{"_index":459,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":482,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":466,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":467,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":457,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":61,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"modules.html":{},"overview.html":{}}}],["held",{"_index":1329,"title":{},"body":{"license.html":{}}}],["helmet",{"_index":1068,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{}}}],["here",{"_index":1326,"title":{},"body":{"license.html":{}}}],["hereby",{"_index":1286,"title":{},"body":{"license.html":{}}}],["hereunder",{"_index":1412,"title":{},"body":{"license.html":{}}}],["him/her",{"_index":1414,"title":{},"body":{"license.html":{}}}],["his/her",{"_index":1394,"title":{},"body":{"license.html":{}}}],["hold",{"_index":1492,"title":{},"body":{"license.html":{}}}],["holder",{"_index":1209,"title":{},"body":{"license.html":{}}}],["holds",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Permission.html":{},"classes/TokenDto.html":{}}}],["host",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http",{"_index":475,"title":{},"body":{"controllers/HealthController.html":{}}}],["http://localhost:3000:/api/docs",{"_index":1169,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":1164,"title":{},"body":{"index.html":{}}}],["httphealthindicator",{"_index":468,"title":{},"body":{"controllers/HealthController.html":{}}}],["httpmodule",{"_index":483,"title":{},"body":{"modules/HealthModule.html":{}}}],["human",{"_index":1244,"title":{},"body":{"license.html":{}}}],["icon",{"_index":1503,"title":{},"body":{"license.html":{}}}],["id",{"_index":20,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"injectables/JwtStrategy.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"entities/User.html":{}}}],["identical",{"_index":1557,"title":{},"body":{"license.html":{}}}],["identifier",{"_index":1024,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":852,"title":{},"body":{"controllers/RoleController.html":{}}}],["ignore",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["ignoreexpiration",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["immediately",{"_index":1213,"title":{},"body":{"license.html":{}}}],["implements",{"_index":396,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["import",{"_index":46,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["impose",{"_index":1380,"title":{},"body":{"license.html":{}}}],["imposed",{"_index":1355,"title":{},"body":{"license.html":{}}}],["improved",{"_index":1427,"title":{},"body":{"license.html":{}}}],["include",{"_index":1366,"title":{},"body":{"license.html":{}}}],["including",{"_index":1300,"title":{},"body":{"license.html":{}}}],["incurred",{"_index":1494,"title":{},"body":{"license.html":{}}}],["indemnify",{"_index":1490,"title":{},"body":{"license.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index()@column({unique",{"_index":827,"title":{},"body":{"entities/Role.html":{}}}],["indicate",{"_index":1397,"title":{},"body":{"license.html":{}}}],["indicates",{"_index":1335,"title":{},"body":{"license.html":{}}}],["indirect",{"_index":1463,"title":{},"body":{"license.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["information",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/Permission.html":{},"classes/TokenDto.html":{},"license.html":{}}}],["infringement",{"_index":1447,"title":{},"body":{"license.html":{}}}],["inherent",{"_index":1434,"title":{},"body":{"license.html":{}}}],["initial",{"_index":973,"title":{},"body":{"classes/TokenDto.html":{}}}],["inject",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["injectable",{"_index":228,"title":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectrepository",{"_index":767,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["injectrepository(permission",{"_index":764,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["injectrepository(role",{"_index":944,"title":{},"body":{"injectables/RoleService.html":{}}}],["injectrepository(user",{"_index":946,"title":{},"body":{"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":12,"title":{},"body":{"entities/Address.html":{},"license.html":{}}}],["installation",{"_index":1136,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1138,"title":{},"body":{"index.html":{}}}],["instance",{"_index":338,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["institutions",{"_index":1564,"title":{},"body":{"license.html":{}}}],["intact",{"_index":1359,"title":{},"body":{"license.html":{}}}],["intellectual",{"_index":1448,"title":{},"body":{"license.html":{}}}],["intended",{"_index":1344,"title":{},"body":{"license.html":{}}}],["interface",{"_index":358,"title":{"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"interfaces/PageMetaDtoParameters.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["interfaces",{"_index":393,"title":{},"body":{"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"interfaces/PageMetaDtoParameters.html":{},"overview.html":{}}}],["interpretation",{"_index":1563,"title":{},"body":{"license.html":{}}}],["interpreted",{"_index":1253,"title":{},"body":{"license.html":{}}}],["invalid",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"license.html":{}}}],["invented",{"_index":1315,"title":{},"body":{"license.html":{}}}],["invoice",{"_index":362,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["ipolicyhandler",{"_index":376,"title":{"interfaces/IPolicyHandler.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irrevocable",{"_index":1514,"title":{},"body":{"license.html":{}}}],["irrevocably",{"_index":1516,"title":{},"body":{"license.html":{}}}],["is_public_key",{"_index":509,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isaccountactivated",{"_index":981,"title":{},"body":{"entities/User.html":{}}}],["isarray",{"_index":562,"title":{},"body":{"classes/PageDto.html":{}}}],["isarray()@apiproperty({isarray",{"_index":558,"title":{},"body":{"classes/PageDto.html":{}}}],["isdate",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isdate()@validateif((_object",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemailverified",{"_index":982,"title":{},"body":{"entities/User.html":{}}}],["isenum",{"_index":628,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isenum(order",{"_index":634,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isglobal",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":629,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["isnotempty",{"_index":111,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PermissionDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{}}}],["isnotempty()@isnumber",{"_index":100,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{}}}],["isnotempty()@isstring",{"_index":716,"title":{},"body":{"classes/PermissionDto.html":{}}}],["isnotempty()@minlength(3",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isnotempty()@minlength(6",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["isnumber",{"_index":112,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{}}}],["isnumber()@isnotempty",{"_index":107,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{}}}],["isoptional",{"_index":630,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["ispublic",{"_index":513,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":725,"title":{},"body":{"classes/PermissionDto.html":{}}}],["issuer",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["istanbul",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["it's",{"_index":90,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"controllers/HealthController.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["it.permissions",{"_index":369,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["item",{"_index":582,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["itemcount",{"_index":570,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["items",{"_index":584,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{}}}],["jointable",{"_index":835,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["js",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jurisdiction",{"_index":1560,"title":{},"body":{"license.html":{}}}],["justice",{"_index":1569,"title":{},"body":{"license.html":{}}}],["jwt",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.sign",{"_index":528,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt.strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":183,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":533,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":213,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keep",{"_index":1358,"title":{},"body":{"license.html":{}}}],["key",{"_index":647,"title":{},"body":{"entities/Permission.html":{},"miscellaneous/variables.html":{}}}],["kind",{"_index":1438,"title":{},"body":{"license.html":{}}}],["known",{"_index":1313,"title":{},"body":{"license.html":{}}}],["laid",{"_index":1570,"title":{},"body":{"license.html":{}}}],["last",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":1314,"title":{},"body":{"license.html":{}}}],["law",{"_index":1239,"title":{},"body":{"license.html":{}}}],["laws",{"_index":1478,"title":{},"body":{"license.html":{}}}],["legal",{"_index":1257,"title":{},"body":{"license.html":{}}}],["lend",{"_index":1304,"title":{},"body":{"license.html":{}}}],["lending",{"_index":1271,"title":{},"body":{"license.html":{}}}],["length",{"_index":541,"title":{},"body":{"classes/LoginDto.html":{}}}],["lesser",{"_index":1605,"title":{},"body":{"license.html":{}}}],["lgpl",{"_index":1606,"title":{},"body":{"license.html":{}}}],["liability",{"_index":1452,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1461,"title":{},"body":{"license.html":{}}}],["licence",{"_index":1191,"title":{},"body":{"license.html":{}}}],["licences",{"_index":1390,"title":{},"body":{"license.html":{}}}],["license",{"_index":1187,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1214,"title":{},"body":{"license.html":{}}}],["licensee",{"_index":1229,"title":{},"body":{"license.html":{}}}],["licensee's",{"_index":1392,"title":{},"body":{"license.html":{}}}],["licensor",{"_index":1210,"title":{},"body":{"license.html":{}}}],["liliq",{"_index":1616,"title":{},"body":{"license.html":{}}}],["limit",{"_index":489,"title":{},"body":{"modules/HealthModule.html":{}}}],["limitation",{"_index":1348,"title":{},"body":{"license.html":{}}}],["limitations",{"_index":1342,"title":{},"body":{"license.html":{}}}],["linguistic",{"_index":1552,"title":{},"body":{"license.html":{}}}],["list",{"_index":127,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageOptionsDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{},"miscellaneous/variables.html":{}}}],["listed",{"_index":1327,"title":{},"body":{"license.html":{}}}],["litigation",{"_index":1561,"title":{},"body":{"license.html":{}}}],["local",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["localhost",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["locally",{"_index":1160,"title":{},"body":{"index.html":{}}}],["location",{"_index":1522,"title":{},"body":{"license.html":{}}}],["logger",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logging",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["login(@body",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":144,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.usernameoremail",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":1340,"title":{},"body":{"license.html":{}}}],["look",{"_index":1165,"title":{},"body":{"index.html":{}}}],["loss",{"_index":1466,"title":{},"body":{"license.html":{}}}],["machine",{"_index":1332,"title":{},"body":{"license.html":{}}}],["made",{"_index":670,"title":{},"body":{"controllers/PermissionController.html":{}}}],["make",{"_index":1298,"title":{},"body":{"license.html":{}}}],["makes",{"_index":1264,"title":{},"body":{"license.html":{}}}],["making",{"_index":1276,"title":{},"body":{"license.html":{}}}],["malfunction",{"_index":1470,"title":{},"body":{"license.html":{}}}],["manage",{"_index":352,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["manually",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["many",{"_index":591,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["manytomany",{"_index":653,"title":{},"body":{"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["manytomany(undefined",{"_index":649,"title":{},"body":{"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["manytoone",{"_index":48,"title":{},"body":{"entities/Address.html":{}}}],["manytoone(undefined",{"_index":40,"title":{},"body":{"entities/Address.html":{}}}],["maps",{"_index":709,"title":{},"body":{"classes/PermissionDto.html":{}}}],["marks",{"_index":1401,"title":{},"body":{"license.html":{}}}],["matching",{"_index":53,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1464,"title":{},"body":{"license.html":{}}}],["math.ceil(this.itemcount",{"_index":600,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["max",{"_index":631,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["max(100",{"_index":636,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["maximum",{"_index":618,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["me(@request",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["me(request",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["meaning",{"_index":1220,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":1217,"title":{},"body":{"license.html":{}}}],["meant",{"_index":1252,"title":{},"body":{"license.html":{}}}],["media",{"_index":1309,"title":{},"body":{"license.html":{}}}],["member",{"_index":1580,"title":{},"body":{"license.html":{}}}],["memory",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["mentioned",{"_index":1241,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1440,"title":{},"body":{"license.html":{}}}],["meta",{"_index":551,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["meta.dto",{"_index":564,"title":{},"body":{"classes/PageDto.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["meta.dto.ts",{"_index":568,"title":{},"body":{"classes/PageMetaDto.html":{},"coverage.html":{}}}],["meta.dto.ts:12",{"_index":590,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:16",{"_index":581,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:20",{"_index":587,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:24",{"_index":580,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:28",{"_index":577,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["meta.dto.ts:8",{"_index":586,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["metadata",{"_index":385,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":120,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"controllers/PermissionController.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"modules/UserModule.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{}}}],["migration",{"_index":1173,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migration:create",{"_index":1174,"title":{},"body":{"index.html":{}}}],["migration:generate",{"_index":1179,"title":{},"body":{"index.html":{}}}],["migration:migratereverting",{"_index":1183,"title":{},"body":{"index.html":{}}}],["migration:revertlicense",{"_index":1184,"title":{},"body":{"index.html":{}}}],["migration:showrunning",{"_index":1182,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":1171,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["migrations_typeorm",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsdir",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":632,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["min(1",{"_index":635,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["minimum",{"_index":540,"title":{},"body":{"classes/LoginDto.html":{},"classes/PageOptionsDto.html":{}}}],["minlength",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(3",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["minlength(6",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{}}}],["miscellaneous",{"_index":1085,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misconduct",{"_index":1455,"title":{},"body":{"license.html":{}}}],["mode",{"_index":1144,"title":{},"body":{"index.html":{}}}],["model",{"_index":8,"title":{},"body":{"entities/Address.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["modification",{"_index":1235,"title":{},"body":{"license.html":{}}}],["modifications",{"_index":1232,"title":{},"body":{"license.html":{}}}],["modified",{"_index":1372,"title":{},"body":{"license.html":{}}}],["modifies",{"_index":1262,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1249,"title":{},"body":{"license.html":{}}}],["module",{"_index":54,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":56,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/HealthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moral",{"_index":1319,"title":{},"body":{"license.html":{}}}],["more",{"_index":1189,"title":{},"body":{"index.html":{}}}],["mozilla",{"_index":1603,"title":{},"body":{"license.html":{}}}],["mpl",{"_index":1604,"title":{},"body":{"license.html":{}}}],["name",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name`generating",{"_index":1175,"title":{},"body":{"index.html":{}}}],["name`showing",{"_index":1180,"title":{},"body":{"index.html":{}}}],["names",{"_index":1400,"title":{},"body":{"license.html":{}}}],["natural",{"_index":1256,"title":{},"body":{"license.html":{}}}],["necessary",{"_index":1330,"title":{},"body":{"license.html":{}}}],["nest",{"_index":1096,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["nestjs/axios",{"_index":484,"title":{},"body":{"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":508,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":470,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["next",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageMetaDto.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["node.js",{"_index":1124,"title":{},"body":{"index.html":{}}}],["non",{"_index":1291,"title":{},"body":{"license.html":{}}}],["notfoundexception",{"_index":766,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["nothing",{"_index":1343,"title":{},"body":{"license.html":{}}}],["notice",{"_index":1212,"title":{},"body":{"license.html":{}}}],["notices",{"_index":1362,"title":{},"body":{"license.html":{}}}],["now",{"_index":1312,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1137,"title":{},"body":{"index.html":{}}}],["null",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/PermissionDto.html":{},"classes/RoleDto.html":{},"entities/User.html":{}}}],["nullable",{"_index":42,"title":{},"body":{"entities/Address.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["number",{"_index":36,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"license.html":{}}}],["numbers",{"_index":104,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{}}}],["numerous",{"_index":1428,"title":{},"body":{"license.html":{}}}],["object",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{}}}],["objects",{"_index":758,"title":{},"body":{"injectables/PermissionService.html":{},"controllers/RoleController.html":{}}}],["obligations",{"_index":1352,"title":{},"body":{"license.html":{}}}],["offer",{"_index":1379,"title":{},"body":{"license.html":{}}}],["offering",{"_index":1519,"title":{},"body":{"license.html":{}}}],["office",{"_index":1584,"title":{},"body":{"license.html":{}}}],["offices",{"_index":1566,"title":{},"body":{"license.html":{}}}],["offline",{"_index":1278,"title":{},"body":{"license.html":{}}}],["one",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["onetomany",{"_index":1005,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":983,"title":{},"body":{"entities/User.html":{}}}],["online",{"_index":1277,"title":{},"body":{"license.html":{}}}],["open",{"_index":1594,"title":{},"body":{"license.html":{}}}],["operation",{"_index":754,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["operations",{"_index":660,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["optional",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["options.dto",{"_index":604,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["options.dto.ts",{"_index":605,"title":{},"body":{"classes/PageOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:13",{"_index":614,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:24",{"_index":617,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:37",{"_index":621,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["options.dto.ts:43",{"_index":623,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order",{"_index":607,"title":{},"body":{"classes/PageOptionsDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["order.asc",{"_index":611,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order.model",{"_index":633,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["order.model.ts",{"_index":1088,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["orderby('name",{"_index":949,"title":{},"body":{"injectables/RoleService.html":{}}}],["orderby('resource",{"_index":771,"title":{},"body":{"injectables/PermissionService.html":{}}}],["origin",{"_index":1406,"title":{},"body":{"license.html":{}}}],["original",{"_index":1221,"title":{},"body":{"license.html":{}}}],["osl",{"_index":1595,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":495,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/RoleService.html":{},"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1630,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":1413,"title":{},"body":{"license.html":{}}}],["owners",{"_index":1349,"title":{},"body":{"license.html":{}}}],["p.action",{"_index":372,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["p.resource",{"_index":373,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["package",{"_index":1042,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":563,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"index.html":{}}}],["pageable",{"_index":865,"title":{},"body":{"controllers/RoleController.html":{}}}],["pagecount",{"_index":573,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pagedto",{"_index":547,"title":{"classes/PageDto.html":{}},"body":{"classes/PageDto.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["pagemetadto",{"_index":550,"title":{"classes/PageMetaDto.html":{}},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["pagemetadtoparameters",{"_index":576,"title":{"interfaces/PageMetaDtoParameters.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["pageoptionsdto",{"_index":569,"title":{"classes/PageOptionsDto.html":{}},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["pageoptionsdto.order",{"_index":772,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["pageoptionsdto.page",{"_index":595,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pageoptionsdto.take",{"_index":597,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["pages",{"_index":589,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["paginate",{"_index":606,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["pagination/page",{"_index":688,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["pagination/page.dto",{"_index":768,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["param",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{}}}],["parameter",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["parameters",{"_index":117,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{}}}],["parameters.interface",{"_index":593,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["parameters.interface.ts",{"_index":603,"title":{},"body":{"interfaces/PageMetaDtoParameters.html":{},"coverage.html":{}}}],["part",{"_index":1450,"title":{},"body":{"license.html":{}}}],["particular",{"_index":1442,"title":{},"body":{"license.html":{}}}],["parties",{"_index":1541,"title":{},"body":{"license.html":{}}}],["passed",{"_index":118,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["passes",{"_index":863,"title":{},"body":{"controllers/RoleController.html":{}}}],["passport",{"_index":531,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":532,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["patent",{"_index":1360,"title":{},"body":{"license.html":{}}}],["patents",{"_index":1328,"title":{},"body":{"license.html":{}}}],["payload",{"_index":526,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.user",{"_index":536,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pending",{"_index":1181,"title":{},"body":{"index.html":{}}}],["people",{"_index":1247,"title":{},"body":{"license.html":{}}}],["per",{"_index":592,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["perform",{"_index":378,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{},"license.html":{}}}],["performed",{"_index":345,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["permission",{"_index":341,"title":{"entities/Permission.html":{}},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"entities/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"modules/UserModule.html":{},"coverage.html":{},"license.html":{}}}],["permission.action",{"_index":729,"title":{},"body":{"classes/PermissionDto.html":{}}}],["permission.controller",{"_index":741,"title":{},"body":{"modules/PermissionModule.html":{}}}],["permission.datecreated",{"_index":734,"title":{},"body":{"classes/PermissionDto.html":{}}}],["permission.dateupdated",{"_index":736,"title":{},"body":{"classes/PermissionDto.html":{}}}],["permission.dto",{"_index":689,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["permission.entity",{"_index":726,"title":{},"body":{"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{}}}],["permission.id",{"_index":727,"title":{},"body":{"classes/PermissionDto.html":{}}}],["permission.resource",{"_index":731,"title":{},"body":{"classes/PermissionDto.html":{}}}],["permission.service",{"_index":691,"title":{},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{}}}],["permission/:id",{"_index":674,"title":{},"body":{"controllers/PermissionController.html":{}}}],["permission/permission.entity",{"_index":342,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"entities/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"modules/UserModule.html":{}}}],["permission/permission.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["permissionaction",{"_index":348,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["permissioncontroller",{"_index":657,"title":{"controllers/PermissionController.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"coverage.html":{}}}],["permissiondto",{"_index":667,"title":{"classes/PermissionDto.html":{}},"body":{"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"coverage.html":{}}}],["permissiondto.id",{"_index":787,"title":{},"body":{"injectables/PermissionService.html":{}}}],["permissiondto.tomodel",{"_index":784,"title":{},"body":{"injectables/PermissionService.html":{}}}],["permissionids",{"_index":98,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["permissionmodule",{"_index":62,"title":{"modules/PermissionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"modules.html":{},"overview.html":{}}}],["permissionobjecttype",{"_index":355,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["permissionrepository",{"_index":744,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["permissions",{"_index":97,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/PermissionService.html":{},"classes/ReadPermissionPolicyHandler.html":{},"entities/Role.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["permissions.dto",{"_index":875,"title":{},"body":{"controllers/RoleController.html":{}}}],["permissions.dto.ts",{"_index":89,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"coverage.html":{}}}],["permissions.dto.ts:14",{"_index":102,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{}}}],["permissions.dto.ts:9",{"_index":108,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{}}}],["permissions.length",{"_index":958,"title":{},"body":{"injectables/RoleService.html":{}}}],["permissions.roles",{"_index":829,"title":{},"body":{"entities/Role.html":{}}}],["permissionservice",{"_index":690,"title":{"injectables/PermissionService.html":{}},"body":{"controllers/PermissionController.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"coverage.html":{},"overview.html":{}}}],["permits",{"_index":1317,"title":{},"body":{"license.html":{}}}],["person",{"_index":1258,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1459,"title":{},"body":{"license.html":{}}}],["pg",{"_index":1074,"title":{},"body":{"dependencies.html":{}}}],["placed",{"_index":1211,"title":{},"body":{"license.html":{}}}],["platform",{"_index":1135,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":1102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["policies",{"_index":800,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policies.guard",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["policiesguard",{"_index":212,"title":{"guards/PoliciesGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/PermissionController.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{},"coverage.html":{},"overview.html":{}}}],["policy",{"_index":374,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandler",{"_index":382,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"guards/PoliciesGuard.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["policyhandlercallback",{"_index":381,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["policyhandlers",{"_index":806,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["policyhandlers.every((handler",{"_index":810,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["populated",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["port",{"_index":1105,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["possibility",{"_index":1475,"title":{},"body":{"license.html":{}}}],["post",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["post('assignpermissions",{"_index":891,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('assignpermissions')@version('1')@checkpolicies(new",{"_index":846,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('assignusers",{"_index":896,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('assignusers')@version('1')@checkpolicies(new",{"_index":850,"title":{},"body":{"controllers/RoleController.html":{}}}],["post('login",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@version('1')@apiunauthorizedresponse({description",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refreshtoken')@version('1')@apiforbiddenresponse({description",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@version('1')@checkpolicies(new",{"_index":668,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["postgres",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["postgressconfig",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["power",{"_index":1415,"title":{},"body":{"license.html":{}}}],["prefer",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"miscellaneous/functions.html":{}}}],["prejudice",{"_index":1537,"title":{},"body":{"license.html":{}}}],["prevail",{"_index":1395,"title":{},"body":{"license.html":{}}}],["previous",{"_index":413,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/PageMetaDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["primary",{"_index":646,"title":{},"body":{"entities/Permission.html":{},"license.html":{}}}],["primarygeneratedcolumn",{"_index":37,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["private",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["process.env.typeorm_synchronize",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.typeorm_synchronize.tolowercase",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prod",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producing",{"_index":1619,"title":{},"body":{"license.html":{}}}],["product",{"_index":1477,"title":{},"body":{"license.html":{}}}],["production",{"_index":1146,"title":{},"body":{"index.html":{},"license.html":{}}}],["program",{"_index":1255,"title":{},"body":{"license.html":{}}}],["progress",{"_index":1425,"title":{},"body":{"license.html":{}}}],["progressive",{"_index":1123,"title":{},"body":{"index.html":{}}}],["prohibited",{"_index":1203,"title":{},"body":{"license.html":{}}}],["project",{"_index":363,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["prominent",{"_index":1370,"title":{},"body":{"license.html":{}}}],["promise",{"_index":39,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["promises",{"_index":465,"title":{},"body":{"controllers/HealthController.html":{}}}],["pronadjimajstora",{"_index":1134,"title":{},"body":{"index.html":{}}}],["properties",{"_index":15,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"injectables/AuthService.html":{},"interfaces/CaslPermission.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"properties.html":{}}}],["property",{"_index":109,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"license.html":{}}}],["propperty",{"_index":641,"title":{},"body":{"entities/Permission.html":{}}}],["protect",{"_index":1620,"title":{},"body":{"license.html":{}}}],["protected",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["protection",{"_index":1398,"title":{},"body":{"license.html":{}}}],["provide",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"license.html":{}}}],["provided",{"_index":1199,"title":{},"body":{"license.html":{}}}],["providers",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["provides",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"license.html":{}}}],["providing",{"_index":1279,"title":{},"body":{"license.html":{}}}],["provision",{"_index":1396,"title":{},"body":{"license.html":{}}}],["provisions",{"_index":1501,"title":{},"body":{"license.html":{}}}],["public",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["public.factory",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["publicly",{"_index":1302,"title":{},"body":{"license.html":{}}}],["publish",{"_index":1551,"title":{},"body":{"license.html":{}}}],["published",{"_index":1555,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1443,"title":{},"body":{"license.html":{}}}],["put",{"_index":685,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["put()@version('1')@checkpolicies(new",{"_index":682,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["puts",{"_index":724,"title":{},"body":{"classes/PermissionDto.html":{}}}],["query",{"_index":116,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["querybuilder",{"_index":769,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["querybuilder.getcount",{"_index":775,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["querybuilder.getrawandentities",{"_index":776,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["queryparams",{"_index":848,"title":{},"body":{"controllers/RoleController.html":{}}}],["queryparams.permissionids",{"_index":895,"title":{},"body":{"controllers/RoleController.html":{}}}],["queryparams.roleid",{"_index":894,"title":{},"body":{"controllers/RoleController.html":{}}}],["queryparams.userids",{"_index":899,"title":{},"body":{"controllers/RoleController.html":{}}}],["québec",{"_index":1614,"title":{},"body":{"license.html":{}}}],["r",{"_index":1617,"title":{},"body":{"license.html":{}}}],["random",{"_index":1118,"title":{},"body":{"miscellaneous/functions.html":{}}}],["raw",{"_index":1110,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rawpassword",{"_index":1114,"title":{},"body":{"miscellaneous/functions.html":{}}}],["read",{"_index":349,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["readable",{"_index":1245,"title":{},"body":{"license.html":{}}}],["readonly",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["readpermissionpolicyhandler",{"_index":406,"title":{"classes/ReadPermissionPolicyHandler.html":{}},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"controllers/PermissionController.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"coverage.html":{}}}],["readrolepolicyhandler",{"_index":422,"title":{"classes/ReadRolePolicyHandler.html":{}},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{}}}],["reason",{"_index":1435,"title":{},"body":{"license.html":{}}}],["reasonable",{"_index":1403,"title":{},"body":{"license.html":{}}}],["received",{"_index":1533,"title":{},"body":{"license.html":{}}}],["reciprocity",{"_index":1615,"title":{},"body":{"license.html":{}}}],["records",{"_index":624,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["reducing",{"_index":1554,"title":{},"body":{"license.html":{}}}],["refer",{"_index":1363,"title":{},"body":{"license.html":{}}}],["refers",{"_index":1389,"title":{},"body":{"license.html":{}}}],["reflect",{"_index":1076,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":500,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/PoliciesGuard.html":{}}}],["reformed",{"_index":1548,"title":{},"body":{"license.html":{}}}],["refresh",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["refresh_token",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"classes/TokenDto.html":{}}}],["refreshtoken",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["refreshtoken(@body",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken(dto",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken(refreshtokendto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtokendto",{"_index":164,"title":{"classes/RefreshTokenDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["regarding",{"_index":1526,"title":{},"body":{"license.html":{}}}],["registered",{"_index":1583,"title":{},"body":{"license.html":{}}}],["registers",{"_index":1101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["relationship",{"_index":652,"title":{},"body":{"entities/Permission.html":{}}}],["remain",{"_index":1534,"title":{},"body":{"license.html":{}}}],["remote",{"_index":1521,"title":{},"body":{"license.html":{}}}],["rent",{"_index":1305,"title":{},"body":{"license.html":{}}}],["renting",{"_index":1272,"title":{},"body":{"license.html":{}}}],["repository",{"_index":763,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["represent",{"_index":359,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["represents",{"_index":123,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"classes/PageMetaDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["represnets",{"_index":105,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{}}}],["reproduce",{"_index":1297,"title":{},"body":{"license.html":{}}}],["reproduced",{"_index":1528,"title":{},"body":{"license.html":{}}}],["reproducing",{"_index":1407,"title":{},"body":{"license.html":{}}}],["request",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/PermissionController.html":{},"guards/PoliciesGuard.html":{}}}],["requested",{"_index":1525,"title":{},"body":{"license.html":{}}}],["require",{"_index":1624,"title":{},"body":{"license.html":{}}}],["required",{"_index":539,"title":{},"body":{"classes/LoginDto.html":{},"license.html":{}}}],["requires",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["residence",{"_index":1586,"title":{},"body":{"license.html":{}}}],["resides",{"_index":1576,"title":{},"body":{"license.html":{}}}],["resolves",{"_index":464,"title":{},"body":{"controllers/HealthController.html":{},"injectables/UserService.html":{}}}],["resource",{"_index":346,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["respectively",{"_index":544,"title":{},"body":{"classes/LoginDto.html":{}}}],["responsibility",{"_index":1488,"title":{},"body":{"license.html":{}}}],["rest",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["restrict",{"_index":1384,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1354,"title":{},"body":{"license.html":{}}}],["result",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PermissionService.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["resulting",{"_index":1562,"title":{},"body":{"license.html":{}}}],["results",{"_index":52,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":868,"title":{},"body":{"controllers/RoleController.html":{}}}],["retrieving",{"_index":625,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["return",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{}}}],["returned",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"classes/PageDto.html":{},"controllers/RoleController.html":{},"classes/TokenDto.html":{}}}],["returns",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"injectables/UserService.html":{}}}],["right",{"_index":1207,"title":{},"body":{"license.html":{}}}],["rights",{"_index":1284,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":88,"title":{"entities/Role.html":{}},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"entities/Permission.html":{},"classes/ReadRolePolicyHandler.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["role.controller",{"_index":919,"title":{},"body":{"modules/RoleModule.html":{}}}],["role.datecreated",{"_index":913,"title":{},"body":{"classes/RoleDto.html":{}}}],["role.dateupdated",{"_index":914,"title":{},"body":{"classes/RoleDto.html":{}}}],["role.dto",{"_index":877,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["role.entity",{"_index":909,"title":{},"body":{"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["role.id",{"_index":910,"title":{},"body":{"classes/RoleDto.html":{}}}],["role.name",{"_index":911,"title":{},"body":{"classes/RoleDto.html":{}}}],["role.permissions",{"_index":960,"title":{},"body":{"injectables/RoleService.html":{}}}],["role.service",{"_index":878,"title":{},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{}}}],["role.users",{"_index":965,"title":{},"body":{"injectables/RoleService.html":{}}}],["role/role.entity",{"_index":421,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"entities/Permission.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{}}}],["role/role.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["rolecontroller",{"_index":836,"title":{"controllers/RoleController.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"coverage.html":{}}}],["roledto",{"_index":854,"title":{"classes/RoleDto.html":{}},"body":{"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"coverage.html":{}}}],["roleid",{"_index":99,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["rolemodule",{"_index":63,"title":{"modules/RoleModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RoleModule.html":{},"modules.html":{},"overview.html":{}}}],["rolerepository",{"_index":922,"title":{},"body":{"injectables/RoleService.html":{}}}],["roles",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"entities/Permission.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"entities/User.html":{}}}],["roles.permissions",{"_index":650,"title":{},"body":{"entities/Permission.html":{}}}],["roles.users",{"_index":1001,"title":{},"body":{"entities/User.html":{}}}],["roleservice",{"_index":856,"title":{"injectables/RoleService.html":{}},"body":{"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"coverage.html":{},"overview.html":{}}}],["roleservice.findallrolespageable",{"_index":864,"title":{},"body":{"controllers/RoleController.html":{}}}],["roleservice.updaterole",{"_index":872,"title":{},"body":{"controllers/RoleController.html":{}}}],["route",{"_index":494,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["royalty",{"_index":1289,"title":{},"body":{"license.html":{}}}],["rules",{"_index":1512,"title":{},"body":{"license.html":{}}}],["run",{"_index":1141,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ruuning",{"_index":1168,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["sa",{"_index":1612,"title":{},"body":{"license.html":{}}}],["sake",{"_index":1388,"title":{},"body":{"license.html":{}}}],["salt",{"_index":1119,"title":{},"body":{"miscellaneous/functions.html":{}}}],["same",{"_index":1113,"title":{},"body":{"miscellaneous/functions.html":{}}}],["save",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["saves",{"_index":927,"title":{},"body":{"injectables/RoleService.html":{}}}],["scalable",{"_index":1128,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1177,"title":{},"body":{"index.html":{}}}],["scope",{"_index":1283,"title":{},"body":{"license.html":{}}}],["seat",{"_index":1582,"title":{},"body":{"license.html":{}}}],["second",{"_index":353,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["secret",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":535,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":1112,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selling",{"_index":1269,"title":{},"body":{"license.html":{}}}],["sent",{"_index":94,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{}}}],["serve",{"_index":1159,"title":{},"body":{"index.html":{}}}],["server",{"_index":95,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/TokenDto.html":{},"index.html":{}}}],["service",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{},"license.html":{}}}],["services",{"_index":1483,"title":{},"body":{"license.html":{}}}],["set",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":340,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["setmetadata(check_policies_key",{"_index":392,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":555,"title":{},"body":{"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1357,"title":{},"body":{"license.html":{}}}],["shape",{"_index":92,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreateUserDto.html":{},"classes/PageOptionsDto.html":{}}}],["sharealike",{"_index":1609,"title":{},"body":{"license.html":{}}}],["side",{"_index":1129,"title":{},"body":{"index.html":{}}}],["similar",{"_index":1509,"title":{},"body":{"license.html":{}}}],["similarly",{"_index":1515,"title":{},"body":{"license.html":{}}}],["single",{"_index":819,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["skip",{"_index":609,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["skip(pageoptionsdto.skip",{"_index":773,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["software",{"_index":1222,"title":{},"body":{"license.html":{}}}],["sole",{"_index":1487,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"modules/PermissionModule.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"license.html":{}}}],["special",{"_index":502,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/TokenDto.html":{}}}],["specific",{"_index":110,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"license.html":{}}}],["specified",{"_index":1106,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spotify",{"_index":972,"title":{},"body":{"classes/TokenDto.html":{}}}],["src",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../bcrypt.ts",{"_index":1095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../casl",{"_index":1089,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1094,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../page",{"_index":1087,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../postgres.config.ts",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.factory.ts",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/address/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/address/address.entity.ts:17",{"_index":38,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:20",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:23",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:26",{"_index":45,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:29",{"_index":28,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:32",{"_index":44,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:35",{"_index":33,"title":{},"body":{"entities/Address.html":{}}}],["src/address/address.entity.ts:38",{"_index":35,"title":{},"body":{"entities/Address.html":{}}}],["src/app.module.ts",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:58",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:116",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:24",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:79",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:99",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/casl",{"_index":331,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":492,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:29",{"_index":525,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":522,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/login.dto.ts",{"_index":537,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/login.dto.ts:10",{"_index":546,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/login.dto.ts:15",{"_index":545,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/policies.guard.ts",{"_index":790,"title":{},"body":{"guards/PoliciesGuard.html":{},"coverage.html":{}}}],["src/auth/policies.guard.ts:13",{"_index":794,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/auth/policies.guard.ts:31",{"_index":798,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/auth/policies.guard.ts:54",{"_index":802,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["src/auth/policies/permission.policies.ts",{"_index":395,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"coverage.html":{}}}],["src/auth/policies/permission.policies.ts:20",{"_index":815,"title":{},"body":{"classes/ReadPermissionPolicyHandler.html":{}}}],["src/auth/policies/permission.policies.ts:38",{"_index":398,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{}}}],["src/auth/policies/permission.policies.ts:51",{"_index":977,"title":{},"body":{"classes/UpdatePermissionPolicyHandler.html":{}}}],["src/auth/policies/permission.policies.ts:69",{"_index":455,"title":{},"body":{"classes/DeletePermissionPolicyHandler.html":{}}}],["src/auth/policies/role.policies.ts",{"_index":419,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{}}}],["src/auth/policies/role.policies.ts:19",{"_index":816,"title":{},"body":{"classes/ReadRolePolicyHandler.html":{}}}],["src/auth/policies/role.policies.ts:36",{"_index":420,"title":{},"body":{"classes/CreateRolePolicyHandler.html":{}}}],["src/auth/policies/role.policies.ts:58",{"_index":978,"title":{},"body":{"classes/UpdateRolePolicyHandler.html":{}}}],["src/auth/policies/role.policies.ts:75",{"_index":456,"title":{},"body":{"classes/DeleteRolePolicyHandler.html":{}}}],["src/auth/public.factory.ts",{"_index":1032,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/refresh",{"_index":817,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["src/auth/token.dto.ts",{"_index":966,"title":{},"body":{"classes/TokenDto.html":{},"coverage.html":{}}}],["src/auth/token.dto.ts:5",{"_index":974,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/auth/token.dto.ts:7",{"_index":969,"title":{},"body":{"classes/TokenDto.html":{}}}],["src/config/postgres.config.ts",{"_index":1033,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":458,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:31",{"_index":463,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":480,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/main.ts",{"_index":1034,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/migrations",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/pagination/page",{"_index":567,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/pagination/page.dto.ts",{"_index":548,"title":{},"body":{"classes/PageDto.html":{},"coverage.html":{}}}],["src/pagination/page.dto.ts:10",{"_index":559,"title":{},"body":{"classes/PageDto.html":{}}}],["src/pagination/page.dto.ts:14",{"_index":554,"title":{},"body":{"classes/PageDto.html":{}}}],["src/permission/permission.controller.ts",{"_index":658,"title":{},"body":{"controllers/PermissionController.html":{},"coverage.html":{}}}],["src/permission/permission.controller.ts:42",{"_index":677,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:50",{"_index":680,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:58",{"_index":673,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:66",{"_index":669,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.controller.ts:74",{"_index":683,"title":{},"body":{"controllers/PermissionController.html":{}}}],["src/permission/permission.dto.ts",{"_index":708,"title":{},"body":{"classes/PermissionDto.html":{},"coverage.html":{}}}],["src/permission/permission.dto.ts:12",{"_index":712,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:17",{"_index":717,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:19",{"_index":713,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:21",{"_index":714,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:27",{"_index":723,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:39",{"_index":719,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.dto.ts:8",{"_index":715,"title":{},"body":{"classes/PermissionDto.html":{}}}],["src/permission/permission.entity.ts",{"_index":637,"title":{},"body":{"entities/Permission.html":{},"coverage.html":{}}}],["src/permission/permission.entity.ts:19",{"_index":645,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.entity.ts:23",{"_index":639,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.entity.ts:28",{"_index":648,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.entity.ts:33",{"_index":651,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.entity.ts:38",{"_index":642,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.entity.ts:43",{"_index":644,"title":{},"body":{"entities/Permission.html":{}}}],["src/permission/permission.module.ts",{"_index":740,"title":{},"body":{"modules/PermissionModule.html":{}}}],["src/permission/permission.service.ts",{"_index":743,"title":{},"body":{"injectables/PermissionService.html":{},"coverage.html":{}}}],["src/permission/permission.service.ts:106",{"_index":761,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:15",{"_index":765,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:22",{"_index":756,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:56",{"_index":759,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:74",{"_index":751,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/permission/permission.service.ts:91",{"_index":747,"title":{},"body":{"injectables/PermissionService.html":{}}}],["src/role/asign",{"_index":87,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"coverage.html":{}}}],["src/role/role.controller.ts",{"_index":837,"title":{},"body":{"controllers/RoleController.html":{},"coverage.html":{}}}],["src/role/role.controller.ts:100",{"_index":871,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:112",{"_index":847,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:128",{"_index":851,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:49",{"_index":862,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:62",{"_index":867,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:74",{"_index":858,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.controller.ts:87",{"_index":855,"title":{},"body":{"controllers/RoleController.html":{}}}],["src/role/role.dto.ts",{"_index":900,"title":{},"body":{"classes/RoleDto.html":{},"coverage.html":{}}}],["src/role/role.dto.ts:10",{"_index":904,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.dto.ts:12",{"_index":901,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.dto.ts:14",{"_index":902,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.dto.ts:20",{"_index":907,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.dto.ts:32",{"_index":906,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.dto.ts:7",{"_index":903,"title":{},"body":{"classes/RoleDto.html":{}}}],["src/role/role.entity.ts",{"_index":821,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/role/role.entity.ts:19",{"_index":826,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.entity.ts:23",{"_index":828,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.entity.ts:30",{"_index":832,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.entity.ts:33",{"_index":834,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.entity.ts:36",{"_index":824,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.entity.ts:39",{"_index":825,"title":{},"body":{"entities/Role.html":{}}}],["src/role/role.module.ts",{"_index":918,"title":{},"body":{"modules/RoleModule.html":{}}}],["src/role/role.service.ts",{"_index":921,"title":{},"body":{"injectables/RoleService.html":{},"coverage.html":{}}}],["src/role/role.service.ts:101",{"_index":930,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:113",{"_index":942,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:128",{"_index":926,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:153",{"_index":929,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:17",{"_index":945,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:21",{"_index":943,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:25",{"_index":947,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:32",{"_index":940,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:66",{"_index":941,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/role/role.service.ts:84",{"_index":934,"title":{},"body":{"injectables/RoleService.html":{}}}],["src/user/create",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/user.entity.ts",{"_index":979,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:20",{"_index":995,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:23",{"_index":994,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:26",{"_index":999,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:30",{"_index":1003,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:34",{"_index":993,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:37",{"_index":998,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:40",{"_index":997,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:43",{"_index":1000,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:46",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:52",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:55",{"_index":986,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:58",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.entity.ts:65",{"_index":1002,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.module.ts",{"_index":1009,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:21",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["src/util/bcrypt.ts",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1142,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1145,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:prod",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start:prodrunning",{"_index":1147,"title":{},"body":{"index.html":{}}}],["started",{"_index":1122,"title":{"index.html":{},"license.html":{}},"body":{}}],["starts",{"_index":1104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state",{"_index":1581,"title":{},"body":{"license.html":{}}}],["stated",{"_index":1449,"title":{},"body":{"license.html":{}}}],["statements",{"_index":1025,"title":{},"body":{"coverage.html":{}}}],["stating",{"_index":1371,"title":{},"body":{"license.html":{}}}],["statutory",{"_index":1476,"title":{},"body":{"license.html":{}}}],["step",{"_index":414,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{}}}],["stoppage",{"_index":1468,"title":{},"body":{"license.html":{}}}],["store",{"_index":384,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"classes/RoleDto.html":{},"miscellaneous/variables.html":{}}}],["stored",{"_index":11,"title":{},"body":{"entities/Address.html":{},"license.html":{}}}],["strategy",{"_index":521,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":24,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreateUserDto.html":{},"interfaces/IPolicyHandler.html":{},"classes/LoginDto.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"classes/RoleDto.html":{},"classes/TokenDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strong",{"_index":1618,"title":{},"body":{"license.html":{}}}],["study",{"_index":1248,"title":{},"body":{"license.html":{}}}],["subject",{"_index":365,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"license.html":{}}}],["sublicensable",{"_index":1293,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1306,"title":{},"body":{"license.html":{}}}],["subsequent",{"_index":1421,"title":{},"body":{"license.html":{}}}],["such",{"_index":1205,"title":{},"body":{"license.html":{}}}],["super",{"_index":496,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":517,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":1626,"title":{},"body":{"modules.html":{}}}],["supports",{"_index":1310,"title":{},"body":{"license.html":{}}}],["svg",{"_index":1627,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1070,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["synchronize",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["t",{"_index":553,"title":{},"body":{"classes/PageDto.html":{}}}],["table",{"_index":640,"title":{},"body":{"entities/Permission.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":574,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{},"license.html":{}}}],["take(pageoptionsdto.take",{"_index":774,"title":{},"body":{"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["takes",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"classes/PermissionDto.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"modules/UserModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tells",{"_index":578,"title":{},"body":{"classes/PageMetaDto.html":{},"entities/Permission.html":{}}}],["terminate",{"_index":1530,"title":{},"body":{"license.html":{}}}],["termination",{"_index":1529,"title":{},"body":{"license.html":{}}}],["terminusmodule",{"_index":481,"title":{},"body":{"modules/HealthModule.html":{}}}],["terms",{"_index":1201,"title":{},"body":{"license.html":{}}}],["test",{"_index":1155,"title":{},"body":{"index.html":{}}}],["test:covdocumentation",{"_index":1158,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1157,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1154,"title":{},"body":{"index.html":{}}}],["text",{"_index":1111,"title":{},"body":{"miscellaneous/functions.html":{},"license.html":{}}}],["therefore",{"_index":1430,"title":{},"body":{"license.html":{}}}],["thereof",{"_index":1233,"title":{},"body":{"license.html":{}}}],["thereto",{"_index":1351,"title":{},"body":{"license.html":{}}}],["third",{"_index":356,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"miscellaneous/typealiases.html":{}}}],["this.access_token",{"_index":975,"title":{},"body":{"classes/TokenDto.html":{}}}],["this.action",{"_index":730,"title":{},"body":{"classes/PermissionDto.html":{}}}],["this.authservice.getcurrentuser(request.headers.authorization",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(logindto",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(refreshtokendto",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.caslabilityfactory.createforuser(user",{"_index":809,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.data",{"_index":565,"title":{},"body":{"classes/PageDto.html":{}}}],["this.datecreated",{"_index":733,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["this.dateupdated",{"_index":735,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["this.db.pingcheck('postgres",{"_index":479,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.execpolicyhandler(handler",{"_index":811,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.generatenewtoken(user",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hasnextpage",{"_index":602,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.haspreviouspage",{"_index":601,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.health.check",{"_index":477,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.http.pingcheck('basic",{"_index":478,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.id",{"_index":728,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["this.itemcount",{"_index":598,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.jwtservice.sign",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(dto.refresh_token",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.meta",{"_index":566,"title":{},"body":{"classes/PageDto.html":{}}}],["this.name",{"_index":912,"title":{},"body":{"classes/RoleDto.html":{}}}],["this.page",{"_index":594,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.pagecount",{"_index":599,"title":{},"body":{"classes/PageMetaDto.html":{}}}],["this.permissionrepository.createquerybuilder('permissions",{"_index":770,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionrepository.delete(id",{"_index":782,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionrepository.findbyids",{"_index":957,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.permissionrepository.findone",{"_index":786,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionrepository.findone(id",{"_index":779,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionrepository.save",{"_index":783,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionrepository.save(permissiondto.tomodel",{"_index":785,"title":{},"body":{"injectables/PermissionService.html":{}}}],["this.permissionservice.createpermission(permissiondto",{"_index":705,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.deletepermissionbyid(id",{"_index":703,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findallpermissionspageable(pageoptionsdto",{"_index":697,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.findpermissionbyid(id",{"_index":700,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.permissionservice.updatepermission(permissiondto",{"_index":707,"title":{},"body":{"controllers/PermissionController.html":{}}}],["this.reflector.get",{"_index":807,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":514,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refresh_token",{"_index":976,"title":{},"body":{"classes/TokenDto.html":{}}}],["this.resource",{"_index":732,"title":{},"body":{"classes/PermissionDto.html":{}}}],["this.rolerepository.createquerybuilder('roles",{"_index":948,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.delete(id",{"_index":953,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone(id",{"_index":952,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone(role.id",{"_index":962,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone(roledto.id",{"_index":955,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.findone(roleid",{"_index":956,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.save(role",{"_index":961,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.rolerepository.save(roledto.tomodel",{"_index":954,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.roleservice.assignpermissions",{"_index":893,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.assignusers",{"_index":898,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.createrole(roledto",{"_index":888,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.deleterolebyid(id",{"_index":886,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.findallrolespageable(pageoptionsdto",{"_index":882,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.findrolebyid(id",{"_index":884,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.roleservice.updaterole(roledto",{"_index":890,"title":{},"body":{"controllers/RoleController.html":{}}}],["this.take",{"_index":596,"title":{},"body":{"classes/PageMetaDto.html":{},"classes/PageOptionsDto.html":{}}}],["this.userrepository.findbyids(userids",{"_index":963,"title":{},"body":{"injectables/RoleService.html":{}}}],["this.userrepository.findone",{"_index":1021,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findbyusernameoremail(usernameoremail",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":1307,"title":{},"body":{"license.html":{}}}],["throttlerguard",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["throttlermodule",{"_index":485,"title":{},"body":{"modules/HealthModule.html":{}}}],["throttlermodule.forroot",{"_index":486,"title":{},"body":{"modules/HealthModule.html":{}}}],["throw",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["throws",{"_index":938,"title":{},"body":{"injectables/RoleService.html":{}}}],["time",{"_index":1419,"title":{},"body":{"license.html":{}}}],["todo",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["token",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TokenDto.html":{}}}],["token.dto",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["token.dto.ts",{"_index":818,"title":{},"body":{"classes/RefreshTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:7",{"_index":820,"title":{},"body":{"classes/RefreshTokenDto.html":{}}}],["tokendto",{"_index":245,"title":{"classes/TokenDto.html":{}},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{},"coverage.html":{}}}],["tokendto(access_token",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["tokens",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"classes/TokenDto.html":{}}}],["tomodel",{"_index":711,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["total",{"_index":588,"title":{},"body":{"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{}}}],["trade",{"_index":1399,"title":{},"body":{"license.html":{}}}],["trademarks",{"_index":1361,"title":{},"body":{"license.html":{}}}],["transfer",{"_index":967,"title":{},"body":{"classes/TokenDto.html":{}}}],["transformer",{"_index":627,"title":{},"body":{"classes/PageOptionsDto.html":{},"dependencies.html":{}}}],["transmitting",{"_index":1275,"title":{},"body":{"license.html":{}}}],["treaty",{"_index":1573,"title":{},"body":{"license.html":{}}}],["true",{"_index":43,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PageDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"entities/Role.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["true})@index",{"_index":992,"title":{},"body":{"entities/User.html":{}}}],["true})@jointable",{"_index":831,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["try",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["trying",{"_index":404,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{}}}],["ts",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ttl",{"_index":487,"title":{},"body":{"modules/HealthModule.html":{}}}],["two",{"_index":403,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{}}}],["type",{"_index":22,"title":{},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageMetaDto.html":{},"interfaces/PageMetaDtoParameters.html":{},"classes/PageOptionsDto.html":{},"entities/Permission.html":{},"controllers/PermissionController.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"classes/RefreshTokenDto.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"classes/RoleDto.html":{},"injectables/RoleService.html":{},"classes/TokenDto.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1637,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":812,"title":{},"body":{"guards/PoliciesGuard.html":{}}}],["typeorm",{"_index":49,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"injectables/PermissionService.html":{},"entities/Role.html":{},"injectables/RoleService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeormhealthindicator",{"_index":469,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature",{"_index":1010,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forfeature([permission",{"_index":742,"title":{},"body":{"modules/PermissionModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":920,"title":{},"body":{"modules/RoleModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1013,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forroot(postgressconfig",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/passport",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1133,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('wrong",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":988,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["undefined})@isenum(order)@isoptional",{"_index":613,"title":{},"body":{"classes/PageOptionsDto.html":{}}}],["under",{"_index":1200,"title":{},"body":{"license.html":{}}}],["unenforceable",{"_index":1542,"title":{},"body":{"license.html":{}}}],["union",{"_index":1186,"title":{},"body":{"index.html":{},"license.html":{}}}],["unique",{"_index":654,"title":{},"body":{"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{},"license.html":{}}}],["unique(['action",{"_index":656,"title":{},"body":{"entities/Permission.html":{}}}],["unit",{"_index":1153,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":529,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["unless",{"_index":1376,"title":{},"body":{"license.html":{}}}],["unlicensed",{"_index":1635,"title":{},"body":{"properties.html":{}}}],["unported",{"_index":1610,"title":{},"body":{"license.html":{}}}],["update",{"_index":350,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"entities/Permission.html":{},"classes/PermissionDto.html":{},"injectables/PermissionService.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{},"license.html":{}}}],["updated",{"_index":823,"title":{},"body":{"entities/Role.html":{},"classes/RoleDto.html":{},"license.html":{}}}],["updatedatecolumn",{"_index":34,"title":{},"body":{"entities/Address.html":{},"entities/Permission.html":{},"entities/Role.html":{},"entities/User.html":{}}}],["updatepermission",{"_index":665,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["updatepermission(@body",{"_index":706,"title":{},"body":{"controllers/PermissionController.html":{}}}],["updatepermission(permissiondto",{"_index":681,"title":{},"body":{"controllers/PermissionController.html":{},"injectables/PermissionService.html":{}}}],["updatepermissionpolicyhandler",{"_index":411,"title":{"classes/UpdatePermissionPolicyHandler.html":{}},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"controllers/PermissionController.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"coverage.html":{}}}],["updaterole",{"_index":844,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["updaterole(@body",{"_index":889,"title":{},"body":{"controllers/RoleController.html":{}}}],["updaterole(roledto",{"_index":870,"title":{},"body":{"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["updaterolepolicyhandler",{"_index":425,"title":{"classes/UpdateRolePolicyHandler.html":{}},"body":{"classes/CreateRolePolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdateRolePolicyHandler.html":{},"coverage.html":{}}}],["updates",{"_index":762,"title":{},"body":{"injectables/PermissionService.html":{}}}],["updating",{"_index":684,"title":{},"body":{"controllers/PermissionController.html":{}}}],["upon",{"_index":1231,"title":{},"body":{"license.html":{}}}],["uptest",{"_index":1152,"title":{},"body":{"index.html":{}}}],["usage",{"_index":1265,"title":{},"body":{"license.html":{}}}],["use",{"_index":402,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/DeletePermissionPolicyHandler.html":{},"injectables/PermissionService.html":{},"classes/ReadPermissionPolicyHandler.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"injectables/UserService.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreateUserDto.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"guards/PoliciesGuard.html":{},"classes/RoleDto.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["useguards(jwtauthguard",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(policiesguard",{"_index":694,"title":{},"body":{"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["useguards(throttlerguard",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"controllers/HealthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["user",{"_index":10,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"classes/AssignRolePermissionsQuery.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"interfaces/IPolicyHandler.html":{},"injectables/JwtStrategy.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"entities/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user's",{"_index":523,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["user.addresses",{"_index":41,"title":{},"body":{"entities/Address.html":{}}}],["user.dto.ts",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:43",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":1011,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user.password",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.roles.reduce",{"_index":367,"title":{},"body":{"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{}}}],["user.service",{"_index":1012,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.entity",{"_index":47,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"entities/Role.html":{},"modules/RoleModule.html":{},"injectables/RoleService.html":{}}}],["user/user.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["userids",{"_index":121,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{}}}],["usermodule",{"_index":64,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["usernameoremail",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{}}}],["userrepository",{"_index":923,"title":{},"body":{"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["users",{"_index":125,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"entities/Role.html":{},"controllers/RoleController.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["users.dto",{"_index":876,"title":{},"body":{"controllers/RoleController.html":{}}}],["users.dto.ts",{"_index":115,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{},"coverage.html":{}}}],["users.dto.ts:14",{"_index":126,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{}}}],["users.dto.ts:9",{"_index":122,"title":{},"body":{"classes/AssignRoleUsersQuery.html":{}}}],["users.length",{"_index":964,"title":{},"body":{"injectables/RoleService.html":{}}}],["users.roles",{"_index":833,"title":{},"body":{"entities/Role.html":{}}}],["userservice",{"_index":235,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":520,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["using",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["util/bcrypt",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["v",{"_index":1192,"title":{},"body":{"license.html":{}}}],["valid",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"license.html":{}}}],["validate",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/PageDto.html":{}}}],["validate(payload",{"_index":524,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validateif((_object",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["validates",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(usernameoremail",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":113,"title":{},"body":{"classes/AssignRolePermissionsQuery.html":{},"classes/AssignRoleUsersQuery.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/PageDto.html":{},"classes/PageOptionsDto.html":{},"classes/PermissionDto.html":{},"classes/RefreshTokenDto.html":{},"classes/RoleDto.html":{},"dependencies.html":{}}}],["validity",{"_index":1544,"title":{},"body":{"license.html":{}}}],["value",{"_index":405,"title":{},"body":{"classes/CreatePermissionPolicyHandler.html":{},"classes/CreateRolePolicyHandler.html":{},"classes/CreateUserDto.html":{},"classes/DeletePermissionPolicyHandler.html":{},"classes/DeleteRolePolicyHandler.html":{},"injectables/JwtAuthGuard.html":{},"classes/PageOptionsDto.html":{},"guards/PoliciesGuard.html":{},"classes/ReadPermissionPolicyHandler.html":{},"classes/ReadRolePolicyHandler.html":{},"controllers/RoleController.html":{},"classes/UpdatePermissionPolicyHandler.html":{},"classes/UpdateRolePolicyHandler.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":556,"title":{},"body":{"classes/PageDto.html":{},"classes/RoleDto.html":{},"miscellaneous/enumerations.html":{}}}],["variable",{"_index":1031,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1639,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifies",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{},"license.html":{},"properties.html":{}}}],["version('1",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PermissionController.html":{},"controllers/RoleController.html":{}}}],["versioning",{"_index":1099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["versions",{"_index":1553,"title":{},"body":{"license.html":{}}}],["vested",{"_index":1295,"title":{},"body":{"license.html":{}}}],["visit",{"_index":1163,"title":{},"body":{"index.html":{}}}],["void",{"_index":722,"title":{},"body":{"classes/PermissionDto.html":{},"classes/RoleDto.html":{}}}],["waives",{"_index":1321,"title":{},"body":{"license.html":{}}}],["want",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CaslAbilityFactory.html":{},"interfaces/CaslPermission.html":{},"interfaces/IPolicyHandler.html":{},"classes/PageMetaDto.html":{},"injectables/PermissionService.html":{},"injectables/RoleService.html":{}}}],["warranties",{"_index":1365,"title":{},"body":{"license.html":{}}}],["warrants",{"_index":1411,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1424,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1143,"title":{},"body":{"index.html":{}}}],["way",{"_index":1510,"title":{},"body":{"license.html":{}}}],["we're",{"_index":748,"title":{},"body":{"injectables/PermissionService.html":{},"guards/PoliciesGuard.html":{},"injectables/RoleService.html":{},"injectables/UserService.html":{}}}],["website",{"_index":1524,"title":{},"body":{"license.html":{}}}],["whether",{"_index":579,"title":{},"body":{"classes/PageMetaDto.html":{},"miscellaneous/functions.html":{},"license.html":{}}}],["whole",{"_index":1546,"title":{},"body":{"license.html":{}}}],["wilful",{"_index":1454,"title":{},"body":{"license.html":{}}}],["willingness",{"_index":1218,"title":{},"body":{"license.html":{}}}],["window",{"_index":1505,"title":{},"body":{"license.html":{}}}],["without",{"_index":1437,"title":{},"body":{"license.html":{}}}],["work",{"_index":1197,"title":{},"body":{"license.html":{}}}],["working",{"_index":1170,"title":{},"body":{"index.html":{}}}],["works",{"_index":1228,"title":{},"body":{"license.html":{}}}],["worldwide",{"_index":1288,"title":{},"body":{"license.html":{}}}],["written",{"_index":1132,"title":{},"body":{"index.html":{}}}],["wrong",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["zipcode",{"_index":21,"title":{},"body":{"entities/Address.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PermissionModule.html":{},"modules/RoleModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/address/address.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Address model, which is bound to the user and stored inside the database\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                dateCreated\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                id\n                            \n                            \n                                user\n                            \n                            \n                                zipCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.addresses, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zipCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/address/address.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { User } from '../user/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/**\n * Address model, which is bound to the user and stored inside the database\n */\n@Entity()\nexport class Address {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  city: string;\n\n  @Column()\n  country: string;\n\n  @Column()\n  zipCode: string;\n\n  @Column()\n  address: string;\n\n  @ManyToOne(() => User, (user) => user.addresses, { nullable: true })\n  user: Promise;\n\n  @CreateDateColumn()\n  dateCreated: Date;\n\n  @UpdateDateColumn()\n  dateUpdated: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nPermissionModule\n\nPermissionModule\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            PermissionModule\n                        \n                        \n                            RoleModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport postgressConfig from './config/postgres.config';\nimport { HealthModule } from './health/health.module';\nimport { UserModule } from './user/user.module';\nimport { RoleModule } from './role/role.module';\nimport { PermissionModule } from './permission/permission.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot(postgressConfig),\n    HealthModule,\n    UserModule,\n    AuthModule,\n    RoleModule,\n    PermissionModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignRolePermissionsQuery.html":{"url":"classes/AssignRolePermissionsQuery.html","title":"class - AssignRolePermissionsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignRolePermissionsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/asign-role-permissions.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that defines the shape of the data that will be sent to the server when a user assigns\npermissions to a role\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                permissionIds\n                            \n                            \n                                roleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        permissionIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/asign-role-permissions.dto.ts:14\n                        \n                    \n\n            \n                \n                    It's an array of numbers that represnets permissions to be assigned to to the role.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/asign-role-permissions.dto.ts:9\n                        \n                    \n\n            \n                \n                    It's a property that will be sent to the server when a user assigns permissions to a specific role id.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from 'class-validator';\n\n/** It's a class that defines the shape of the data that will be sent to the server when a user assigns\npermissions to a role */\nexport class AssignRolePermissionsQuery {\n  /** It's a property that will be sent to the server when a user assigns permissions to a specific role id. */\n  @IsNumber()\n  @IsNotEmpty()\n  roleId: number;\n\n  /** It's an array of numbers that represnets permissions to be assigned to to the role. */\n  @IsNotEmpty()\n  @IsNumber({}, { each: true })\n  permissionIds: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AssignRoleUsersQuery.html":{"url":"classes/AssignRoleUsersQuery.html","title":"class - AssignRoleUsersQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AssignRoleUsersQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/asign-role-users.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that defines the shape of the query parameters that will be passed to the\nassignRoleUsers() method\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                roleId\n                            \n                            \n                                userIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/asign-role-users.dto.ts:9\n                        \n                    \n\n            \n                \n                    It's a property that will be passed to the assignRoleUsers() method and represents the role id to assign users to.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/asign-role-users.dto.ts:14\n                        \n                    \n\n            \n                \n                    It's an array of numbers that represents the list of users to assign to role.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumber } from 'class-validator';\n\n/** It's a class that defines the shape of the query parameters that will be passed to the\nassignRoleUsers() method */\nexport class AssignRoleUsersQuery {\n  /** It's a property that will be passed to the assignRoleUsers() method and represents the role id to assign users to. */\n  @IsNumber()\n  @IsNotEmpty()\n  roleId: number;\n\n  /** It's an array of numbers that represents the list of users to assign to role. */\n  @IsNotEmpty()\n  @IsNumber({}, { each: true })\n  userIds: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                It's a REST controller that has a login and refreshToken endpoint, and a me endpoint that requires\nauthentication, this controller handles authorization\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                me\n                            \n                            \n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@Version('1')@ApiUnauthorizedResponse({description: 'Wrong Credentials'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n                    This is a function that takes a loginDto object as a parameter, and returns the result of the\nlogin function in the authService.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        me\n                        \n                    \n                \n            \n            \n                \nme(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('me')@Version('1')@ApiBearerAuth()@UseGuards(JwtAuthGuard)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:58\n                \n            \n\n\n            \n                \n                    This is a function that takes a request object as a parameter, and returns the result of the\ngetCurrentUser function in the authService.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refreshToken\n                        \n                    \n                \n            \n            \n                \nrefreshToken(refreshTokenDto: RefreshTokenDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refreshToken')@Version('1')@ApiForbiddenResponse({description: 'Refresh Token is Invalid'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:48\n                \n            \n\n\n            \n                \n                    This is a function that takes a refreshTokenDto object as a parameter, and returns the result of the\nrefreshToken function in the authService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshTokenDto\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Post,\n  Request,\n  UseGuards,\n  Version,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { LoginDto } from './login.dto';\nimport { Public } from './public.factory';\nimport { RefreshTokenDto } from './refresh-token.dto';\n\n/** It's a REST controller that has a login and refreshToken endpoint, and a me endpoint that requires\nauthentication, this controller handles authorization */\n@Controller('auth')\n@UseGuards(ThrottlerGuard)\n@ApiTags('auth')\n@Public()\nexport class AuthController {\n  @Inject()\n  private readonly authService: AuthService;\n\n  /** This is a function that takes a loginDto object as a parameter, and returns the result of the\nlogin function in the authService. */\n  @Post('login')\n  @Version('1')\n  @ApiUnauthorizedResponse({ description: 'Wrong Credentials' })\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n\n  /** This is a function that takes a refreshTokenDto object as a parameter, and returns the result of the\nrefreshToken function in the authService */\n  @Post('refreshToken')\n  @Version('1')\n  @ApiForbiddenResponse({ description: 'Refresh Token is Invalid' })\n  refreshToken(@Body() refreshTokenDto: RefreshTokenDto) {\n    return this.authService.refreshToken(refreshTokenDto);\n  }\n\n  /** This is a function that takes a request object as a parameter, and returns the result of the\ngetCurrentUser function in the authService. */\n  @Get('me')\n  @Version('1')\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  me(@Request() request) {\n    return this.authService.getCurrentUser(request.headers.authorization);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nAuthModule->CaslAbilityFactory \n\n\n\n\n\nPoliciesGuard \n\nPoliciesGuard \n\nPoliciesGuard  -->\n\nAuthModule->PoliciesGuard \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nAuthModule -->\n\nCaslAbilityFactory->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslAbilityFactory\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            CaslAbilityFactory\n                        \n                        \n                            PoliciesGuard\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserModule } from '../user/user.module';\nimport { AuthService } from './auth.service';\nimport { CaslAbilityFactory } from './casl-ability.factory';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { JwtStrategy } from './jwt.strategy';\nimport { PoliciesGuard } from './policies.guard';\nimport { AuthController } from './auth.controller';\nimport { APP_GUARD } from '@nestjs/core';\n\n@Module({\n  imports: [UserModule],\n  providers: [\n    AuthService,\n    JwtService,\n    JwtStrategy,\n    CaslAbilityFactory,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard,\n    },\n    PoliciesGuard,\n  ],\n  exports: [AuthService, CaslAbilityFactory, PoliciesGuard],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a service that provides methods to login, refresh tokens and get the current user\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                jwtService\n                            \n                            \n                                    Private\n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateNewToken\n                            \n                            \n                                    Async\n                                getCurrentUser\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Protected\n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        generateNewToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateNewToken(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n                    It creates a new access token and a new refresh token, and returns them in a TokenDto object\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe user object that we want to encode in the token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A new TokenDto object with the access_token and refresh_token.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCurrentUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentUser(authHeader: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:116\n                \n            \n\n\n            \n                \n                    It takes an authorization header, extracts the token, verifies it, and returns the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    authHeader\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe authorization header that contains the JWT token.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The user object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:79\n                \n            \n\n\n            \n                \n                    It takes a loginDto object, validates the user, and if the user is valid, it generates a new token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loginDto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nLoginDto\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A tokenDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(dto: RefreshTokenDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:99\n                \n            \n\n\n            \n                \n                    It takes a refresh token, verifies it, and returns a new access token\ntoken.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                RefreshTokenDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRefreshTokenDto - The DTO that will be used to validate the refresh\ntoken.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        The token is being returned.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Protected\n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(usernameOrEmail: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n                    It takes a username or email and a password, finds the user in the database, and compares the\npassword to the one in the database\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    usernameOrEmail\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe username or email of the user.\n\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe password that the user entered in the login form.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A user object with the roles property populated.\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        jwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JwtService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:24\n                        \n                    \n\n            \n                \n                    Injecting the JwtService into the AuthService.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.service.ts:21\n                        \n                    \n\n            \n                \n                    Injecting the UserService into the AuthService.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport enviroment from '../../env';\nimport { User } from '../user/user.entity';\nimport { UserService } from '../user/user.service';\nimport { comparePasswords } from '../util/bcrypt';\nimport { LoginDto } from './login.dto';\nimport { RefreshTokenDto } from './refresh-token.dto';\nimport { TokenDto } from './token.dto';\n\n/** It's a service that provides methods to login, refresh tokens and get the current user */\n@Injectable()\nexport class AuthService {\n  /** Injecting the UserService into the AuthService. */\n  @Inject()\n  private userService: UserService;\n  /** Injecting the JwtService into the AuthService. */\n  @Inject()\n  private jwtService: JwtService;\n\n  /**\n   * It takes a username or email and a password, finds the user in the database, and compares the\n   * password to the one in the database\n   * @param {string} usernameOrEmail - The username or email of the user.\n   * @param {string} password - The password that the user entered in the login form.\n   * @returns A user object with the roles property populated.\n   */\n  /* istanbul ignore next */\n  protected async validateUser(\n    usernameOrEmail: string,\n    password: string,\n  ): Promise {\n    const user = await this.userService.findByUsernameOrEmail(usernameOrEmail);\n    await user.roles;\n    if (user && comparePasswords(password, user.password)) {\n      return user;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * It creates a new access token and a new refresh token, and returns them in a TokenDto object\n   * @param {User} user - The user object that we want to encode in the token.\n   * @returns A new TokenDto object with the access_token and refresh_token.\n   */\n  //TODO: Save refresh token in fast memory\n  /* istanbul ignore next */\n  private generateNewToken(user: User) {\n    const access_token = this.jwtService.sign(\n      { user },\n      {\n        issuer: enviroment.APP_URL,\n        secret: enviroment.ACCESS_TOKEN_SECRET,\n        expiresIn: enviroment.ACCESS_TOKEN_EXPIRATION_TIME,\n      },\n    );\n    const refresh_token = this.jwtService.sign(\n      { user },\n      {\n        issuer: enviroment.APP_URL,\n        secret: enviroment.REFRESH_TOKEN_SECRET,\n        expiresIn: enviroment.REFRESH_TOKEN_EXPIRATION_TIME,\n      },\n    );\n    return new TokenDto(access_token, refresh_token);\n  }\n\n  /**\n   * It takes a loginDto object, validates the user, and if the user is valid, it generates a new token\n   * @param {LoginDto} loginDto - LoginDto\n   * @returns A tokenDto object\n   */\n  async login(loginDto: LoginDto): Promise {\n    const user = await this.validateUser(\n      loginDto.usernameOrEmail,\n      loginDto.password,\n    );\n\n    /* istanbul ignore next */\n    if (user) {\n      return this.generateNewToken(user);\n    } else {\n      throw new UnauthorizedException('Wrong Credentials');\n    }\n  }\n\n  /**\n   * It takes a refresh token, verifies it, and returns a new access token\n   * @param {RefreshTokenDto} dto - RefreshTokenDto - The DTO that will be used to validate the refresh\n   * token.\n   * @returns The token is being returned.\n   */\n  async refreshToken(dto: RefreshTokenDto): Promise {\n    try {\n      return this.jwtService.verify(dto.refresh_token, {\n        issuer: enviroment.APP_URL,\n        secret: enviroment.REFRESH_TOKEN_SECRET,\n        ignoreExpiration: false,\n      });\n    } catch {\n      throw new ForbiddenException('Invalid Refresh Token');\n    }\n  }\n\n  /**\n   * It takes an authorization header, extracts the token, verifies it, and returns the user\n   * @param {string} authHeader - The authorization header that contains the JWT token.\n   * @returns The user object\n   */\n  async getCurrentUser(authHeader: string): Promise {\n    const token = authHeader.replace('Bearer ', '');\n    try {\n      return this.jwtService.verify(token, {\n        issuer: enviroment.APP_URL,\n        secret: enviroment.ACCESS_TOKEN_SECRET,\n        ignoreExpiration: false,\n      });\n    } catch {\n      throw new UnauthorizedException('Invalid JWT Token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CaslAbilityFactory.html":{"url":"injectables/CaslAbilityFactory.html","title":"injectable - CaslAbilityFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CaslAbilityFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl-ability.factory.ts\n        \n\n\n            \n                Description\n            \n            \n                It takes a user object and returns a Casl ability object\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createForUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createForUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createForUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl-ability.factory.ts:36\n                \n            \n\n\n            \n                \n                    It takes a user and returns an ability object that contains all the permissions that the user has\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nUser - the user for whom we want to create the ability\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        An instance of the Ability class.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Ability } from '@casl/ability';\nimport { Injectable, SetMetadata } from '@nestjs/common';\nimport { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\n\n/** Defining the actions that can be performed on a resource. */\nexport enum PermissionAction {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  MANAGE = 'manage',\n}\n\n/** Defining the type of the second argument of the `Ability` class. */\nexport type PermissionObjectType = any;\n/** Defining the type of the third argument of the `Ability` class. */\nexport type AppAbility = Ability;\n/** Defining the interface that is used to represent CaslPermission */\ninterface CaslPermission {\n  /** The action for the resource that the permission is for. */\n  action: PermissionAction;\n  // In our database, Invoice, Project... are called \"object\"\n  // but in CASL they are called \"subject\"\n  /** The name of the resource that the permission is for. */\n  subject: string;\n}\n/** It takes a user object and returns a Casl ability object */\n@Injectable()\nexport class CaslAbilityFactory {\n  /**\n   * It takes a user and returns an ability object that contains all the permissions that the user has\n   * @param {User} user - User - the user for whom we want to create the ability\n   * @returns An instance of the Ability class.\n   */\n  async createForUser(user: User): Promise {\n    const dbPermissions: Permission[] = user.roles.reduce(\n      (acc, it) => [...acc, ...it.permissions],\n      [],\n    );\n    const caslPermissions: CaslPermission[] = dbPermissions.map((p) => ({\n      action: p.action,\n      subject: p.resource,\n    }));\n    return new Ability(\n      caslPermissions,\n    );\n  }\n}\n\n/** Defining an interface that is used to create a policy handler. */\nexport interface IPolicyHandler {\n  /** A method that is used to check if the user has the permission to perform the action on the\n  resource. */\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\n/** Defining a type that is used to create a policy handler. */\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n/** A constant that is used to store the metadata of the decorated class or method. */\nexport const CHECK_POLICIES_KEY = 'check_policy';\n/**\n * It takes a list of policy handlers and adds them to the metadata of the decorated class or method\n * @param {PolicyHandler[]} handlers - PolicyHandler[] - An array of policy handlers.\n */\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CaslPermission.html":{"url":"interfaces/CaslPermission.html","title":"interface - CaslPermission","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CaslPermission\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl-ability.factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the interface that is used to represent CaslPermission\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            action\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        action\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        action:         PermissionAction\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PermissionAction\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The action for the resource that the permission is for.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the resource that the permission is for.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Ability } from '@casl/ability';\nimport { Injectable, SetMetadata } from '@nestjs/common';\nimport { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\n\n/** Defining the actions that can be performed on a resource. */\nexport enum PermissionAction {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  MANAGE = 'manage',\n}\n\n/** Defining the type of the second argument of the `Ability` class. */\nexport type PermissionObjectType = any;\n/** Defining the type of the third argument of the `Ability` class. */\nexport type AppAbility = Ability;\n/** Defining the interface that is used to represent CaslPermission */\ninterface CaslPermission {\n  /** The action for the resource that the permission is for. */\n  action: PermissionAction;\n  // In our database, Invoice, Project... are called \"object\"\n  // but in CASL they are called \"subject\"\n  /** The name of the resource that the permission is for. */\n  subject: string;\n}\n/** It takes a user object and returns a Casl ability object */\n@Injectable()\nexport class CaslAbilityFactory {\n  /**\n   * It takes a user and returns an ability object that contains all the permissions that the user has\n   * @param {User} user - User - the user for whom we want to create the ability\n   * @returns An instance of the Ability class.\n   */\n  async createForUser(user: User): Promise {\n    const dbPermissions: Permission[] = user.roles.reduce(\n      (acc, it) => [...acc, ...it.permissions],\n      [],\n    );\n    const caslPermissions: CaslPermission[] = dbPermissions.map((p) => ({\n      action: p.action,\n      subject: p.resource,\n    }));\n    return new Ability(\n      caslPermissions,\n    );\n  }\n}\n\n/** Defining an interface that is used to create a policy handler. */\nexport interface IPolicyHandler {\n  /** A method that is used to check if the user has the permission to perform the action on the\n  resource. */\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\n/** Defining a type that is used to create a policy handler. */\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n/** A constant that is used to store the metadata of the decorated class or method. */\nexport const CHECK_POLICIES_KEY = 'check_policy';\n/**\n * It takes a list of policy handlers and adds them to the metadata of the decorated class or method\n * @param {PolicyHandler[]} handlers - PolicyHandler[] - An array of policy handlers.\n */\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePermissionPolicyHandler.html":{"url":"classes/CreatePermissionPolicyHandler.html","title":"class - CreatePermissionPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePermissionPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/permission.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the ability to create a permission, then they can create a permission.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/permission.policies.ts:38\n                \n            \n\n\n            \n                \n                    \"If the user has the ability to create a Permission, then they can create a Permission.\"\nThe above function is a good example of how to use the can function. The can function takes\ntwo parameters:\n\nThe action that the user is trying to perform.\nThe resource that the user is trying to perform the action on\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can() method.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Permission } from '../../permission/permission.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** \"If the user has the READ permission on the Permission resource, then they can read the Permission\nresource.\"\n\nThe `handle` method is called by the `can` method of the `AppAbility` class. The `handle` method is\npassed the `AppAbility` instance. The `handle` method returns a boolean value. If the value is true,\nthen the user has the permission. If the value is false, then the user does not have the permission */\nexport class ReadPermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to read the Permission model, then they can read the Permission model\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Permission);\n  }\n}\n\n/** If the user has the ability to create a permission, then they can create a permission. */\nexport class CreatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a Permission, then they can create a Permission.\"\n   *\n   * The above function is a good example of how to use the `can` function. The `can` function takes\n   * two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Permission);\n  }\n}\n\n/** If the user has the UPDATE permission on the Permission resource, then they can update permissions. */\nexport class UpdatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to update permissions, then they can update permissions\n   * @param {AppAbility} ability - AppAbility - This is the ability class that you created in the\n   * previous step.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Permission);\n  }\n}\n\n/** If the user has the DELETE permission on the Permission resource, then they can delete a permission. */\nexport class DeletePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a Permission, then they can delete a Permission.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - This is the ability object that is passed to the can\n   * function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Permission);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRolePolicyHandler.html":{"url":"classes/CreateRolePolicyHandler.html","title":"class - CreateRolePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRolePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/role.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the CREATE permission for the Role resource, then they can create a role.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/role.policies.ts:36\n                \n            \n\n\n            \n                \n                    \"If the user has the ability to create a role, then they can create a role.\"\nThe can function takes two parameters:\n\nThe action that the user is trying to perform.\nThe resource that the user is trying to perform the action on\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can() method.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '../../role/role.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** If the user has the READ permission on the Role resource, then they can read the role. */\nexport class ReadRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the READ permission on the Role resource, then they can read the Role resource.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Role);\n  }\n}\n\n/** If the user has the CREATE permission for the Role resource, then they can create a role. */\nexport class CreateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a role, then they can create a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Role);\n  }\n}\n\n/** If the user has the UPDATE permission on the Role resource, then they can update a role. */\nexport class UpdateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the UPDATE permission on the Role resource, then they can update the role.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform. In this case, the user is\n   * trying to update the role.\n   * The second parameter is the resource that the user is trying to perform the action on. In this\n   * case, the user is trying to update the role resource.\n   * The ability.can() function returns a boolean value. If the user has the UPDATE permission on the\n   * Role resource, then the function returns true. If the user does not have the UPDATE permission on\n   * the Role resource, then the function returns false\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Role);\n  }\n}\n\n/** If the user has the DELETE permission on the Role resource, then they can delete a role. */\nexport class DeleteRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a role, then they can delete a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The subject that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Role);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that defines the shape of the data that will be sent to the server when a user is\ncreated\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateOfBirth\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@ValidateIf((_object, value) => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:43\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user date of birth.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:21\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user email.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:26\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user first name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user last name.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:37\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user password.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/create-user.dto.ts:16\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data that is sent to the server. This property holds\ninformation about user username\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsDate,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  ValidateIf,\n} from 'class-validator';\n\n/** It's a class that defines the shape of the data that will be sent to the server when a user is\ncreated */\nexport class CreateUserDto {\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n   * information about user username */\n  @IsNotEmpty()\n  @MinLength(3)\n  username: string;\n\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n  information about user email. */\n  @IsEmail()\n  email: string;\n\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n  information about user first name. */\n  @IsNotEmpty()\n  firstName: string;\n\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n    information about user last name. */\n  @IsNotEmpty()\n  lastName: string;\n\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n    information about user password. */\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n\n  /** It's a decorator that is used to validate the data that is sent to the server. This property holds\n    information about user date of birth. */\n  @IsDate()\n  @ValidateIf((_object, value) => value !== null)\n  dateOfBirth: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeletePermissionPolicyHandler.html":{"url":"classes/DeletePermissionPolicyHandler.html","title":"class - DeletePermissionPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeletePermissionPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/permission.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the DELETE permission on the Permission resource, then they can delete a permission.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/permission.policies.ts:69\n                \n            \n\n\n            \n                \n                    \"If the user has the ability to delete a Permission, then they can delete a Permission.\"\nThe can function takes two parameters:\n\nThe action that the user is trying to perform.\nThe resource that the user is trying to perform the action on\nfunction.\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - This is the ability object that is passed to the can\nfunction.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Permission } from '../../permission/permission.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** \"If the user has the READ permission on the Permission resource, then they can read the Permission\nresource.\"\n\nThe `handle` method is called by the `can` method of the `AppAbility` class. The `handle` method is\npassed the `AppAbility` instance. The `handle` method returns a boolean value. If the value is true,\nthen the user has the permission. If the value is false, then the user does not have the permission */\nexport class ReadPermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to read the Permission model, then they can read the Permission model\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Permission);\n  }\n}\n\n/** If the user has the ability to create a permission, then they can create a permission. */\nexport class CreatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a Permission, then they can create a Permission.\"\n   *\n   * The above function is a good example of how to use the `can` function. The `can` function takes\n   * two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Permission);\n  }\n}\n\n/** If the user has the UPDATE permission on the Permission resource, then they can update permissions. */\nexport class UpdatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to update permissions, then they can update permissions\n   * @param {AppAbility} ability - AppAbility - This is the ability class that you created in the\n   * previous step.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Permission);\n  }\n}\n\n/** If the user has the DELETE permission on the Permission resource, then they can delete a permission. */\nexport class DeletePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a Permission, then they can delete a Permission.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - This is the ability object that is passed to the can\n   * function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Permission);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteRolePolicyHandler.html":{"url":"classes/DeleteRolePolicyHandler.html","title":"class - DeleteRolePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteRolePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/role.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the DELETE permission on the Role resource, then they can delete a role.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/role.policies.ts:75\n                \n            \n\n\n            \n                \n                    \"If the user has the ability to delete a role, then they can delete a role.\"\nThe can function takes two parameters:\n\nThe action that the user is trying to perform.\nThe subject that the user is trying to perform the action on\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '../../role/role.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** If the user has the READ permission on the Role resource, then they can read the role. */\nexport class ReadRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the READ permission on the Role resource, then they can read the Role resource.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Role);\n  }\n}\n\n/** If the user has the CREATE permission for the Role resource, then they can create a role. */\nexport class CreateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a role, then they can create a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Role);\n  }\n}\n\n/** If the user has the UPDATE permission on the Role resource, then they can update a role. */\nexport class UpdateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the UPDATE permission on the Role resource, then they can update the role.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform. In this case, the user is\n   * trying to update the role.\n   * The second parameter is the resource that the user is trying to perform the action on. In this\n   * case, the user is trying to update the role resource.\n   * The ability.can() function returns a boolean value. If the user has the UPDATE permission on the\n   * Role resource, then the function returns true. If the user does not have the UPDATE permission on\n   * the Role resource, then the function returns false\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Role);\n  }\n}\n\n/** If the user has the DELETE permission on the Role resource, then they can delete a role. */\nexport class DeleteRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a role, then they can delete a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The subject that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Role);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                It's a public REST controller that checks the health of the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        check\n                        \n                    \n                \n            \n            \n                \ncheck()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n            \n                \n                    Defined in src/health/health.controller.ts:31\n                \n            \n\n\n            \n                \n                    The function returns a promise that resolves to an array of health check results\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        An array of promises.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { ApiTags } from '@nestjs/swagger';\nimport {\n  HealthCheck,\n  HealthCheckService,\n  HttpHealthIndicator,\n  TypeOrmHealthIndicator,\n} from '@nestjs/terminus';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport enviroment from '../../env';\nimport { Public } from '../auth/public.factory';\n\n/** It's a public REST controller that checks the health of the application */\n@Public()\n@Controller('health')\n@ApiTags('health')\n@UseGuards(ThrottlerGuard)\nexport class HealthController {\n  constructor(\n    private health: HealthCheckService,\n    private http: HttpHealthIndicator,\n    private db: TypeOrmHealthIndicator,\n  ) {}\n\n  /**\n   * The function returns a promise that resolves to an array of health check results\n   * @returns An array of promises.\n   */\n  @Get()\n  @HealthCheck()\n  check() {\n    return this.health.check([\n      () => this.http.pingCheck('Basic Check', enviroment.APP_URL),\n      () => this.db.pingCheck('postgres'),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TerminusModule } from '@nestjs/terminus';\nimport { HealthController } from './health.controller';\nimport { HttpModule } from '@nestjs/axios';\nimport { ThrottlerModule } from '@nestjs/throttler';\n\n@Module({\n  imports: [\n    TerminusModule,\n    HttpModule,\n    ThrottlerModule.forRoot({ ttl: 60, limit: 10 }),\n  ],\n  controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPolicyHandler.html":{"url":"interfaces/IPolicyHandler.html","title":"interface - IPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/casl-ability.factory.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining an interface that is used to create a policy handler.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        handle\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/casl-ability.factory.ts:55\n                \n            \n\n\n            \n                \n                    A method that is used to check if the user has the permission to perform the action on the\nresource.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Ability } from '@casl/ability';\nimport { Injectable, SetMetadata } from '@nestjs/common';\nimport { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\n\n/** Defining the actions that can be performed on a resource. */\nexport enum PermissionAction {\n  CREATE = 'create',\n  READ = 'read',\n  UPDATE = 'update',\n  DELETE = 'delete',\n  MANAGE = 'manage',\n}\n\n/** Defining the type of the second argument of the `Ability` class. */\nexport type PermissionObjectType = any;\n/** Defining the type of the third argument of the `Ability` class. */\nexport type AppAbility = Ability;\n/** Defining the interface that is used to represent CaslPermission */\ninterface CaslPermission {\n  /** The action for the resource that the permission is for. */\n  action: PermissionAction;\n  // In our database, Invoice, Project... are called \"object\"\n  // but in CASL they are called \"subject\"\n  /** The name of the resource that the permission is for. */\n  subject: string;\n}\n/** It takes a user object and returns a Casl ability object */\n@Injectable()\nexport class CaslAbilityFactory {\n  /**\n   * It takes a user and returns an ability object that contains all the permissions that the user has\n   * @param {User} user - User - the user for whom we want to create the ability\n   * @returns An instance of the Ability class.\n   */\n  async createForUser(user: User): Promise {\n    const dbPermissions: Permission[] = user.roles.reduce(\n      (acc, it) => [...acc, ...it.permissions],\n      [],\n    );\n    const caslPermissions: CaslPermission[] = dbPermissions.map((p) => ({\n      action: p.action,\n      subject: p.resource,\n    }));\n    return new Ability(\n      caslPermissions,\n    );\n  }\n}\n\n/** Defining an interface that is used to create a policy handler. */\nexport interface IPolicyHandler {\n  /** A method that is used to check if the user has the permission to perform the action on the\n  resource. */\n  handle(ability: AppAbility): boolean;\n}\n\ntype PolicyHandlerCallback = (ability: AppAbility) => boolean;\n\n/** Defining a type that is used to create a policy handler. */\nexport type PolicyHandler = IPolicyHandler | PolicyHandlerCallback;\n\n/** A constant that is used to store the metadata of the decorated class or method. */\nexport const CHECK_POLICIES_KEY = 'check_policy';\n/**\n * It takes a list of policy handlers and adds them to the metadata of the decorated class or method\n * @param {PolicyHandler[]} handlers - PolicyHandler[] - An array of policy handlers.\n */\nexport const CheckPolicies = (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers);\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                If the route is public, then return true, otherwise, return the result of the super class's\ncanActivate method\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-auth.guard.ts:9\n                            \n                        \n\n                \n                    \n                            The constructor function is a special function that is called when a new instance of the class is\ncreated\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-auth.guard.ts:25\n                \n            \n\n\n            \n                \n                    If the route is public, return true, otherwise, return the result of the super class's canActivate\nfunction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nExecutionContext\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from './public.factory';\n\n/** If the route is public, then return true, otherwise, return the result of the super class's\ncanActivate method */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * The `constructor` function is a special function that is called when a new instance of the class is\n   * created\n   * @param {Reflector} reflector - Reflector\n   */\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * If the route is public, return true, otherwise, return the result of the super class's canActivate\n   * function\n   * @param {ExecutionContext} context - ExecutionContext\n   * @returns A boolean value.\n   */\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) {\n      return true;\n    }\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a PassportStrategy that uses the JWT strategy to validate the token\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            It takes the token from the request header, checks if it's valid, and if it is, it returns the\nuser's id\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n                    \"If the payload is valid, return the user object, otherwise throw an error.\"\nThe payload is the object that was passed to the JWT.sign() function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe payload that was sent to the server.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The user object\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport enviroment from '../../env';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n/** It's a PassportStrategy that uses the JWT strategy to validate the token */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * It takes the token from the request header, checks if it's valid, and if it is, it returns the\n   * user's id\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: enviroment.ACCESS_TOKEN_SECRET,\n      issuer: enviroment.APP_URL,\n    });\n  }\n\n  /**\n   * \"If the payload is valid, return the user object, otherwise throw an error.\"\n   *\n   * The payload is the object that was passed to the JWT.sign() function\n   * @param {any} payload - The payload that was sent to the server.\n   * @returns The user object\n   */\n  async validate(payload: any) {\n    return payload.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/login.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that has two properties, usernameOrEmail and password, and both of them are required\nand have a minimum length of 3 and 6 respectively\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                usernameOrEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/login.dto.ts:15\n                        \n                    \n\n            \n                \n                    It's a property that is required and has a minimum length of 6.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameOrEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/login.dto.ts:10\n                        \n                    \n\n            \n                \n                    It's a property that is required and has a minimum length of 3.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, MinLength } from 'class-validator';\n\n/** It's a class that has two properties, usernameOrEmail and password, and both of them are required\nand have a minimum length of 3 and 6 respectively */\nexport class LoginDto {\n  /** It's a property that is required and has a minimum length of 3. */\n  @IsNotEmpty()\n  @MinLength(3)\n  usernameOrEmail: string;\n\n  /** It's a property that is required and has a minimum length of 6. */\n  @IsNotEmpty()\n  @MinLength(6)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageDto.html":{"url":"classes/PageDto.html","title":"class - PageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/page.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a generic class that takes an array of data and a PageMetaDto object\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data\n                            \n                            \n                                    Readonly\n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: T[], meta: PageMetaDto)\n                    \n                \n                        \n                            \n                                Defined in src/pagination/page.dto.ts:14\n                            \n                        \n\n                \n                    \n                            The constructor function takes in two parameters, data and meta, and sets the data and meta\nproperties of the class to the values of the parameters.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    T[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nT[] - the data that is returned from the API\n\n\n                                                        \n                                                \n                                                \n                                                        meta\n                                                  \n                                                        \n                                                                        PageMetaDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPageMetaDto\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     T[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ApiProperty({isArray: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page.dto.ts:10\n                        \n                    \n\n            \n                \n                    It's a decorator that is used to validate the data property of the class.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PageMetaDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: () => PageMetaDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page.dto.ts:14\n                        \n                    \n\n            \n                \n                    It's a property of the class that is of type PageMetaDto.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsArray } from 'class-validator';\nimport { PageMetaDto } from './page-meta.dto';\n\n/** It's a generic class that takes an array of data and a PageMetaDto object */\nexport class PageDto {\n  /** It's a decorator that is used to validate the data property of the class. */\n  @IsArray()\n  @ApiProperty({ isArray: true })\n  readonly data: T[];\n\n  /** It's a property of the class that is of type PageMetaDto. */\n  @ApiProperty({ type: () => PageMetaDto })\n  readonly meta: PageMetaDto;\n\n  /**\n   * The constructor function takes in two parameters, data and meta, and sets the data and meta\n   * properties of the class to the values of the parameters.\n   * @param {T[]} data - T[] - the data that is returned from the API\n   * @param {PageMetaDto} meta - PageMetaDto\n   */\n  constructor(data: T[], meta: PageMetaDto) {\n    this.data = data;\n    this.meta = meta;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageMetaDto.html":{"url":"classes/PageMetaDto.html","title":"class - PageMetaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageMetaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/page-meta.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It takes a pageOptionsDto and an itemCount and returns a pageMetaDto\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                hasNextPage\n                            \n                            \n                                    Readonly\n                                hasPreviousPage\n                            \n                            \n                                    Readonly\n                                itemCount\n                            \n                            \n                                    Readonly\n                                page\n                            \n                            \n                                    Readonly\n                                pageCount\n                            \n                            \n                                    Readonly\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(undefined: PageMetaDtoParameters)\n                    \n                \n                        \n                            \n                                Defined in src/pagination/page-meta.dto.ts:28\n                            \n                        \n\n                \n                    \n                            It takes in a pageOptionsDto and an itemCount, and then it sets the page, take, itemCount,\npageCount, hasPreviousPage, and hasNextPage properties of the PageMetaDto object\nthe controller\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                        PageMetaDtoParameters\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasNextPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:28\n                        \n                    \n\n            \n                \n                    A property of the class that tells us whether there is next page or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        hasPreviousPage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:24\n                        \n                    \n\n            \n                \n                    A property of the class that tells us whether there is previous page or not.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        itemCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:16\n                        \n                    \n\n            \n                \n                    A property of the class that tells us the item count of all items existing in database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:8\n                        \n                    \n\n            \n                \n                    A property of the class that represents page number.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        pageCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:20\n                        \n                    \n\n            \n                \n                    A property of the class that tells us the total number of pages there is.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-meta.dto.ts:12\n                        \n                    \n\n            \n                \n                    A property of the class that represents how many items per page you want to take.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { PageMetaDtoParameters } from './page-meta-dto-parameters.interface';\n\n/** It takes a pageOptionsDto and an itemCount and returns a pageMetaDto */\nexport class PageMetaDto {\n  /** A property of the class that represents page number. */\n  @ApiProperty()\n  readonly page: number;\n\n  /** A property of the class that represents how many items per page you want to take. */\n  @ApiProperty()\n  readonly take: number;\n\n  /** A property of the class that tells us the item count of all items existing in database. */\n  @ApiProperty()\n  readonly itemCount: number;\n\n  /** A property of the class that tells us the total number of pages there is. */\n  @ApiProperty()\n  readonly pageCount: number;\n\n  /** A property of the class that tells us whether there is previous page or not. */\n  @ApiProperty()\n  readonly hasPreviousPage: boolean;\n\n  /** A property of the class that tells us whether there is next page or not. */\n  @ApiProperty()\n  readonly hasNextPage: boolean;\n\n  /**\n   * It takes in a pageOptionsDto and an itemCount, and then it sets the page, take, itemCount,\n   * pageCount, hasPreviousPage, and hasNextPage properties of the PageMetaDto object\n   * @param {PageMetaDtoParameters}  - pageOptionsDto - the pageOptionsDto object that was passed in from\n   * the controller\n   */\n  constructor({ pageOptionsDto, itemCount }: PageMetaDtoParameters) {\n    this.page = pageOptionsDto.page;\n    this.take = pageOptionsDto.take;\n    this.itemCount = itemCount;\n    this.pageCount = Math.ceil(this.itemCount / this.take);\n    this.hasPreviousPage = this.page > 1;\n    this.hasNextPage = this.page \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PageMetaDtoParameters.html":{"url":"interfaces/PageMetaDtoParameters.html","title":"interface - PageMetaDtoParameters","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PageMetaDtoParameters\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/page-meta-dto-parameters.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining the interface for the parameters that will be passed into the PageMetaDto class.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            pageOptionsDto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The total number of items in the database.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pageOptionsDto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pageOptionsDto:         PageOptionsDto\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PageOptionsDto\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defining the type of the pageOptionsDto parameter.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { PageOptionsDto } from './page-options.dto';\n\n/** Defining the interface for the parameters that will be passed into the PageMetaDto class. */\nexport interface PageMetaDtoParameters {\n  /** Defining the type of the `pageOptionsDto` parameter. */\n  pageOptionsDto: PageOptionsDto;\n  /** The total number of items in the database. */\n  itemCount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PageOptionsDto.html":{"url":"classes/PageOptionsDto.html","title":"class - PageOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PageOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pagination/page-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that defines the shape of the query parameters that will be used to paginate a list of\nitems\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                order\n                            \n                            \n                                    Readonly\n                                    Optional\n                                page\n                            \n                            \n                                    Readonly\n                                    Optional\n                                take\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    skip\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Order\n\n                    \n                \n                \n                    \n                        Default value : Order.ASC\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: Order, default: undefined})@IsEnum(Order)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-options.dto.ts:13\n                        \n                    \n\n            \n                \n                    Defining the shape of the query parameters that will be used to paginate a list of items.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, default: 1})@Type(undefined)@IsInt()@Min(1)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-options.dto.ts:24\n                        \n                    \n\n            \n                \n                    Defining the shape of the query parameters that will be used to paginate a list of items.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                            Optional\n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({minimum: 1, maximum: 100, default: 10})@Type(undefined)@IsInt()@Min(1)@Max(100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/pagination/page-options.dto.ts:37\n                        \n                    \n\n            \n                \n                    Defining the shape of the query parameters that will be used to paginate a list of items.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        skip\n                    \n                \n\n                \n                    \n                        getskip()\n                    \n                \n                            \n                                \n                                    Defined in src/pagination/page-options.dto.ts:43\n                                \n                            \n                    \n                        \n                                The skip function returns the number of records to skip when retrieving data from the database\n\n\n                                \n                                \n                                \n                                    Returns :         number\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsEnum, IsInt, IsOptional, Max, Min } from 'class-validator';\nimport { Order } from './page-order.model';\n\n/** It's a class that defines the shape of the query parameters that will be used to paginate a list of\nitems */\nexport class PageOptionsDto {\n  /** Defining the shape of the query parameters that will be used to paginate a list of items. */\n  @ApiPropertyOptional({ enum: Order, default: Order.ASC })\n  @IsEnum(Order)\n  @IsOptional()\n  readonly order?: Order = Order.ASC;\n\n  /** Defining the shape of the query parameters that will be used to paginate a list of items. */\n  @ApiPropertyOptional({\n    minimum: 1,\n    default: 1,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @IsOptional()\n  readonly page?: number = 1;\n\n  /** Defining the shape of the query parameters that will be used to paginate a list of items. */\n  @ApiPropertyOptional({\n    minimum: 1,\n    maximum: 100,\n    default: 10,\n  })\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  @Max(100)\n  @IsOptional()\n  readonly take?: number = 10;\n\n  /**\n   * The skip function returns the number of records to skip when retrieving data from the database\n   * @returns The number of items to skip.\n   */\n  get skip(): number {\n    return (this.page - 1) * this.take;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Permission.html":{"url":"entities/Permission.html","title":"entity - Permission","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Permission\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that represents a permission, which is a combination of an action and a resource\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                dateCreated\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                id\n                            \n                            \n                                resource\n                            \n                            \n                                roles\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionAction\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:23\n                        \n                    \n\n            \n                \n                    It's a property that tells TypeORM to create a column in the database table. This propperty holds information about permission action\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:38\n                        \n                    \n\n            \n                \n                    It's a property that tells TypeORM to create a column in the database table. This propperty holds\ninformation about date of creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:43\n                        \n                    \n\n            \n                \n                    It's a property that tells TypeORM to create a column in the database table. This propperty holds\ninformation about date of update\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:19\n                        \n                    \n\n            \n                \n                    It's a property that represents TypeORM primary key of the table.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:28\n                        \n                    \n\n            \n                \n                    It's a property that tells TypeORM to create a column in the database table. This propperty holds\ninformation about permission resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, roles => roles.permissions)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.entity.ts:33\n                        \n                    \n\n            \n                \n                    It's a property that tells TypeORM to create a many to many relationship in the database. This propperty holds\ninformation about permission roles\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { PermissionAction } from '../auth/casl-ability.factory';\nimport { Role } from '../role/role.entity';\n\n/** It's a class that represents a permission, which is a combination of an action and a resource */\n@Entity()\n@Unique(['action', 'resource'])\nexport class Permission {\n  /** It's a property that represents TypeORM primary key of the table. */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /** It's a property that tells TypeORM to create a column in the database table. This propperty holds information about permission action */\n  @Column()\n  action: PermissionAction;\n\n  /** It's a property that tells TypeORM to create a column in the database table. This propperty holds\n  information about permission resource */\n  @Column()\n  resource: string;\n\n  /** It's a property that tells TypeORM to create a many to many relationship in the database. This propperty holds\n    information about permission roles */\n  @ManyToMany(() => Role, (roles) => roles.permissions)\n  roles: Role[];\n\n  /** It's a property that tells TypeORM to create a column in the database table. This propperty holds\ninformation about date of creation */\n  @CreateDateColumn()\n  dateCreated: Date;\n\n  /** It's a property that tells TypeORM to create a column in the database table. This propperty holds\n  information about date of update */\n  @UpdateDateColumn()\n  dateUpdated: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PermissionController.html":{"url":"controllers/PermissionController.html","title":"controller - PermissionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PermissionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                permission\n            \n\n\n            \n                Description\n            \n            \n                This class is a REST controller that handles all the CRUD operations for the Permission entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPermission\n                            \n                            \n                                deletePermission\n                            \n                            \n                                findAllPermissions\n                            \n                            \n                                findPermissionById\n                            \n                            \n                                updatePermission\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createPermission\n                        \n                    \n                \n            \n            \n                \ncreatePermission(permissionDto: PermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Version('1')@CheckPolicies(new CreatePermissionPolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:66\n                \n            \n\n\n            \n                \n                    This is a method that is called when a POST request is made to the /permission endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissionDto\n                                    \n                                                PermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletePermission\n                        \n                    \n                \n            \n            \n                \ndeletePermission(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Version('1')@CheckPolicies(new DeletePermissionPolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:58\n                \n            \n\n\n            \n                \n                    This is a method that is called when a DELETE request is made to the /permission/:id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllPermissions\n                        \n                    \n                \n            \n            \n                \nfindAllPermissions(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Version('1')@CheckPolicies(new ReadPermissionPolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:42\n                \n            \n\n\n            \n                \n                    This is a method that is called when a GET request is made to the /permission endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findPermissionById\n                        \n                    \n                \n            \n            \n                \nfindPermissionById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Version('1')@CheckPolicies(new ReadPermissionPolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:50\n                \n            \n\n\n            \n                \n                    This is a method that is called when a GET request is made to the /permission/:id endpoint.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatePermission\n                        \n                    \n                \n            \n            \n                \nupdatePermission(permissionDto: PermissionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@Version('1')@CheckPolicies(new UpdatePermissionPolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/permission/permission.controller.ts:74\n                \n            \n\n\n            \n                \n                    Updating the permission.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    permissionDto\n                                    \n                                                PermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n  Version,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { CheckPolicies } from '../auth/casl-ability.factory';\nimport { PoliciesGuard } from '../auth/policies.guard';\nimport {\n  CreatePermissionPolicyHandler,\n  DeletePermissionPolicyHandler,\n  ReadPermissionPolicyHandler,\n  UpdatePermissionPolicyHandler,\n} from '../auth/policies/permission.policies';\nimport { PageOptionsDto } from '../pagination/page-options.dto';\nimport { PermissionDto } from './permission.dto';\nimport { PermissionService } from './permission.service';\n\n/** This class is a REST controller that handles all the CRUD operations for the Permission entity */\n@Controller('permission')\n@ApiTags('permission')\n@UseGuards(PoliciesGuard)\n@UseGuards(ThrottlerGuard)\n@ApiBearerAuth()\nexport class PermissionController {\n  @Inject()\n  private permissionService: PermissionService;\n\n  /** This is a method that is called when a GET request is made to the /permission endpoint. */\n  @Get()\n  @Version('1')\n  @CheckPolicies(new ReadPermissionPolicyHandler())\n  findAllPermissions(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.permissionService.findAllPermissionsPageable(pageOptionsDto);\n  }\n\n  /** This is a method that is called when a GET request is made to the /permission/:id endpoint. */\n  @Get(':id')\n  @Version('1')\n  @CheckPolicies(new ReadPermissionPolicyHandler())\n  findPermissionById(@Param('id') id: number) {\n    return this.permissionService.findPermissionById(id);\n  }\n\n  /** This is a method that is called when a DELETE request is made to the /permission/:id endpoint. */\n  @Delete(':id')\n  @Version('1')\n  @CheckPolicies(new DeletePermissionPolicyHandler())\n  deletePermission(@Param('id') id: number) {\n    return this.permissionService.deletePermissionById(id);\n  }\n\n  /** This is a method that is called when a POST request is made to the /permission endpoint. */\n  @Post()\n  @Version('1')\n  @CheckPolicies(new CreatePermissionPolicyHandler())\n  createPermission(@Body() permissionDto: PermissionDto) {\n    return this.permissionService.createPermission(permissionDto);\n  }\n\n  /** Updating the permission. */\n  @Put()\n  @Version('1')\n  @CheckPolicies(new UpdatePermissionPolicyHandler())\n  updatePermission(@Body() permissionDto: PermissionDto) {\n    return this.permissionService.updatePermission(permissionDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PermissionDto.html":{"url":"classes/PermissionDto.html","title":"class - PermissionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PermissionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a DTO that maps to a Permission entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                action\n                            \n                            \n                                dateCreated\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                id\n                            \n                            \n                                resource\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fromModel\n                            \n                            \n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PermissionAction\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.dto.ts:12\n                        \n                    \n\n            \n                \n                    It's a property of the Permission entity that represents action\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.dto.ts:19\n                        \n                    \n\n            \n                \n                    It's a property of the Permission entity that represents date of creation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.dto.ts:21\n                        \n                    \n\n            \n                \n                    It's a property of the Permission entity that represents date of update\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.dto.ts:8\n                        \n                    \n\n            \n                \n                    It's a property of the Permission entity that represents id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.dto.ts:17\n                        \n                    \n\n            \n                \n                    It's a property of the Permission entity that represents resource\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fromModel\n                        \n                    \n                \n            \n            \n                \nfromModel(permission: Permission)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.dto.ts:39\n                \n            \n\n\n            \n                \n                    It takes a Permission object and copies its properties to the current object\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    permission\n                                    \n                                                Permission\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPermission - this is the model that we are converting from\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toModel\n                        \n                    \n                \n            \n            \n                \ntoModel()\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.dto.ts:27\n                \n            \n\n\n            \n                \n                    It takes the data from the form and puts it into a new Permission object\n\n\n                    \n                    \n                    \n                        Returns :         Permission\n\n                    \n                    \n                        A Permission object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { PermissionAction } from '../auth/casl-ability.factory';\nimport { Permission } from './permission.entity';\n\n/** It's a DTO that maps to a Permission entity */\nexport class PermissionDto {\n  /** It's a property of the Permission entity that represents id */\n  id: number | null;\n\n  /** It's a property of the Permission entity that represents action */\n  @IsNotEmpty()\n  action: PermissionAction;\n\n  /** It's a property of the Permission entity that represents resource */\n  @IsNotEmpty()\n  @IsString()\n  resource: string;\n  /** It's a property of the Permission entity that represents date of creation */\n  dateCreated: Date | null;\n  /** It's a property of the Permission entity that represents date of update */\n  dateUpdated: Date | null;\n\n  /**\n   * It takes the data from the form and puts it into a new Permission object\n   * @returns A Permission object\n   */\n  toModel(): Permission {\n    const permission = new Permission();\n    permission.id = this.id;\n    permission.action = this.action;\n    permission.resource = this.resource;\n    return permission;\n  }\n\n  /**\n   * It takes a Permission object and copies its properties to the current object\n   * @param {Permission} permission - Permission - this is the model that we are converting from\n   */\n  fromModel(permission: Permission) {\n    this.id = permission.id;\n    this.action = permission.action;\n    this.resource = permission.resource;\n    this.dateCreated = permission.dateCreated;\n    this.dateUpdated = permission.dateUpdated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PermissionModule.html":{"url":"modules/PermissionModule.html","title":"module - PermissionModule","body":"\n                   \n\n\n\n\n    Modules\n    PermissionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_imports\n\n\n\ncluster_PermissionModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nPermissionModule\n\nPermissionModule\n\nPermissionModule -->\n\nAuthModule->PermissionModule\n\n\n\n\n\nPermissionService\n\nPermissionService\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/permission/permission.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PermissionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PermissionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '../auth/auth.module';\nimport { PermissionController } from './permission.controller';\nimport { Permission } from './permission.entity';\nimport { PermissionService } from './permission.service';\n\n@Module({\n  imports: [AuthModule, TypeOrmModule.forFeature([Permission])],\n  providers: [PermissionService],\n  controllers: [PermissionController],\n})\nexport class PermissionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PermissionService.html":{"url":"injectables/PermissionService.html","title":"injectable - PermissionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PermissionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/permission/permission.service.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a service class that provides methods for CRUD operations on the Permission entity\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                permissionRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPermission\n                            \n                            \n                                    Async\n                                deletePermissionById\n                            \n                            \n                                    Async\n                                findAllPermissionsPageable\n                            \n                            \n                                    Async\n                                findPermissionById\n                            \n                            \n                                    Async\n                                updatePermission\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPermission(permissionDto: PermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:91\n                \n            \n\n\n            \n                \n                    It creates a new permission and returns it\ncreate the permission.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    permissionDto\n                                    \n                                                PermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPermissionDto - This is the DTO that we're going to use to\ncreate the permission.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A PermissionDto\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePermissionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePermissionById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:74\n                \n            \n\n\n            \n                \n                    It deletes a permission from the database by its id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber - The id of the permission to be deleted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The result of the delete operation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPermissionsPageable\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPermissionsPageable(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:22\n                \n            \n\n\n            \n                \n                    It returns a page of permissions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThis is a class that contains the following properties:\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A PageDto object with a list of PermissionDto objects and a PageMetaDto object.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findPermissionById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findPermissionById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:56\n                \n            \n\n\n            \n                \n                    It finds a permission by its id and returns it as a PermissionDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber - the id of the permission we want to find\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A PermissionDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePermission\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePermission(permissionDto: PermissionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/permission/permission.service.ts:106\n                \n            \n\n\n            \n                \n                    It updates a permission in the database\nupdate the permission.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    permissionDto\n                                    \n                                                PermissionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPermissionDto - This is the DTO that we're going to use to\nupdate the permission.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A PermissionDto\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permissionRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Permission)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/permission/permission.service.ts:15\n                        \n                    \n\n            \n                \n                    It's a TypeORM Repository that provides methods for CRUD operations on the Permission entity.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../pagination/page-meta.dto';\nimport { PageOptionsDto } from '../pagination/page-options.dto';\nimport { PageDto } from '../pagination/page.dto';\nimport { Repository } from 'typeorm';\nimport { PermissionDto } from './permission.dto';\nimport { Permission } from './permission.entity';\n\n/** It's a service class that provides methods for CRUD operations on the Permission entity */\n@Injectable()\nexport class PermissionService {\n  /** It's a TypeORM Repository that provides methods for CRUD operations on the Permission entity. */\n  @InjectRepository(Permission)\n  private permissionRepository: Repository;\n\n  /**\n   * It returns a page of permissions\n   * @param {PageOptionsDto} pageOptionsDto - This is a class that contains the following properties:\n   * @returns A PageDto object with a list of PermissionDto objects and a PageMetaDto object.\n   */\n  async findAllPermissionsPageable(\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder =\n      this.permissionRepository.createQueryBuilder('permissions');\n\n    queryBuilder\n      .orderBy('resource', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(\n      entities.map((permission) => {\n        /* istanbul ignore next */\n        const dto = new PermissionDto();\n        /* istanbul ignore next */\n        dto.fromModel(permission);\n        /* istanbul ignore next */\n        return dto;\n      }),\n      pageMetaDto,\n    );\n  }\n\n  /**\n   * It finds a permission by its id and returns it as a PermissionDto\n   * @param {number} id - number - the id of the permission we want to find\n   * @returns A PermissionDto object\n   */\n  async findPermissionById(id: number): Promise {\n    const result = await this.permissionRepository.findOne(id);\n    if (result) {\n      const dto = new PermissionDto();\n      dto.fromModel(result);\n      return dto;\n    } else {\n      throw new NotFoundException(\n        'An permission with id: ' + id + ' has not been found in database',\n      );\n    }\n  }\n\n  /**\n   * It deletes a permission from the database by its id\n   * @param {number} id - number - The id of the permission to be deleted\n   * @returns The result of the delete operation.\n   */\n  async deletePermissionById(id: number) {\n    const result = await this.permissionRepository.findOne(id);\n    if (result) {\n      return this.permissionRepository.delete(id);\n    } else {\n      throw new NotFoundException(\n        'An permission with id: ' + id + ' has not been found in database',\n      );\n    }\n  }\n\n  /**\n   * It creates a new permission and returns it\n   * @param {PermissionDto} permissionDto - PermissionDto - This is the DTO that we're going to use to\n   * create the permission.\n   * @returns A PermissionDto\n   */\n  async createPermission(permissionDto: PermissionDto): Promise {\n    const permission = await this.permissionRepository.save(\n      permissionDto.toModel(),\n    );\n    const dto = new PermissionDto();\n    dto.fromModel(permission);\n    return dto;\n  }\n\n  /**\n   * It updates a permission in the database\n   * @param {PermissionDto} permissionDto - PermissionDto - This is the DTO that we're going to use to\n   * update the permission.\n   * @returns A PermissionDto\n   */\n  async updatePermission(permissionDto: PermissionDto): Promise {\n    await this.permissionRepository.save(permissionDto.toModel());\n    const permission = await this.permissionRepository.findOne(\n      permissionDto.id,\n    );\n    const dto = new PermissionDto();\n    dto.fromModel(permission);\n    return dto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/PoliciesGuard.html":{"url":"guards/PoliciesGuard.html","title":"guard - PoliciesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    PoliciesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/policies.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    It takes the list of policy handlers from the controller's metadata, creates an ability for the\ncurrent user, and executes each policy handler\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                execPolicyHandler\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, caslAbilityFactory: CaslAbilityFactory)\n                    \n                \n                        \n                            \n                                Defined in src/auth/policies.guard.ts:13\n                            \n                        \n\n                \n                    \n                            The CaslAbilityFactory is a service that creates an instance of the CaslAbility class\nthe ability.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThis is a service that allows us to get metadata from a class.\n\n\n                                                        \n                                                \n                                                \n                                                        caslAbilityFactory\n                                                  \n                                                        \n                                                                        CaslAbilityFactory\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThis is the factory that will be used to create\nthe ability.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies.guard.ts:31\n                \n            \n\n\n            \n                \n                    It gets the list of policies from the handler metadata, creates an ability for the user, and then\nexecutes each policy handler\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nExecutionContext - This is the context of the request.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        execPolicyHandler\n                        \n                    \n                \n            \n            \n                \n                    \n                    execPolicyHandler(handler: PolicyHandler, ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies.guard.ts:54\n                \n            \n\n\n            \n                \n                    If the handler is a function, call it with the ability as the argument. If the handler is an\nobject, call its handle method with the ability as the argument\nexecute.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    handler\n                                    \n                                                PolicyHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPolicyHandler - this is the policy handler that we're going to\nexecute.\n\n\n                                    \n                                \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe ability object that is being checked.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value\n\n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport {\n  AppAbility,\n  CaslAbilityFactory,\n  CHECK_POLICIES_KEY,\n  PolicyHandler,\n} from './casl-ability.factory';\n\n/** It takes the list of policy handlers from the controller's metadata, creates an ability for the\ncurrent user, and executes each policy handler */\n@Injectable()\nexport class PoliciesGuard implements CanActivate {\n  /**\n   * The `CaslAbilityFactory` is a service that creates an instance of the `CaslAbility` class\n   * @param {Reflector} reflector - This is a service that allows us to get metadata from a class.\n   * @param {CaslAbilityFactory} caslAbilityFactory - This is the factory that will be used to create\n   * the ability.\n   */\n  constructor(\n    private reflector: Reflector,\n    private caslAbilityFactory: CaslAbilityFactory,\n  ) {}\n\n  /**\n   * It gets the list of policies from the handler metadata, creates an ability for the user, and then\n   * executes each policy handler\n   * @param {ExecutionContext} context - ExecutionContext - This is the context of the request.\n   * @returns A boolean value.\n   */\n  async canActivate(context: ExecutionContext): Promise {\n    const policyHandlers =\n      this.reflector.get(\n        CHECK_POLICIES_KEY,\n        context.getHandler(),\n      ) || [];\n\n    const { user } = context.switchToHttp().getRequest();\n    const ability = await this.caslAbilityFactory.createForUser(user);\n\n    return policyHandlers.every((handler) =>\n      this.execPolicyHandler(handler, ability),\n    );\n  }\n\n  /**\n   * If the handler is a function, call it with the ability as the argument. If the handler is an\n   * object, call its handle method with the ability as the argument\n   * @param {PolicyHandler} handler - PolicyHandler - this is the policy handler that we're going to\n   * execute.\n   * @param {AppAbility} ability - The ability object that is being checked.\n   * @returns A boolean value\n   */\n  private execPolicyHandler(handler: PolicyHandler, ability: AppAbility) {\n    if (typeof handler === 'function') {\n      return handler(ability);\n    }\n    return handler.handle(ability);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReadPermissionPolicyHandler.html":{"url":"classes/ReadPermissionPolicyHandler.html","title":"class - ReadPermissionPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReadPermissionPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/permission.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                \"If the user has the READ permission on the Permission resource, then they can read the Permission\nresource.\"\nThe handle method is called by the can method of the AppAbility class. The handle method is\npassed the AppAbility instance. The handle method returns a boolean value. If the value is true,\nthen the user has the permission. If the value is false, then the user does not have the permission\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/permission.policies.ts:20\n                \n            \n\n\n            \n                \n                    If the user has the ability to read the Permission model, then they can read the Permission model\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Permission } from '../../permission/permission.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** \"If the user has the READ permission on the Permission resource, then they can read the Permission\nresource.\"\n\nThe `handle` method is called by the `can` method of the `AppAbility` class. The `handle` method is\npassed the `AppAbility` instance. The `handle` method returns a boolean value. If the value is true,\nthen the user has the permission. If the value is false, then the user does not have the permission */\nexport class ReadPermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to read the Permission model, then they can read the Permission model\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Permission);\n  }\n}\n\n/** If the user has the ability to create a permission, then they can create a permission. */\nexport class CreatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a Permission, then they can create a Permission.\"\n   *\n   * The above function is a good example of how to use the `can` function. The `can` function takes\n   * two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Permission);\n  }\n}\n\n/** If the user has the UPDATE permission on the Permission resource, then they can update permissions. */\nexport class UpdatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to update permissions, then they can update permissions\n   * @param {AppAbility} ability - AppAbility - This is the ability class that you created in the\n   * previous step.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Permission);\n  }\n}\n\n/** If the user has the DELETE permission on the Permission resource, then they can delete a permission. */\nexport class DeletePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a Permission, then they can delete a Permission.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - This is the ability object that is passed to the can\n   * function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Permission);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReadRolePolicyHandler.html":{"url":"classes/ReadRolePolicyHandler.html","title":"class - ReadRolePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReadRolePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/role.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the READ permission on the Role resource, then they can read the role.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/role.policies.ts:19\n                \n            \n\n\n            \n                \n                    \"If the user has the READ permission on the Role resource, then they can read the Role resource.\"\nThe ability.can() function takes two parameters:\nThe first parameter is the action that the user is trying to perform\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '../../role/role.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** If the user has the READ permission on the Role resource, then they can read the role. */\nexport class ReadRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the READ permission on the Role resource, then they can read the Role resource.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Role);\n  }\n}\n\n/** If the user has the CREATE permission for the Role resource, then they can create a role. */\nexport class CreateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a role, then they can create a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Role);\n  }\n}\n\n/** If the user has the UPDATE permission on the Role resource, then they can update a role. */\nexport class UpdateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the UPDATE permission on the Role resource, then they can update the role.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform. In this case, the user is\n   * trying to update the role.\n   * The second parameter is the resource that the user is trying to perform the action on. In this\n   * case, the user is trying to update the role resource.\n   * The ability.can() function returns a boolean value. If the user has the UPDATE permission on the\n   * Role resource, then the function returns true. If the user does not have the UPDATE permission on\n   * the Role resource, then the function returns false\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Role);\n  }\n}\n\n/** If the user has the DELETE permission on the Role resource, then they can delete a role. */\nexport class DeleteRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a role, then they can delete a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The subject that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Role);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RefreshTokenDto.html":{"url":"classes/RefreshTokenDto.html","title":"class - RefreshTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RefreshTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/refresh-token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a DTO that contains a single property called refresh_token\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/refresh-token.dto.ts:7\n                        \n                    \n\n            \n                \n                    It's a property of the class RefreshTokenDto.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\n\n/** It's a DTO that contains a single property called refresh_token */\nexport class RefreshTokenDto {\n  /** It's a property of the class RefreshTokenDto. */\n  @IsNotEmpty()\n  refresh_token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a class that represents a role, and it has a name, permissions, users, and dates for when it\nwas created and updated. A Role can have many Permissions and many Users\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateCreated\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                permissions\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Index()@Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Permission[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, permissions => permissions.roles, {nullable: true, eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, users => users.roles, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/** It's a class that represents a role, and it has a name, permissions, users, and dates for when it\nwas created and updated. A Role can have many Permissions and many Users */\n@Entity()\nexport class Role {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index()\n  @Column({ unique: true })\n  name: string;\n\n  @ManyToMany(() => Permission, (permissions) => permissions.roles, {\n    nullable: true,\n    eager: true,\n  })\n  @JoinTable()\n  permissions: Permission[];\n\n  @ManyToMany(() => User, (users) => users.roles, { nullable: true })\n  users: User[];\n\n  @CreateDateColumn()\n  dateCreated: Date;\n\n  @UpdateDateColumn()\n  dateUpdated: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RoleController.html":{"url":"controllers/RoleController.html","title":"controller - RoleController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RoleController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                role\n            \n\n\n            \n                Description\n            \n            \n                It's a REST controller that handles CRUD operations for the Role entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                assignPermissions\n                            \n                            \n                                assignUsers\n                            \n                            \n                                createRole\n                            \n                            \n                                deleteRole\n                            \n                            \n                                findAllRoles\n                            \n                            \n                                findRoleById\n                            \n                            \n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        assignPermissions\n                        \n                    \n                \n            \n            \n                \nassignPermissions(queryParams: AssignRolePermissionsQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('assignPermissions')@Version('1')@CheckPolicies(new UpdateRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:112\n                \n            \n\n\n            \n                \n                    It takes a roleId and an array of permissionIds as query parameters, and returns a boolean value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                AssignRolePermissionsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAssignRolePermissionsQuery\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The return type is a Promise of type Role.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        assignUsers\n                        \n                    \n                \n            \n            \n                \nassignUsers(queryParams: AssignRoleUsersQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('assignUsers')@Version('1')@CheckPolicies(new UpdateRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:128\n                \n            \n\n\n            \n                \n                    It takes a query parameter called roleId and an array of user ids called userIds and assigns the\nusers to the role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    queryParams\n                                    \n                                                AssignRoleUsersQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAssignRoleUsersQuery\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The return type is a Promise of an array of Role objects.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRole\n                        \n                    \n                \n            \n            \n                \ncreateRole(roleDto: RoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@Version('1')@CheckPolicies(new CreateRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:87\n                \n            \n\n\n            \n                \n                    The function takes a roleDto object as a parameter, and returns the result of the createRole\nfunction in the roleService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleDto\n                                    \n                                                RoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThis is the object that will be passed to the createRole() method.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The createRole method is being returned.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteRole\n                        \n                    \n                \n            \n            \n                \ndeleteRole(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@Version('1')@CheckPolicies(new DeleteRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:74\n                \n            \n\n\n            \n                \n                    It takes an id as a parameter, and then calls the deleteRoleById() function in the roleService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of the role to be deleted.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The deleteRoleById method is being called on the roleService.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllRoles\n                        \n                    \n                \n            \n            \n                \nfindAllRoles(pageOptionsDto: PageOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@Version('1')@CheckPolicies(new ReadRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:49\n                \n            \n\n\n            \n                \n                    It takes a query parameter, pageOptionsDto, and passes it to the\nroleService.findAllRolesPageable() function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPageOptionsDto\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A pageable list of roles.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findRoleById\n                        \n                    \n                \n            \n            \n                \nfindRoleById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@Version('1')@CheckPolicies(new ReadRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:62\n                \n            \n\n\n            \n                \n                    The function takes in a parameter called id, which is a number, and then returns the result of the\nfindRoleById function in the roleService\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of the role to be retrieved.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The role with the given id.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRole\n                        \n                    \n                \n            \n            \n                \nupdateRole(roleDto: RoleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@Version('1')@CheckPolicies(new UpdateRolePolicyHandler())\n                \n            \n\n            \n                \n                    Defined in src/role/role.controller.ts:100\n                \n            \n\n\n            \n                \n                    It takes a roleDto object as a parameter, and then passes it to the roleService.updateRole()\nfunction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleDto\n                                    \n                                                RoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThis is the object that will be passed to the method.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The return type is a Promise of type Role.\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Param,\n  Post,\n  Put,\n  Query,\n  UseGuards,\n  Version,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { ThrottlerGuard } from '@nestjs/throttler';\nimport { CheckPolicies } from '../auth/casl-ability.factory';\nimport { PoliciesGuard } from '../auth/policies.guard';\nimport {\n  CreateRolePolicyHandler,\n  DeleteRolePolicyHandler,\n  ReadRolePolicyHandler,\n  UpdateRolePolicyHandler,\n} from '../auth/policies/role.policies';\nimport { PageOptionsDto } from '../pagination/page-options.dto';\nimport { AssignRolePermissionsQuery } from './asign-role-permissions.dto';\nimport { AssignRoleUsersQuery } from './asign-role-users.dto';\nimport { RoleDto } from './role.dto';\nimport { RoleService } from './role.service';\n\n/** It's a REST controller that handles CRUD operations for the Role entity */\n@Controller('role')\n@ApiTags('role')\n@UseGuards(PoliciesGuard)\n@UseGuards(ThrottlerGuard)\n@ApiBearerAuth()\nexport class RoleController {\n  @Inject()\n  private roleService: RoleService;\n\n  /**\n   * It takes a query parameter, pageOptionsDto, and passes it to the\n   * roleService.findAllRolesPageable() function\n   * @param {PageOptionsDto} pageOptionsDto - PageOptionsDto\n   * @returns A pageable list of roles.\n   */\n  @Get()\n  @Version('1')\n  @CheckPolicies(new ReadRolePolicyHandler())\n  findAllRoles(@Query() pageOptionsDto: PageOptionsDto) {\n    return this.roleService.findAllRolesPageable(pageOptionsDto);\n  }\n\n  /**\n   * The function takes in a parameter called id, which is a number, and then returns the result of the\n   * findRoleById function in the roleService\n   * @param {number} id - The id of the role to be retrieved.\n   * @returns The role with the given id.\n   */\n  @Get(':id')\n  @Version('1')\n  @CheckPolicies(new ReadRolePolicyHandler())\n  findRoleById(@Param('id') id: number) {\n    return this.roleService.findRoleById(id);\n  }\n\n  /**\n   * It takes an id as a parameter, and then calls the deleteRoleById() function in the roleService\n   * @param {number} id - The id of the role to be deleted.\n   * @returns The deleteRoleById method is being called on the roleService.\n   */\n  @Delete(':id')\n  @Version('1')\n  @CheckPolicies(new DeleteRolePolicyHandler())\n  deleteRole(@Param('id') id: number) {\n    return this.roleService.deleteRoleById(id);\n  }\n\n  /**\n   * The function takes a roleDto object as a parameter, and returns the result of the createRole\n   * function in the roleService\n   * @param {RoleDto} roleDto - This is the object that will be passed to the createRole() method.\n   * @returns The createRole method is being returned.\n   */\n  @Post()\n  @Version('1')\n  @CheckPolicies(new CreateRolePolicyHandler())\n  createRole(@Body() roleDto: RoleDto) {\n    return this.roleService.createRole(roleDto);\n  }\n\n  /**\n   * It takes a roleDto object as a parameter, and then passes it to the roleService.updateRole()\n   * function\n   * @param {RoleDto} roleDto - This is the object that will be passed to the method.\n   * @returns The return type is a Promise of type Role.\n   */\n  @Put()\n  @Version('1')\n  @CheckPolicies(new UpdateRolePolicyHandler())\n  updateRole(@Body() roleDto: RoleDto) {\n    return this.roleService.updateRole(roleDto);\n  }\n\n  /**\n   * It takes a roleId and an array of permissionIds as query parameters, and returns a boolean value\n   * @param {AssignRolePermissionsQuery} queryParams - AssignRolePermissionsQuery\n   * @returns The return type is a Promise of type Role.\n   */\n  @Post('assignPermissions')\n  @Version('1')\n  @CheckPolicies(new UpdateRolePolicyHandler())\n  assignPermissions(@Query() queryParams: AssignRolePermissionsQuery) {\n    return this.roleService.assignPermissions(\n      queryParams.roleId,\n      queryParams.permissionIds,\n    );\n  }\n\n  /**\n   * It takes a query parameter called `roleId` and an array of user ids called `userIds` and assigns the\n   * users to the role\n   * @param {AssignRoleUsersQuery} queryParams - AssignRoleUsersQuery\n   * @returns The return type is a Promise of an array of Role objects.\n   */\n  @Post('assignUsers')\n  @Version('1')\n  @CheckPolicies(new UpdateRolePolicyHandler())\n  assignUsers(@Query() queryParams: AssignRoleUsersQuery) {\n    return this.roleService.assignUsers(\n      queryParams.roleId,\n      queryParams.userIds,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RoleDto.html":{"url":"classes/RoleDto.html","title":"class - RoleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RoleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a DTO that represents a Role entity\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dateCreated\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fromModel\n                            \n                            \n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                    \n                        \n                                Defined in src/role/role.dto.ts:12\n                        \n                    \n\n            \n                \n                    It's a property that is used to store the date when the role was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Date | null\n\n                    \n                \n                    \n                        \n                                Defined in src/role/role.dto.ts:14\n                        \n                    \n\n            \n                \n                    It's a property that is used to store the date when the role was updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/role/role.dto.ts:7\n                        \n                    \n\n            \n                \n                    It's a property that is used to store the id of the role.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.dto.ts:10\n                        \n                    \n\n            \n                \n                    It's a property that is used to store the name of the role.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fromModel\n                        \n                    \n                \n            \n            \n                \nfromModel(role: Role)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.dto.ts:32\n                \n            \n\n\n            \n                \n                    It takes a Role object and copies the values of its properties to the properties of the current\nobject\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    role\n                                    \n                                                Role\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRole - this is the model that we are converting from\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toModel\n                        \n                    \n                \n            \n            \n                \ntoModel()\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.dto.ts:20\n                \n            \n\n\n            \n                \n                    It converts a RoleDto object to a Role object\n\n\n                    \n                    \n                    \n                        Returns :         Role\n\n                    \n                    \n                        A Role object\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty } from 'class-validator';\nimport { Role } from './role.entity';\n\n/** It's a DTO that represents a Role entity */\nexport class RoleDto {\n  /** It's a property that is used to store the id of the role. */\n  id: number | null;\n  /** It's a property that is used to store the name of the role. */\n  @IsNotEmpty()\n  name: string;\n  /** It's a property that is used to store the date when the role was created. */\n  dateCreated: Date | null;\n  /** It's a property that is used to store the date when the role was updated. */\n  dateUpdated: Date | null;\n\n  /**\n   * It converts a RoleDto object to a Role object\n   * @returns A Role object\n   */\n  toModel(): Role {\n    const role = new Role();\n    role.id = this.id;\n    role.name = this.name;\n    return role;\n  }\n\n  /**\n   * It takes a Role object and copies the values of its properties to the properties of the current\n   * object\n   * @param {Role} role - Role - this is the model that we are converting from\n   */\n  fromModel(role: Role) {\n    this.id = role.id;\n    this.name = role.name;\n    this.dateCreated = role.dateCreated;\n    this.dateUpdated = role.dateUpdated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RoleModule.html":{"url":"modules/RoleModule.html","title":"module - RoleModule","body":"\n                   \n\n\n\n\n    Modules\n    RoleModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_RoleModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nRoleModule\n\nRoleModule\n\nRoleModule -->\n\nAuthModule->RoleModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/role/role.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RoleService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RoleController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '../auth/auth.module';\nimport { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\nimport { RoleController } from './role.controller';\nimport { Role } from './role.entity';\nimport { RoleService } from './role.service';\n\n@Module({\n  imports: [AuthModule, TypeOrmModule.forFeature([Role, User, Permission])],\n  providers: [RoleService],\n  controllers: [RoleController],\n})\nexport class RoleModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RoleService.html":{"url":"injectables/RoleService.html","title":"injectable - RoleService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RoleService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/role/role.service.ts\n        \n\n\n            \n                Description\n            \n            \n                It's a service class that provides methods for CRUD operations on the Role entity\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                permissionRepository\n                            \n                            \n                                    Private\n                                roleRepository\n                            \n                            \n                                    Private\n                                userRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                assignPermissions\n                            \n                            \n                                    Async\n                                assignUsers\n                            \n                            \n                                    Async\n                                createRole\n                            \n                            \n                                    Async\n                                deleteRoleById\n                            \n                            \n                                    Async\n                                findAllRolesPageable\n                            \n                            \n                                    Async\n                                findRoleById\n                            \n                            \n                                    Async\n                                updateRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        assignPermissions\n                        \n                    \n                \n            \n            \n                \n                    \n                    assignPermissions(roleId: number, permissionIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:128\n                \n            \n\n\n            \n                \n                    It takes a roleId and an array of permissionIds, finds the role and permissions, assigns the\npermissions to the role, saves the role, and returns the role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of the role to assign permissions to.\n\n\n                                    \n                                \n                                \n                                    permissionIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber[]\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        A RoleDto\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        assignUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    assignUsers(roleId: number, userIds: number[])\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:153\n                \n            \n\n\n            \n                \n                    It takes a roleId and an array of userIds, finds the role and users, assigns the\nusers to the role, saves the role, and returns the role\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nThe id of the role to assign users to.\n\n\n                                    \n                                \n                                \n                                    userIds\n                                    \n                                            number[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber[]\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        A RoleDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRole(roleDto: RoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:101\n                \n            \n\n\n            \n                \n                    It takes a RoleDto, converts it to a Role model, saves it to the database, converts it back to a\nRoleDto, and returns it\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleDto\n                                    \n                                                RoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRoleDto - This is the DTO that will be passed in from the client.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A RoleDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteRoleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteRoleById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:84\n                \n            \n\n\n            \n                \n                    It finds a role by id, if it exists, it deletes it, if it doesn't exist, it throws an error\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber - The id of the role to be deleted\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        The result of the delete operation.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRolesPageable\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRolesPageable(pageOptionsDto: PageOptionsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:32\n                \n            \n\n\n            \n                \n                    It returns a page of roles\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pageOptionsDto\n                                    \n                                                PageOptionsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nPageOptionsDto\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        A PageDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findRoleById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findRoleById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:66\n                \n            \n\n\n            \n                \n                    It finds a role by id, and if it exists, it returns a RoleDto object, otherwise it throws a\nNotFoundException\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnumber - the id of the role we want to find\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A RoleDto object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRole(roleDto: RoleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/role/role.service.ts:113\n                \n            \n\n\n            \n                \n                    It takes a RoleDto, saves it to the database, then returns a RoleDto\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    roleDto\n                                    \n                                                RoleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nRoleDto - This is the DTO that we're going to use to update the role.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A RoleDto\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        permissionRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Permission)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.service.ts:21\n                        \n                    \n\n            \n                \n                    It's a TypeORM repository that provides methods for CRUD operations on the Permission entity.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        roleRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(Role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.service.ts:17\n                        \n                    \n\n            \n                \n                    It's a TypeORM repository that provides methods for CRUD operations on the Role entity.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/role/role.service.ts:25\n                        \n                    \n\n            \n                \n                    It's a TypeORM repository that provides methods for CRUD operations on the User entity.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PageMetaDto } from '../pagination/page-meta.dto';\nimport { PageOptionsDto } from '../pagination/page-options.dto';\nimport { PageDto } from '../pagination/page.dto';\nimport { Permission } from '../permission/permission.entity';\nimport { User } from '../user/user.entity';\nimport { Repository } from 'typeorm';\nimport { RoleDto } from './role.dto';\nimport { Role } from './role.entity';\n\n/** It's a service class that provides methods for CRUD operations on the Role entity */\n@Injectable()\nexport class RoleService {\n  /** It's a TypeORM repository that provides methods for CRUD operations on the Role entity. */\n  @InjectRepository(Role)\n  private roleRepository: Repository;\n\n  /** It's a TypeORM repository that provides methods for CRUD operations on the Permission entity. */\n  @InjectRepository(Permission)\n  private permissionRepository: Repository;\n\n  /** It's a TypeORM repository that provides methods for CRUD operations on the User entity. */\n  @InjectRepository(User)\n  private userRepository: Repository;\n\n  /**\n   * It returns a page of roles\n   * @param {PageOptionsDto} pageOptionsDto - PageOptionsDto\n   * @returns A PageDto object\n   */\n  async findAllRolesPageable(\n    pageOptionsDto: PageOptionsDto,\n  ): Promise> {\n    const queryBuilder = this.roleRepository.createQueryBuilder('roles');\n\n    queryBuilder\n      .orderBy('name', pageOptionsDto.order)\n      .skip(pageOptionsDto.skip)\n      .take(pageOptionsDto.take);\n\n    const itemCount = await queryBuilder.getCount();\n    const { entities } = await queryBuilder.getRawAndEntities();\n\n    const pageMetaDto = new PageMetaDto({ itemCount, pageOptionsDto });\n\n    return new PageDto(\n      entities.map((role) => {\n        /* istanbul ignore next */\n        const dto = new RoleDto();\n        /* istanbul ignore next */\n        dto.fromModel(role);\n        /* istanbul ignore next */\n        return dto;\n      }),\n      pageMetaDto,\n    );\n  }\n\n  /**\n   * It finds a role by id, and if it exists, it returns a RoleDto object, otherwise it throws a\n   * NotFoundException\n   * @param {number} id - number - the id of the role we want to find\n   * @returns A RoleDto object\n   */\n  async findRoleById(id: number): Promise {\n    const result = await this.roleRepository.findOne(id);\n    if (result) {\n      const dto = new RoleDto();\n      dto.fromModel(result);\n      return dto;\n    } else {\n      throw new NotFoundException(\n        'An role with id: ' + id + ' has not been found in database',\n      );\n    }\n  }\n\n  /**\n   * It finds a role by id, if it exists, it deletes it, if it doesn't exist, it throws an error\n   * @param {number} id - number - The id of the role to be deleted\n   * @returns The result of the delete operation.\n   */\n  async deleteRoleById(id: number) {\n    const result = await this.roleRepository.findOne(id);\n    if (result) {\n      return this.roleRepository.delete(id);\n    } else {\n      throw new NotFoundException(\n        'An role with id: ' + id + ' has not been found in database',\n      );\n    }\n  }\n\n  /**\n   * It takes a RoleDto, converts it to a Role model, saves it to the database, converts it back to a\n   * RoleDto, and returns it\n   * @param {RoleDto} roleDto - RoleDto - This is the DTO that will be passed in from the client.\n   * @returns A RoleDto object\n   */\n  async createRole(roleDto: RoleDto): Promise {\n    const role = await this.roleRepository.save(roleDto.toModel());\n    const dto = new RoleDto();\n    dto.fromModel(role);\n    return dto;\n  }\n\n  /**\n   * It takes a RoleDto, saves it to the database, then returns a RoleDto\n   * @param {RoleDto} roleDto - RoleDto - This is the DTO that we're going to use to update the role.\n   * @returns A RoleDto\n   */\n  async updateRole(roleDto: RoleDto): Promise {\n    await this.roleRepository.save(roleDto.toModel());\n    const role = await this.roleRepository.findOne(roleDto.id);\n    const dto = new RoleDto();\n    dto.fromModel(role);\n    return dto;\n  }\n\n  /**\n   * It takes a roleId and an array of permissionIds, finds the role and permissions, assigns the\n   * permissions to the role, saves the role, and returns the role\n   * @param {number} roleId - The id of the role to assign permissions to.\n   * @param {number[]} permissionIds - number[]\n   * @returns A RoleDto\n   */\n  async assignPermissions(roleId: number, permissionIds: number[]) {\n    let role = await this.roleRepository.findOne(roleId);\n    const permissions = await this.permissionRepository.findByIds(\n      permissionIds,\n    );\n\n    if (role && permissions && permissions.length > 0) {\n      role.permissions = permissions;\n      await this.roleRepository.save(role);\n      role = await this.roleRepository.findOne(role.id);\n      const dto = new RoleDto();\n      dto.fromModel(role);\n      return dto;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n\n  /**\n   * It takes a roleId and an array of userIds, finds the role and users, assigns the\n   * users to the role, saves the role, and returns the role\n   * @param {number} roleId - The id of the role to assign users to.\n   * @param {number[]} userIds - number[]\n   * @returns A RoleDto object\n   */\n  async assignUsers(roleId: number, userIds: number[]) {\n    let role = await this.roleRepository.findOne(roleId);\n    const users = await this.userRepository.findByIds(userIds);\n\n    if (role && users && users.length > 0) {\n      role.users = users;\n      await this.roleRepository.save(role);\n      role = await this.roleRepository.findOne(role.id);\n      const dto = new RoleDto();\n      dto.fromModel(role);\n      return dto;\n    } else {\n      throw new NotFoundException();\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenDto.html":{"url":"classes/TokenDto.html","title":"class - TokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This class is a data transfer object (DTO) that represents the access and refresh tokens returned by\nthe server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                refresh_token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(access_token: string, refresh_token: string)\n                    \n                \n                        \n                            \n                                Defined in src/auth/token.dto.ts:7\n                            \n                        \n\n                \n                    \n                            The constructor function is a special function that is called when an object is created from a\nclass\ncode exchange.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        access_token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe access token that you get from the Spotify API.\n\n\n                                                        \n                                                \n                                                \n                                                        refresh_token\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe refresh token that was returned from the initial authorization\ncode exchange.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/token.dto.ts:5\n                        \n                    \n\n            \n                \n                    A property that holds information about access token\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/token.dto.ts:7\n                        \n                    \n\n            \n                \n                    A property that holds information about refresh token.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenDto {\n  /** A property that holds information about access token */\n  access_token: string;\n  /** A property that holds information about refresh token. */\n  refresh_token: string;\n\n  /**\n   * The constructor function is a special function that is called when an object is created from a\n   * class\n   * @param {string} access_token - The access token that you get from the Spotify API.\n   * @param {string} refresh_token - The refresh token that was returned from the initial authorization\n   * code exchange.\n   */\n  constructor(access_token: string, refresh_token: string) {\n    this.access_token = access_token;\n    this.refresh_token = refresh_token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePermissionPolicyHandler.html":{"url":"classes/UpdatePermissionPolicyHandler.html","title":"class - UpdatePermissionPolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePermissionPolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/permission.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the UPDATE permission on the Permission resource, then they can update permissions.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/permission.policies.ts:51\n                \n            \n\n\n            \n                \n                    If the user has the ability to update permissions, then they can update permissions\nprevious step.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - This is the ability class that you created in the\nprevious step.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Permission } from '../../permission/permission.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** \"If the user has the READ permission on the Permission resource, then they can read the Permission\nresource.\"\n\nThe `handle` method is called by the `can` method of the `AppAbility` class. The `handle` method is\npassed the `AppAbility` instance. The `handle` method returns a boolean value. If the value is true,\nthen the user has the permission. If the value is false, then the user does not have the permission */\nexport class ReadPermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to read the Permission model, then they can read the Permission model\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Permission);\n  }\n}\n\n/** If the user has the ability to create a permission, then they can create a permission. */\nexport class CreatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a Permission, then they can create a Permission.\"\n   *\n   * The above function is a good example of how to use the `can` function. The `can` function takes\n   * two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Permission);\n  }\n}\n\n/** If the user has the UPDATE permission on the Permission resource, then they can update permissions. */\nexport class UpdatePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * If the user has the ability to update permissions, then they can update permissions\n   * @param {AppAbility} ability - AppAbility - This is the ability class that you created in the\n   * previous step.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Permission);\n  }\n}\n\n/** If the user has the DELETE permission on the Permission resource, then they can delete a permission. */\nexport class DeletePermissionPolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a Permission, then they can delete a Permission.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - This is the ability object that is passed to the can\n   * function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Permission);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolePolicyHandler.html":{"url":"classes/UpdateRolePolicyHandler.html","title":"class - UpdateRolePolicyHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolePolicyHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/policies/role.policies.ts\n        \n\n\n            \n                Description\n            \n            \n                If the user has the UPDATE permission on the Role resource, then they can update a role.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IPolicyHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(ability: AppAbility)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/policies/role.policies.ts:58\n                \n            \n\n\n            \n                \n                    \"If the user has the UPDATE permission on the Role resource, then they can update the role.\"\nThe ability.can() function takes two parameters:\nThe first parameter is the action that the user is trying to perform. In this case, the user is\ntrying to update the role.\nThe second parameter is the resource that the user is trying to perform the action on. In this\ncase, the user is trying to update the role resource.\nThe ability.can() function returns a boolean value. If the user has the UPDATE permission on the\nRole resource, then the function returns true. If the user does not have the UPDATE permission on\nthe Role resource, then the function returns false\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ability\n                                    \n                                                AppAbility\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nAppAbility - The ability object that is passed to the can function.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        A boolean value.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Role } from '../../role/role.entity';\nimport {\n  AppAbility,\n  IPolicyHandler,\n  PermissionAction,\n} from '../casl-ability.factory';\n\n/** If the user has the READ permission on the Role resource, then they can read the role. */\nexport class ReadRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the READ permission on the Role resource, then they can read the Role resource.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.READ, Role);\n  }\n}\n\n/** If the user has the CREATE permission for the Role resource, then they can create a role. */\nexport class CreateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to create a role, then they can create a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The resource that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can() method.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.CREATE, Role);\n  }\n}\n\n/** If the user has the UPDATE permission on the Role resource, then they can update a role. */\nexport class UpdateRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the UPDATE permission on the Role resource, then they can update the role.\"\n   *\n   * The ability.can() function takes two parameters:\n   *\n   * The first parameter is the action that the user is trying to perform. In this case, the user is\n   * trying to update the role.\n   * The second parameter is the resource that the user is trying to perform the action on. In this\n   * case, the user is trying to update the role resource.\n   * The ability.can() function returns a boolean value. If the user has the UPDATE permission on the\n   * Role resource, then the function returns true. If the user does not have the UPDATE permission on\n   * the Role resource, then the function returns false\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.UPDATE, Role);\n  }\n}\n\n/** If the user has the DELETE permission on the Role resource, then they can delete a role. */\nexport class DeleteRolePolicyHandler implements IPolicyHandler {\n  /**\n   * \"If the user has the ability to delete a role, then they can delete a role.\"\n   *\n   * The `can` function takes two parameters:\n   *\n   * 1. The action that the user is trying to perform.\n   * 2. The subject that the user is trying to perform the action on\n   * @param {AppAbility} ability - AppAbility - The ability object that is passed to the can function.\n   * @returns A boolean value.\n   */\n  handle(ability: AppAbility) {\n    return ability.can(PermissionAction.DELETE, Role);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                A user can have many addresses and many roles\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                addresses\n                            \n                            \n                                dateCreated\n                            \n                            \n                                dateOfBirth\n                            \n                            \n                                dateUpdated\n                            \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isAccountActivated\n                            \n                            \n                                isEmailVerified\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        addresses\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, address => address.user, {nullable: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateCreated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateOfBirth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, default: undefined, type: 'date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateUpdated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAccountActivated\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmailVerified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, roles => roles.users, {nullable: true, eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        /* It's a class that represents a user */\nimport { Address } from '../address/address.entity';\nimport { Role } from '../role/role.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinTable,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n/** A user can have many addresses and many roles */\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column({ unique: true })\n  @Index()\n  username: string;\n\n  @Column({ unique: true })\n  @Index()\n  email: string;\n\n  @Column({ default: false })\n  isEmailVerified: boolean;\n\n  @Column({ default: true })\n  isAccountActivated: true;\n\n  @Column()\n  password: string;\n\n  @Column({ nullable: true, default: null, type: 'date' })\n  dateOfBirth: Date;\n\n  @OneToMany(() => Address, (address) => address.user, {\n    nullable: true,\n    eager: true,\n  })\n  addresses: Address[];\n\n  @CreateDateColumn()\n  dateCreated: Date;\n\n  @UpdateDateColumn()\n  dateUpdated: Date;\n\n  @ManyToMany(() => Role, (roles) => roles.users, {\n    nullable: true,\n    eager: true,\n  })\n  @JoinTable()\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This class is a module that imports the TypeOrmModule.forFeature() method, which is a method that\ntakes an array of entities as an argument\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Address } from '../address/address.entity';\nimport { Permission } from '../permission/permission.entity';\nimport { Role } from '../role/role.entity';\nimport { User } from './user.entity';\nimport { UserService } from './user.service';\n\n/** This class is a module that imports the TypeOrmModule.forFeature() method, which is a method that\ntakes an array of entities as an argument */\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Address, Role, Permission])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class that represents the service that will manage users of the application\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                userRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findByUsernameOrEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findByUsernameOrEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findByUsernameOrEmail(emailOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:21\n                \n            \n\n\n            \n                \n                    It returns a promise that resolves to a user object or undefined\nto find the user.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    emailOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nstring - This is the email or username that we're going to use\nto find the user.\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        A promise of a user or undefined\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        userRepository\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Repository\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @InjectRepository(User)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/user.service.ts:13\n                        \n                    \n\n            \n                \n                    It's a TypeORM repository that will allow us to perform CRUD operations on the User entity.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\n\n/**\n * Class that represents the service that will manage users of the application\n */\n@Injectable()\nexport class UserService {\n  /** It's a TypeORM repository that will allow us to perform CRUD operations on the User entity. */\n  @InjectRepository(User)\n  private userRepository: Repository;\n\n  /**\n   * It returns a promise that resolves to a user object or undefined\n   * @param {string} emailOrUsername - string - This is the email or username that we're going to use\n   * to find the user.\n   * @returns A promise of a user or undefined\n   */\n  async findByUsernameOrEmail(\n    emailOrUsername: string,\n  ): Promise {\n    const result = this.userRepository.findOne({\n      where: [{ email: emailOrUsername }, { username: emailOrUsername }],\n    });\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/address/address.entity.ts\n            \n            entity\n            Address\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/casl-ability.factory.ts\n            \n            injectable\n            CaslAbilityFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/casl-ability.factory.ts\n            \n            interface\n            CaslPermission\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/casl-ability.factory.ts\n            \n            interface\n            IPolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/casl-ability.factory.ts\n            \n            variable\n            CHECK_POLICIES_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/casl-ability.factory.ts\n            \n            variable\n            CheckPolicies\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/login.dto.ts\n            \n            class\n            LoginDto\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/policies.guard.ts\n            \n            guard\n            PoliciesGuard\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/policies/permission.policies.ts\n            \n            class\n            CreatePermissionPolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/permission.policies.ts\n            \n            class\n            DeletePermissionPolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/permission.policies.ts\n            \n            class\n            ReadPermissionPolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/permission.policies.ts\n            \n            class\n            UpdatePermissionPolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/role.policies.ts\n            \n            class\n            CreateRolePolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/role.policies.ts\n            \n            class\n            DeleteRolePolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/role.policies.ts\n            \n            class\n            ReadRolePolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/policies/role.policies.ts\n            \n            class\n            UpdateRolePolicyHandler\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/public.factory.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/public.factory.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/refresh-token.dto.ts\n            \n            class\n            RefreshTokenDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/token.dto.ts\n            \n            class\n            TokenDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/config/postgres.config.ts\n            \n            variable\n            postgressConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pagination/page-meta-dto-parameters.interface.ts\n            \n            interface\n            PageMetaDtoParameters\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/pagination/page-meta.dto.ts\n            \n            class\n            PageMetaDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/pagination/page-options.dto.ts\n            \n            class\n            PageOptionsDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/pagination/page.dto.ts\n            \n            class\n            PageDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/permission/permission.controller.ts\n            \n            controller\n            PermissionController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/permission/permission.dto.ts\n            \n            class\n            PermissionDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/permission/permission.entity.ts\n            \n            entity\n            Permission\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/permission/permission.entity.ts\n            \n            class\n            Permission\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/permission/permission.service.ts\n            \n            injectable\n            PermissionService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/role/asign-role-permissions.dto.ts\n            \n            class\n            AssignRolePermissionsQuery\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/role/asign-role-users.dto.ts\n            \n            class\n            AssignRoleUsersQuery\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/role/role.controller.ts\n            \n            controller\n            RoleController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/role/role.dto.ts\n            \n            class\n            RoleDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/role/role.entity.ts\n            \n            entity\n            Role\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/role/role.service.ts\n            \n            injectable\n            RoleService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/user/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/util/bcrypt.ts\n            \n            function\n            comparePasswords\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/util/bcrypt.ts\n            \n            function\n            encodePassword\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @casl/ability : ^5.4.4\n        \n            @nestjs/axios : ^0.0.8\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/platform-fastify : ^8.4.6\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/terminus : ^8.0.6\n        \n            @nestjs/throttler : ^2.0.1\n        \n            @nestjs/typeorm : ^8.0.4\n        \n            @types/passport-local : ^1.0.34\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv : ^16.0.1\n        \n            fastify-csrf : ^3.1.0\n        \n            fastify-helmet : ^7.1.0\n        \n            fastify-swagger : ^5.2.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : ^0.2.45\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Order   (src/.../page-order.model.ts)\n                        \n                        \n                            PermissionAction   (src/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/pagination/page-order.model.ts\n    \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                    \n                        \n                            Creating an enum called Order with two values ASC and DESC.\n\n                        \n                    \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n\n    src/auth/casl-ability.factory.ts\n    \n        \n            \n                \n                    \n                        \n                        PermissionAction\n                    \n                \n                    \n                        \n                            Defining the actions that can be performed on a resource.\n\n                        \n                    \n                        \n                            \n                                 CREATE\n                            \n                        \n                        \n                            \n                                Value : create\n                            \n                        \n                        \n                            \n                                 READ\n                            \n                        \n                        \n                            \n                                Value : read\n                            \n                        \n                        \n                            \n                                 UPDATE\n                            \n                        \n                        \n                            \n                                Value : update\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : delete\n                            \n                        \n                        \n                            \n                                 MANAGE\n                            \n                        \n                        \n                            \n                                Value : manage\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            comparePasswords   (src/.../bcrypt.ts)\n                        \n                        \n                            encodePassword   (src/.../bcrypt.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    It creates a new Nest application, sets the global prefix to api, enables versioning, enables CORS,\nregisters the helmet plugin, and finally starts the application on the port specified in the\nenvironment file\n\n\n                \n            \n        \n    \n    src/util/bcrypt.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePasswords\n                        \n                    \n                \n            \n            \n                \ncomparePasswords(rawPassword: string, hash: string)\n                \n            \n\n\n\n\n            \n                \n                    Function that takes the raw text and hash and compares them to see whether they are the same\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rawPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        represents raw text to compare\n\n                                    \n                                \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        value that represents the bcrypt hash to compare raw text with\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encodePassword\n                        \n                    \n                \n            \n            \n                \nencodePassword(rawPassword: string)\n                \n            \n\n\n\n\n            \n                \n                    Function that takes the value of the raw string and encodes it to the bcrypt hash with random salt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    rawPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        text value that represents password that will be encoded\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n\nDescription\nNest framework backend application written in TypeScript for PronadjiMajstora platform.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning the app on docker\n$ docker-compose -f docker-compose-dev.yml upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDocumentation\nTo Serve Documentation locally\nnpm run documentation:serveAfter This command you should visit http://localhost:8080 in order to look at code documentation page page\nTo Build Documentation\nnpm run documentation:buildOr visit swagger page after ruuning application on http://localhost:3000:/api/docs\nWorking With Database Migrations\nCreating new empty migration\n$ npm run migration:create `migration name`Generating migrations depending on the schema change\n$ npm run migration:generate `migration name`Showing Pending migrations\n$ npm run migration:showRunning migrations\n$ npm run migration:migrateReverting migrations\n$ npm run migration:revertLicense\nEuropean Union Public License 1.2, For more details read LICENSE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\n EUROPEAN UNION PUBLIC LICENCE v. 1.2\n                      EUPL © the European Union 2007, 2016\nThis European Union Public Licence (the ‘EUPL’) applies to the Work (as\ndefined below) which is provided under the terms of this Licence. Any use of\nthe Work, other than as authorised under this Licence is prohibited (to the\nextent such use is covered by a right of the copyright holder of the Work).\nThe Work is provided under the terms of this Licence when the Licensor (as\ndefined below) has placed the following notice immediately following the\ncopyright notice for the Work:\n    Licensed under the EUPLor has expressed by any other means his willingness to license under the EUPL.\n\nDefinitions\n\nIn this Licence, the following terms have the following meaning:\n\n‘The Licence’: this Licence.\n\n‘The Original Work’: the work or software distributed or communicated by the\nLicensor under this Licence, available as Source Code and also as Executable\nCode as the case may be.\n\n‘Derivative Works’: the works or software that could be created by the\nLicensee, based upon the Original Work or modifications thereof. This\nLicence does not define the extent of modification or dependence on the\nOriginal Work required in order to classify a work as a Derivative Work;\nthis extent is determined by copyright law applicable in the country\nmentioned in Article 15.\n\n‘The Work’: the Original Work or its Derivative Works.\n\n‘The Source Code’: the human-readable form of the Work which is the most\nconvenient for people to study and modify.\n\n‘The Executable Code’: any code which has generally been compiled and which\nis meant to be interpreted by a computer as a program.\n\n‘The Licensor’: the natural or legal person that distributes or communicates\nthe Work under the Licence.\n\n‘Contributor(s)’: any natural or legal person who modifies the Work under\nthe Licence, or otherwise contributes to the creation of a Derivative Work.\n\n‘The Licensee’ or ‘You’: any natural or legal person who makes any usage of\nthe Work under the terms of the Licence.\n\n‘Distribution’ or ‘Communication’: any act of selling, giving, lending,\nrenting, distributing, communicating, transmitting, or otherwise making\navailable, online or offline, copies of the Work or providing access to its\nessential functionalities at the disposal of any other natural or legal\nperson.\n\n\n\nScope of the rights granted by the Licence\n\nThe Licensor hereby grants You a worldwide, royalty-free, non-exclusive,\nsublicensable licence to do the following, for the duration of copyright\nvested in the Original Work:\n\nuse the Work in any circumstance and for all usage,\nreproduce the Work,\nmodify the Work, and make Derivative Works based upon the Work,\ncommunicate to the public, including the right to make available or display\nthe Work or copies thereof to the public and perform publicly, as the case\nmay be, the Work,\ndistribute the Work or copies thereof,\nlend and rent the Work or copies thereof,\nsublicense rights in the Work or copies thereof.\n\nThose rights can be exercised on any media, supports and formats, whether now\nknown or later invented, as far as the applicable law permits so.\nIn the countries where moral rights apply, the Licensor waives his right to\nexercise his moral right to the extent allowed by law in order to make\neffective the licence of the economic rights here above listed.\nThe Licensor grants to the Licensee royalty-free, non-exclusive usage rights\nto any patents held by the Licensor, to the extent necessary to make use of\nthe rights granted on the Work under this Licence.\n\nCommunication of the Source Code\n\nThe Licensor may provide the Work either in its Source Code form, or as\nExecutable Code. If the Work is provided as Executable Code, the Licensor\nprovides in addition a machine-readable copy of the Source Code of the Work\nalong with each copy of the Work that the Licensor distributes or indicates,\nin a notice following the copyright notice attached to the Work, a repository\nwhere the Source Code is easily and freely accessible for as long as the\nLicensor continues to distribute or communicate the Work.\n\nLimitations on copyright\n\nNothing in this Licence is intended to deprive the Licensee of the benefits\nfrom any exception or limitation to the exclusive rights of the rights owners\nin the Work, of the exhaustion of those rights or of other applicable\nlimitations thereto.\n\nObligations of the Licensee\n\nThe grant of the rights mentioned above is subject to some restrictions and\nobligations imposed on the Licensee. Those obligations are the following:\nAttribution right: The Licensee shall keep intact all copyright, patent or\ntrademarks notices and all notices that refer to the Licence and to the\ndisclaimer of warranties. The Licensee must include a copy of such notices and\na copy of the Licence with every copy of the Work he/she distributes or\ncommunicates. The Licensee must cause any Derivative Work to carry prominent\nnotices stating that the Work has been modified and the date of modification.\nCopyleft clause: If the Licensee distributes or communicates copies of the\nOriginal Works or Derivative Works, this Distribution or Communication will be\ndone under the terms of this Licence or of a later version of this Licence\nunless the Original Work is expressly distributed only under this version of\nthe Licence — for example by communicating ‘EUPL v. 1.2 only’. The Licensee\n(becoming Licensor) cannot offer or impose any additional terms or conditions\non the Work or Derivative Work that alter or restrict the terms of the\nLicence.\nCompatibility clause: If the Licensee Distributes or Communicates Derivative\nWorks or copies thereof based upon both the Work and another work licensed\nunder a Compatible Licence, this Distribution or Communication can be done\nunder the terms of this Compatible Licence. For the sake of this clause,\n‘Compatible Licence’ refers to the licences listed in the appendix attached to\nthis Licence. Should the Licensee's obligations under the Compatible Licence\nconflict with his/her obligations under this Licence, the obligations of the\nCompatible Licence shall prevail.\nProvision of Source Code: When distributing or communicating copies of the\nWork, the Licensee will provide a machine-readable copy of the Source Code or\nindicate a repository where this Source will be easily and freely available\nfor as long as the Licensee continues to distribute or communicate the Work.\nLegal Protection: This Licence does not grant permission to use the trade\nnames, trademarks, service marks, or names of the Licensor, except as required\nfor reasonable and customary use in describing the origin of the Work and\nreproducing the content of the copyright notice.\n\nChain of Authorship\n\nThe original Licensor warrants that the copyright in the Original Work granted\nhereunder is owned by him/her or licensed to him/her and that he/she has the\npower and authority to grant the Licence.\nEach Contributor warrants that the copyright in the modifications he/she\nbrings to the Work are owned by him/her or licensed to him/her and that he/she\nhas the power and authority to grant the Licence.\nEach time You accept the Licence, the original Licensor and subsequent\nContributors grant You a licence to their contributions to the Work, under the\nterms of this Licence.\n\nDisclaimer of Warranty\n\nThe Work is a work in progress, which is continuously improved by numerous\nContributors. It is not a finished work and may therefore contain defects or\n‘bugs’ inherent to this type of development.\nFor the above reason, the Work is provided under the Licence on an ‘as is’\nbasis and without warranties of any kind concerning the Work, including\nwithout limitation merchantability, fitness for a particular purpose, absence\nof defects or errors, accuracy, non-infringement of intellectual property\nrights other than copyright as stated in Article 6 of this Licence.\nThis disclaimer of warranty is an essential part of the Licence and a\ncondition for the grant of any rights to the Work.\n\nDisclaimer of Liability\n\nExcept in the cases of wilful misconduct or damages directly caused to natural\npersons, the Licensor will in no event be liable for any direct or indirect,\nmaterial or moral, damages of any kind, arising out of the Licence or of the\nuse of the Work, including without limitation, damages for loss of goodwill,\nwork stoppage, computer failure or malfunction, loss of data or any commercial\ndamage, even if the Licensor has been advised of the possibility of such\ndamage. However, the Licensor will be liable under statutory product liability\nlaws as far such laws apply to the Work.\n\nAdditional agreements\n\nWhile distributing the Work, You may choose to conclude an additional\nagreement, defining obligations or services consistent with this Licence.\nHowever, if accepting obligations, You may act only on your own behalf and on\nyour sole responsibility, not on behalf of the original Licensor or any other\nContributor, and only if You agree to indemnify, defend, and hold each\nContributor harmless for any liability incurred by, or claims asserted against\nsuch Contributor by the fact You have accepted any warranty or additional\nliability.\n\nAcceptance of the Licence\n\nThe provisions of this Licence can be accepted by clicking on an icon ‘I\nagree’ placed under the bottom of a window displaying the text of this Licence\nor by affirming consent in any other similar way, in accordance with the rules\nof applicable law. Clicking on that icon indicates your clear and irrevocable\nacceptance of this Licence and all of its terms and conditions.\nSimilarly, you irrevocably accept this Licence and all of its terms and\nconditions by exercising any rights granted to You by Article 2 of this\nLicence, such as the use of the Work, the creation by You of a Derivative Work\nor the Distribution or Communication by You of the Work or copies thereof.\n\nInformation to the public\n\nIn case of any Distribution or Communication of the Work by means of\nelectronic communication by You (for example, by offering to download the Work\nfrom a remote location) the distribution channel or media (for example, a\nwebsite) must at least provide to the public the information requested by the\napplicable law regarding the Licensor, the Licence and the way it may be\naccessible, concluded, stored and reproduced by the Licensee.\n\nTermination of the Licence\n\nThe Licence and the rights granted hereunder will terminate automatically upon\nany breach by the Licensee of the terms of the Licence.\nSuch a termination will not terminate the licences of any person who has\nreceived the Work from the Licensee under the Licence, provided such persons\nremain in full compliance with the Licence.\n\nMiscellaneous\n\nWithout prejudice of Article 9 above, the Licence represents the complete\nagreement between the Parties as to the Work.\nIf any provision of the Licence is invalid or unenforceable under applicable\nlaw, this will not affect the validity or enforceability of the Licence as a\nwhole. Such provision will be construed or reformed so as necessary to make it\nvalid and enforceable.\nThe European Commission may publish other linguistic versions or new versions\nof this Licence or updated versions of the Appendix, so far this is required\nand reasonable, without reducing the scope of the rights granted by the\nLicence. New versions of the Licence will be published with a unique version\nnumber.\nAll linguistic versions of this Licence, approved by the European Commission,\nhave identical value. Parties can take advantage of the linguistic version of\ntheir choice.\n\nJurisdiction\n\nWithout prejudice to specific agreement between parties,\n\nany litigation resulting from the interpretation of this License, arising\nbetween the European Union institutions, bodies, offices or agencies, as a\nLicensor, and any Licensee, will be subject to the jurisdiction of the Court\nof Justice of the European Union, as laid down in article 272 of the Treaty\non the Functioning of the European Union,\n\nany litigation arising between other parties and resulting from the\ninterpretation of this License, will be subject to the exclusive\njurisdiction of the competent court where the Licensor resides or conducts\nits primary business.\n\n\n\nApplicable Law\n\nWithout prejudice to specific agreement between parties,\n\nthis Licence shall be governed by the law of the European Union Member State\nwhere the Licensor has his seat, resides or has his registered office,\n\nthis licence shall be governed by Belgian law if the Licensor has no seat,\nresidence or registered office inside a European Union Member State.\n\n\nAppendix\n‘Compatible Licences’ according to Article 5 EUPL are:\n\nGNU General Public License (GPL) v. 2, v. 3\nGNU Affero General Public License (AGPL) v. 3\nOpen Software License (OSL) v. 2.1, v. 3.0\nEclipse Public License (EPL) v. 1.0\nCeCILL v. 2.0, v. 2.1\nMozilla Public Licence (MPL) v. 2\nGNU Lesser General Public Licence (LGPL) v. 2.1, v. 3\nCreative Commons Attribution-ShareAlike v. 3.0 Unported (CC BY-SA 3.0) for\nworks other than software\nEuropean Union Public Licence (EUPL) v. 1.1, v. 1.2\nQuébec Free and Open-Source Licence — Reciprocity (LiLiQ-R) or Strong\nReciprocity (LiLiQ-R+).\n\nThe European Commission may update this Appendix to later versions of the\nabove licences without producing a new version of the EUPL, as long as they\nprovide the rights granted in Article 2 of this Licence and protect the\ncovered Source Code from exclusive appropriation.\nAll other changes or additions to this Appendix require the production of a\nnew EUPL version.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PermissionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RoleModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PermissionModule\n\n\n\ncluster_PermissionModule_providers\n\n\n\ncluster_RoleModule\n\n\n\ncluster_RoleModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nPermissionModule\n\nPermissionModule\n\nPermissionModule -->\n\nAuthModule->PermissionModule\n\n\n\n\n\nRoleModule\n\nRoleModule\n\nRoleModule -->\n\nAuthModule->RoleModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCaslAbilityFactory \n\nCaslAbilityFactory \n\nCaslAbilityFactory  -->\n\nAuthModule->CaslAbilityFactory \n\n\n\n\n\nPoliciesGuard \n\nPoliciesGuard \n\nPoliciesGuard  -->\n\nAuthModule->PoliciesGuard \n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAppModule -->\n\nPermissionModule->AppModule\n\n\n\nAppModule -->\n\nRoleModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCaslAbilityFactory\n\nCaslAbilityFactory\n\nAuthModule -->\n\nCaslAbilityFactory->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPermissionService\n\nPermissionService\n\nPermissionModule -->\n\nPermissionService->PermissionModule\n\n\n\n\n\nRoleService\n\nRoleService\n\nRoleModule -->\n\nRoleService->RoleModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AppAbility   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            PermissionObjectType   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            PolicyHandler   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            PolicyHandlerCallback   (src/.../casl-ability.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl-ability.factory.ts\n    \n    \n        \n            \n                \n                    \n                    AppAbility\n                \n            \n            \n                \n                    Defining the type of the third argument of the Ability class.\n\n                \n            \n            \n                \n                        Ability<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PermissionObjectType\n                \n            \n            \n                \n                    Defining the type of the second argument of the Ability class.\n\n                \n            \n            \n                \n                            any\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandler\n                \n            \n            \n                \n                    Defining a type that is used to create a policy handler.\n\n                \n            \n            \n                \n                            IPolicyHandler | PolicyHandlerCallback\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PolicyHandlerCallback\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_POLICIES_KEY   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            CheckPolicies   (src/.../casl-ability.factory.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.factory.ts)\n                        \n                        \n                            postgressConfig   (src/.../postgres.config.ts)\n                        \n                        \n                            Public   (src/.../public.factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/casl-ability.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_POLICIES_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_policy'\n                    \n                \n\n            \n                \n                    A constant that is used to store the metadata of the decorated class or method.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CheckPolicies\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...handlers: PolicyHandler[]) =>\n  SetMetadata(CHECK_POLICIES_KEY, handlers)\n                    \n                \n\n            \n                \n                    It takes a list of policy handlers and adds them to the metadata of the decorated class or method\n\n                \n            \n\n        \n    \n\n    src/auth/public.factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Setting a metadata key on the decorated class or method\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    It sets a metadata key on the decorated class or method\n\n                \n            \n\n        \n    \n\n    src/config/postgres.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        postgressConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: enviroment.POSTGRES_HOST, // localhost\n  port: enviroment.POSTGRES_PORT, // 5432\n  username: enviroment.POSTGRES_USERNAME, // databse login role username\n  password: enviroment.POSTGRES_PASSWORD, // database login role password\n  database: enviroment.POSTGRES_DATABASE, // db name\n\n  // entities name should be **.entity.ts\n  entities: ['dist/src/**/*.entity.js'],\n\n  // We are using migrations, synchronize should be set to false.\n  // synchronize: process.env.TYPEORM_SYNCHRONIZE\n  //  ? process.env.TYPEORM_SYNCHRONIZE.toLowerCase() === 'true'\n  //  : false,\n  synchronize: false,\n\n  // Run migrations automatically,\n  // you can disable this if you prefer running migration manually.\n  migrationsRun: false,\n\n  logging: false,\n  // logger: 'advanced-console',\n\n  // Allow both start:prod and start:dev to use migrations\n  // __dirname is either dist or src folder, meaning either\n  // the compiled js in prod or the ts in dev.\n  migrations: ['dist/src/migrations/seed/*.js', 'dist/src/migrations/*.js'],\n  autoLoadEntities: true,\n  migrationsTableName: 'migrations_typeorm',\n  cli: {\n    migrationsDir: 'src/migrations',\n  },\n}\n                    \n                \n\n            \n                \n                    A configuration for typeorm.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
